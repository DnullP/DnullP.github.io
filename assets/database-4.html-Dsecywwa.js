import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,o as t,c as o,d as i,e}from"./app-DCTCPPGQ.js";const l={},r=e('<p>I don&#39;t want to learn and talk much about this part, because this part usually has a different support in different database software.</p><p>So I will just describe what the SQL should be able to do, and explain some basic principle of it.</p><h1 id="accessing-sql-from-a-program-language" tabindex="-1"><a class="header-anchor" href="#accessing-sql-from-a-program-language"><span>Accessing SQL from a Program language</span></a></h1><p>We need to identify the queries or the modification of the database from the program language. Thers are mainly two reasons for it.</p><ul><li>To express a complex SQL</li><li>To perform the nondeclarative actions (like print the report)</li></ul><p>And there are usually two kinds of SQL used in the program language.</p><ul><li>Embedded SQL</li><li>Dynamic SQL</li></ul><h2 id="embedded-sql" tabindex="-1"><a class="header-anchor" href="#embedded-sql"><span>Embedded SQL</span></a></h2><p>This way usually need to change the program language itself, and use a <strong>preprocessor</strong> to translate the Embedded SQL into the source code of the program language.</p><p>This is not a good way because it need to change the source code and introduce the new grammar for the program language. It requires the programmer to learn the new grammar and introduce the new bugs.</p><h2 id="dynamic-sql" tabindex="-1"><a class="header-anchor" href="#dynamic-sql"><span>Dynamic SQL</span></a></h2><p>This way is more flexible and widely used.</p><p>The basic method of the dynamic SQL is to construct the SQL statement at the running time. Then send the SQL statement to the database process to execute it.</p><p>One of the most used dynamic SQL framework is the <strong>JDBC</strong> in the Java.</p><p>I depict a simple architecture of it below:</p>',15),p=e(`<p>There is only one important thing we need to notice.</p><p>When we join a string with the SQL statement, we should use the <code>?</code>, which is called <strong>placeholder</strong>. Then we pass the exact name of the <code>?</code> as a parameter to the <code>executeQuery</code> or <code>executeUpdate</code> method.</p><p>This is important to avoid the <strong>SQL injection</strong>.</p><p>Image we have a SQL statement like this:</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span> <span class="token keyword">WHERE</span> name <span class="token operator">=</span> input<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The input is in fact a parameter which is passed by the client. But if a client pass a name like this:</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token string">&#39;Tom&#39;</span> <span class="token operator">OR</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Then the SQL statement will be:</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span> <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">&#39;Tom&#39;</span> <span class="token operator">OR</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This will show all the user in the database. This is a very dangerous situation.</p><p>So we should use the placeholder to avoid string concatenation.</p><p>Other dynamic SQL framework like <strong>psycopg2</strong> in Python or <strong>ODBC</strong> in C++ won&#39;t be introduced here.</p><h1 id="procedure-and-functions" tabindex="-1"><a class="header-anchor" href="#procedure-and-functions"><span>Procedure and Functions</span></a></h1><table><thead><tr><th>Parameters</th><th>Function</th><th>Procedure</th></tr></thead><tbody><tr><td>Basics</td><td>Functions calculate the results of a program based on given input.</td><td>Procedures perform tasks in a particular order based on input.</td></tr><tr><td>Try-Catch Blocks</td><td>Do not support try-catch blocks.</td><td>Support try-catch blocks.</td></tr><tr><td>SQL Query</td><td>Can be called in a SQL Query.</td><td>Cannot be called in a SQL Query.</td></tr><tr><td>SELECT</td><td>SELECT statements can have function calls.</td><td>SELECT statements cannot have procedure calls.</td></tr><tr><td>Return</td><td>Returns value/control to the code or calling function.</td><td>Returns control, but not any value to the calling function/code.</td></tr><tr><td>DML Statements</td><td>Cannot use DML statements (Update, Delete, Insert).</td><td>Can use DML statements.</td></tr><tr><td>Call</td><td>Can be called using a procedure.</td><td>Cannot be called using a function.</td></tr><tr><td>Compilation</td><td>Compilation occurs when called in a program.</td><td>Compilation occurs once; can be called repeatedly without recompilation.</td></tr><tr><td>Expression</td><td>Must deal with expressions.</td><td>Need not deal with expressions.</td></tr><tr><td>Explicit Transaction Handling</td><td>Cannot have explicit transaction handling.</td><td>Has explicit transaction handling.</td></tr></tbody></table><p>Through the table above, we can see that the main difference between the procedure and the function.</p><p>We can consider the function in the SQL as in the math, it&#39;s just a mapping from the input to the output. It emphasizes on the data mapping and the calculation.</p><p>But the procedure is a task which need to be done. It&#39;s more like the concept in the programming.</p><p>We can define a function like this:</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span> getNthHighestSalary<span class="token punctuation">(</span>N <span class="token keyword">INT</span><span class="token punctuation">)</span> <span class="token keyword">RETURNS</span> <span class="token keyword">INT</span>
<span class="token keyword">BEGIN</span>
  <span class="token keyword">DECLARE</span> M <span class="token keyword">INT</span><span class="token punctuation">;</span>
  <span class="token keyword">SET</span> M <span class="token operator">=</span> N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">RETURN</span> <span class="token punctuation">(</span>
      <span class="token comment"># Write your MySQL query statement below.</span>
      <span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> Salary <span class="token keyword">FROM</span> Employee <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> Salary <span class="token keyword">DESC</span> <span class="token keyword">LIMIT</span> M<span class="token punctuation">,</span> <span class="token number">1</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">END</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And we can define a procedure like this:</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> <span class="token identifier"><span class="token punctuation">\`</span>getNthHighestSalary<span class="token punctuation">\`</span></span><span class="token punctuation">(</span><span class="token operator">IN</span> N <span class="token keyword">INT</span><span class="token punctuation">,</span> <span class="token keyword">OUT</span> M <span class="token keyword">INT</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>
  <span class="token keyword">SET</span> M <span class="token operator">=</span> N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> Salary <span class="token keyword">INTO</span> M <span class="token keyword">FROM</span> Employee <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> Salary <span class="token keyword">DESC</span> <span class="token keyword">LIMIT</span> M<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">END</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The statement we used to construct the procedure and function like <code>BEGIN</code>, <code>END</code>, <code>DECLARE</code> are called procedural language which is a part of <strong>PSM(persistence stored module)</strong>.</p><p>Here are the basic syntax of the PSM:</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">BEGIN</span> <span class="token punctuation">(</span>ATOMIC<span class="token punctuation">)</span> <span class="token comment">-- start of the block </span>
<span class="token keyword">END</span> <span class="token comment">-- end of the block </span>

<span class="token keyword">DECLARE</span> <span class="token comment">-- declare a variable</span>
<span class="token keyword">SET</span> <span class="token comment">-- assign a value to a variable </span>

<span class="token keyword">CALL</span> <span class="token comment">-- call a procedure</span>

<span class="token keyword">WHILE</span> condition <span class="token keyword">DO</span> 
<span class="token keyword">END</span> <span class="token keyword">WHILE</span> <span class="token comment">-- while loop</span>

<span class="token keyword">REPEAT</span> 
UNTIL condition 
<span class="token keyword">END</span> <span class="token keyword">REPEAT</span> <span class="token comment">-- repeat until loop</span>

<span class="token keyword">FOR</span> a_set <span class="token keyword">AS</span> cursor_name <span class="token keyword">DO</span> 
<span class="token keyword">END</span> <span class="token keyword">FOR</span> <span class="token comment">-- for loop</span>

<span class="token keyword">IF</span> condition <span class="token keyword">THEN</span>
<span class="token keyword">ELSEIF</span> condition <span class="token keyword">THEN</span>
<span class="token keyword">ELSE</span>
<span class="token keyword">END</span> <span class="token keyword">IF</span> <span class="token comment">-- if statement</span>

<span class="token keyword">DECLARE</span> exception_name CONDITION <span class="token keyword">FOR</span> SQLSTATE <span class="token string">&#39;sqlstate_value&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">DECLARE</span> <span class="token keyword">CONTINUE</span> <span class="token keyword">HANDLER</span> <span class="token keyword">FOR</span> exception_name
<span class="token keyword">BEGIN</span>
<span class="token comment">-- code</span>
<span class="token keyword">END</span> <span class="token comment">-- exception handling</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="triggers" tabindex="-1"><a class="header-anchor" href="#triggers"><span>Triggers</span></a></h1><p>There are three parts of the triggers.</p><ul><li>Event</li><li>Condition</li><li>Action</li></ul><p>The trigger is often seen as a <strong>side effect</strong> of the event. The <strong>callback</strong> function is similar to the trigger.</p><p>To define a trigger, we can use the following syntax:</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> trigger_name 
{BEFORE <span class="token operator">|</span> <span class="token keyword">AFTER</span>} {<span class="token keyword">INSERT</span> <span class="token operator">|</span> <span class="token keyword">UPDATE</span> <span class="token operator">|</span> <span class="token keyword">DELETE</span>} <span class="token keyword">ON</span> table_name
<span class="token keyword">FOR EACH ROW</span>
<span class="token keyword">WHEN</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>
    <span class="token comment">-- trigger body</span>
<span class="token keyword">END</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Trigger is often used to maintain the integrity of the database or preprocess the data which is inserted into the database.</p><p>We can disable a trigger by the following syntax:</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table_name <span class="token keyword">DISABLE</span> <span class="token keyword">TRIGGER</span> trigger_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="recursive-query" tabindex="-1"><a class="header-anchor" href="#recursive-query"><span>recursive query</span></a></h1><p>The recursive query is a very useful query in the SQL. It can be used to solve the problem like the <strong>tree</strong> or the <strong>graph</strong>.</p><p>Here is an example of the recursive query:</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">WITH</span> RECURSIVE Subordinates <span class="token keyword">AS</span> <span class="token punctuation">(</span>
    <span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> manager_id<span class="token punctuation">,</span> name
    <span class="token keyword">FROM</span> employees
    <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">UNION</span> <span class="token keyword">ALL</span>
    <span class="token keyword">SELECT</span> e<span class="token punctuation">.</span>id<span class="token punctuation">,</span> e<span class="token punctuation">.</span>manager_id<span class="token punctuation">,</span> e<span class="token punctuation">.</span>name
    <span class="token keyword">FROM</span> employees e
    <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> Subordinates s <span class="token keyword">ON</span> e<span class="token punctuation">.</span>manager_id <span class="token operator">=</span> s<span class="token punctuation">.</span>id
<span class="token punctuation">)</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Subordinates<span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Subordinates</code> is the result we want to get.</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> manager_id<span class="token punctuation">,</span> name
    <span class="token keyword">FROM</span> employees
    <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is the initial part of the recursive query. And we will repeat the second query until the result is empty.</p><p>We will union the result of the second query with the result of the first query. When use the <code>UNION</code> keyword, we will remove the duplicate result. But when we use the <code>UNION ALL</code> keyword, we will keep the duplicate result.</p><p>The key idea of the recurivse query is to calculate the <strong>closure</strong> of the set.</p><h1 id="advanced-aggregation-feature" tabindex="-1"><a class="header-anchor" href="#advanced-aggregation-feature"><span>Advanced Aggregation feature</span></a></h1><p>There are some advanced feature will just list here.</p><h2 id="ranking" tabindex="-1"><a class="header-anchor" href="#ranking"><span>Ranking</span></a></h2><h2 id="windowing" tabindex="-1"><a class="header-anchor" href="#windowing"><span>windowing</span></a></h2><h2 id="privoting" tabindex="-1"><a class="header-anchor" href="#privoting"><span>privoting</span></a></h2><h2 id="rollup-and-cube" tabindex="-1"><a class="header-anchor" href="#rollup-and-cube"><span>rollup and cube</span></a></h2>`,48);function d(c,u){const n=s("Mermaid");return t(),o("div",null,[r,i(n,{id:"mermaid-63",code:"eJyFjz0LwjAQhnd/xdG9QwWXDKJtFRwctDqFDjE92kpMSnoVhfx4Ywp+4OANB/fc+xxcbUXXwCGdgK8lj87VSTJjhVTIqGk1WygjhWpMTyyZTRO/kyoqIY7nkPLctle0sBVa1GjLcOSHPrOuRsqM1iipNdpBxt/TqH2RoEiLgrAg3y6oyUHOX8PofIKg4A3lQLgb0N4drPge+0FRgX/yx67y2MGabzRh+OQBEflfMQ=="}),p])}const m=a(l,[["render",d],["__file","database-4.html.vue"]]),g=JSON.parse(`{"path":"/posts/CS/DB/database-4.html","title":"Advanced SQL:Database Concept(5)","lang":"zh-CN","frontmatter":{"title":"Advanced SQL:Database Concept(5)","tag":["database","SQL"],"category":["database"],"math":true,"mermaid":true,"date":"2023-10-16T00:00:00.000Z","description":"I don't want to learn and talk much about this part, because this part usually has a different support in different database software. So I will just describe what the SQL shoul...","head":[["meta",{"property":"og:url","content":"https://Dnullp.github.io/posts/CS/DB/database-4.html"}],["meta",{"property":"og:site_name","content":"Dnull's Blog"}],["meta",{"property":"og:title","content":"Advanced SQL:Database Concept(5)"}],["meta",{"property":"og:description","content":"I don't want to learn and talk much about this part, because this part usually has a different support in different database software. So I will just describe what the SQL shoul..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Dnull"}],["meta",{"property":"article:tag","content":"database"}],["meta",{"property":"article:tag","content":"SQL"}],["meta",{"property":"article:published_time","content":"2023-10-16T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Advanced SQL:Database Concept(5)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-16T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dnull\\",\\"url\\":\\"https://Dnullp.github.io\\"}]}"]]},"headers":[{"level":2,"title":"Embedded SQL","slug":"embedded-sql","link":"#embedded-sql","children":[]},{"level":2,"title":"Dynamic SQL","slug":"dynamic-sql","link":"#dynamic-sql","children":[]},{"level":2,"title":"Ranking","slug":"ranking","link":"#ranking","children":[]},{"level":2,"title":"windowing","slug":"windowing","link":"#windowing","children":[]},{"level":2,"title":"privoting","slug":"privoting","link":"#privoting","children":[]},{"level":2,"title":"rollup and cube","slug":"rollup-and-cube","link":"#rollup-and-cube","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.79,"words":1137},"filePathRelative":"posts/CS/DB/database-4.md","localizedDate":"2023年10月16日","excerpt":"<p>I don't want to learn and talk much about this part, because this part usually has a different support in different database software.</p>\\n<p>So I will just describe what the SQL should be able to do, and explain some basic principle of it.</p>\\n<h1>Accessing SQL from a Program language</h1>\\n<p>We need to identify the queries or the modification of the database from the program language. Thers are mainly two reasons for it.</p>","autoDesc":true}`);export{m as comp,g as data};
