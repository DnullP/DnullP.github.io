import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as i,e as s,a as n,b as a}from"./app-DCTCPPGQ.js";const l={},o=s(`<h1 id="synchronization-tools" tabindex="-1"><a class="header-anchor" href="#synchronization-tools"><span>Synchronization Tools</span></a></h1><h2 id="the-critical-section-problem" tabindex="-1"><a class="header-anchor" href="#the-critical-section-problem"><span>The Critical-Section Problem</span></a></h2><p>There are four sections in the critical section problem:</p><ul><li>entry section</li><li>critical section</li><li>exit section</li><li>remainder section</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">while</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">{</span>
    entry section
        critical section
    exit section
        remainder section
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Entry section must request for the permission to enter the critical section.</p><p>And a solution for the critical section problem must satisfy the following three requirements:</p>`,7),c=n("ul",null,[n("li",null,[n("p",null,[n("strong",null,"Mutual Exclusion"),a(": If process "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msub",null,[n("mi",null,"P"),n("mi",null,"i")])]),n("annotation",{encoding:"application/x-tex"},"P_i")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"P"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.3117em"}},[n("span",{style:{top:"-2.55em","margin-left":"-0.1389em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathnormal mtight"},"i")])])]),n("span",{class:"vlist-s"},"â€‹")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])])])])]),a(" is executing in its critical section, then no other processes can be executing in their critical sections.")])]),n("li",null,[n("p",null,[n("strong",null,"Progress"),a(": If no process is executing in its critical section and there exist some processes that wish to enter their critical section, then the selection of the processes that will enter the critical section next cannot be postponed indefinitely.")])]),n("li",null,[n("p",null,[n("strong",null,"Bounded Waiting"),a(": A bound must exist on the number of times that other processes are allowed to enter their critical sections after a process has made a request to enter its critical section and before that request is granted.")])])],-1),r=s(`<p>And there are two general approaches to the critical section problem in OS:</p><ul><li>preemptive kernel</li><li>nonpreemptive kernel</li></ul><p>We will discuss the hardware-based solution and the software-based solution in the following sections.</p><h2 id="hardware-solutions" tabindex="-1"><a class="header-anchor" href="#hardware-solutions"><span>Hardware Solutions</span></a></h2><p>We call an operation <strong>atomic</strong> if it&#39;s uninterruptible.</p><p>Hardware usually provides some atomic instructions to solve the critical section problem, such as <code>test_and_set()</code>, <code>compare_and_swap()</code>.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>boolean <span class="token function">test_and_set</span><span class="token punctuation">(</span>boolean <span class="token operator">*</span>target<span class="token punctuation">)</span><span class="token punctuation">{</span>
    boolean rv <span class="token operator">=</span> <span class="token operator">*</span>target<span class="token punctuation">;</span>
    <span class="token operator">*</span>target <span class="token operator">=</span> true<span class="token punctuation">;</span>
    <span class="token keyword">return</span> rv<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>boolean <span class="token function">compare_and_swap</span><span class="token punctuation">(</span>boolean <span class="token operator">*</span>value<span class="token punctuation">,</span> boolean expected<span class="token punctuation">,</span> boolean new<span class="token punctuation">)</span><span class="token punctuation">{</span>
    boolean temp <span class="token operator">=</span> <span class="token operator">*</span>value<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>value <span class="token operator">==</span> expected<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token operator">*</span>value <span class="token operator">=</span> new<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>An simple mutual-exclusion solution using <code>test_and_set()</code>:</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">do</span> <span class="token punctuation">{</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">test_and_set</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// critical section</span>

    lock <span class="token operator">=</span> false<span class="token punctuation">;</span>
    <span class="token comment">// remainder section</span>

<span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Based on the instruction, we can easily implement the <strong>atomic variable</strong>.</p><h2 id="mutex-locks" tabindex="-1"><a class="header-anchor" href="#mutex-locks"><span>Mutex Locks</span></a></h2><p>Software solution is more flexible and can be used in a wider range of applications. <strong>Mutex Lock</strong> is the simplest one.</p><p>We use a lock to represent a resource. When we need to change it, we can aquire the lock, and other threads cannot change it because they can&#39;t get the lock when some other thread is holding it.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">while</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    aquire lock<span class="token operator">:</span>
    <span class="token comment">// critical section</span>

    release lock<span class="token operator">:</span>
    <span class="token comment">// remainder section</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can switch to another thread or just stay for a while and request the lock again when we can&#39;t get the lock. The latter one we call a <strong>spinlock</strong>**.</p><h2 id="semaphores" tabindex="-1"><a class="header-anchor" href="#semaphores"><span>Semaphores</span></a></h2><p>We can consider <strong>semaphores</strong> as a generalization of mutex locks.</p><p>A mutex lock can only be acquired by one thread at a time, but a semaphore can be acquired by multiple threads at the same time.</p><p>The operation corresponding to <code>aquire lock</code> and <code>release lock</code> is <code>wait()</code> and <code>signal()</code>, which are also called <code>P()</code> and <code>V()</code>.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">wait</span><span class="token punctuation">(</span>Semaphore s<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>s <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    s<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">signal</span><span class="token punctuation">(</span>Semaphore s<span class="token punctuation">)</span><span class="token punctuation">{</span>
    s<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A semaphore has a list of the process waiting for it. When the <code>signal()</code> is invoked, one of the process will be waken up and get the semaphore resource.</p><h2 id="monitors" tabindex="-1"><a class="header-anchor" href="#monitors"><span>monitors</span></a></h2><p>This is not a wide used synchronization tool, but java uses it.</p><p>This mechanism provide every object with a lock, and if a method is declared as <code>synchronized</code>, then the lock will be acquired before the method is executed.</p><p>This is a high-level synchronization tool, which can prevent the programmer from making mistakes.</p><h2 id="condition-variables" tabindex="-1"><a class="header-anchor" href="#condition-variables"><span>Condition Variables</span></a></h2><p>Sometimes we need a certain operation to be finished before we run the next operation, but we can&#39;t directly decide the order of the operations across different threads.</p><p><strong>Condition Variable</strong> is designed to solve this problem.</p><p>There is an example:</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>mutex lock<span class="token punctuation">;</span>
boolean condition <span class="token operator">=</span> false<span class="token punctuation">;</span>

thread_1<span class="token operator">:</span>
    <span class="token function">acquire</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span>condition <span class="token operator">==</span> false<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">wait</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// do something</span>

    <span class="token function">release</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>

thread_2<span class="token operator">:</span>
    <span class="token function">acquire</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// do something</span>

    condition <span class="token operator">=</span> true<span class="token punctuation">;</span>

    <span class="token function">signal</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>wait</code> will release the lock and be put on the waiting list for the lock. When the <code>signal</code> is invoked, one of the waiting processes will be woken up and get the lock.</p><p>In java we can use <code>wait()</code> and <code>notify()</code> to achieve the same effect. They are the methods of the <code>Object</code> class, implemented as the monitor.</p><h2 id="channel" tabindex="-1"><a class="header-anchor" href="#channel"><span>channel</span></a></h2><p>This is a high-level synchronization primitive used in golang.</p><div class="language-golang line-numbers-mode" data-ext="golang" data-title="golang"><pre class="language-golang"><code>ch := make(chan int)

thread_1:
    for i := 0; i &lt; 10; i++ {
        ch &lt;- i
    }

thread_2:
    for {
        i := &lt;- ch
        // do something
    }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It&#39;s like a pipe we used for IPC.</p><h1 id="priority-inversion" tabindex="-1"><a class="header-anchor" href="#priority-inversion"><span>Priority Inversion</span></a></h1>`,38),p=n("p",null,[a("There is three threads: "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"H")]),n("annotation",{encoding:"application/x-tex"},"H")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H")])])]),a(", "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"M")]),n("annotation",{encoding:"application/x-tex"},"M")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M")])])]),a(", "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"L")]),n("annotation",{encoding:"application/x-tex"},"L")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord mathnormal"},"L")])])]),a(", and the order of their priority is "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"H"),n("mo",null,">"),n("mi",null,"M"),n("mo",null,">"),n("mi",null,"L")]),n("annotation",{encoding:"application/x-tex"},"H > M > L")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7224em","vertical-align":"-0.0391em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},">"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7224em","vertical-align":"-0.0391em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},">"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord mathnormal"},"L")])])]),a(".")],-1),d=n("p",null,[a("If "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"L")]),n("annotation",{encoding:"application/x-tex"},"L")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord mathnormal"},"L")])])]),a(" is holding a resource that "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"H")]),n("annotation",{encoding:"application/x-tex"},"H")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H")])])]),a(" needs. So "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"H")]),n("annotation",{encoding:"application/x-tex"},"H")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H")])])]),a(" has to be blocked until "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"L")]),n("annotation",{encoding:"application/x-tex"},"L")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord mathnormal"},"L")])])]),a(" releases the resource.")],-1),u=n("p",null,[a("Then thread "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"M")]),n("annotation",{encoding:"application/x-tex"},"M")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M")])])]),a(" is ready. Although it has a lower priority than "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"H")]),n("annotation",{encoding:"application/x-tex"},"H")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H")])])]),a(", but it has a higher priority than "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"L")]),n("annotation",{encoding:"application/x-tex"},"L")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord mathnormal"},"L")])])]),a(". So it will be scheduled to run. And "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"L")]),n("annotation",{encoding:"application/x-tex"},"L")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord mathnormal"},"L")])])]),a(" has to wait for "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"M")]),n("annotation",{encoding:"application/x-tex"},"M")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M")])])]),a(" to finish.")],-1),m=n("p",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"H")]),n("annotation",{encoding:"application/x-tex"},"H")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H")])])]),a(" thus has to wait for "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"M")]),n("annotation",{encoding:"application/x-tex"},"M")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M")])])]),a(" to finish first, then "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"L")]),n("annotation",{encoding:"application/x-tex"},"L")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord mathnormal"},"L")])])]),a(".")],-1),h=n("p",null,[a("It's called "),n("strong",null,"priority inversion"),a(".")],-1),k=n("p",null,[a("This problem can be solved by "),n("strong",null,"priority inheritance"),a(".")],-1),v=[o,c,r,p,d,u,m,h,k];function g(b,w){return t(),i("div",null,v)}const f=e(l,[["render",g],["__file","OSC_4.html.vue"]]),M=JSON.parse(`{"path":"/posts/operating-system/osc/OSC_4.html","title":"process synchronization(OSC_4)","lang":"zh-CN","frontmatter":{"title":"process synchronization(OSC_4)","tag":["OS","deadlock","synchronization"],"category":["OS"],"math":true,"mermaid":true,"date":"2024-02-02T00:00:00.000Z","description":"Synchronization Tools The Critical-Section Problem There are four sections in the critical section problem: entry section critical section exit section remainder section Entry s...","head":[["meta",{"property":"og:url","content":"https://Dnullp.github.io/posts/operating-system/osc/OSC_4.html"}],["meta",{"property":"og:site_name","content":"Dnull's Blog"}],["meta",{"property":"og:title","content":"process synchronization(OSC_4)"}],["meta",{"property":"og:description","content":"Synchronization Tools The Critical-Section Problem There are four sections in the critical section problem: entry section critical section exit section remainder section Entry s..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-14T13:35:40.000Z"}],["meta",{"property":"article:author","content":"Dnull"}],["meta",{"property":"article:tag","content":"OS"}],["meta",{"property":"article:tag","content":"deadlock"}],["meta",{"property":"article:tag","content":"synchronization"}],["meta",{"property":"article:published_time","content":"2024-02-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-14T13:35:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"process synchronization(OSC_4)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-02-02T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-14T13:35:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dnull\\",\\"url\\":\\"https://Dnullp.github.io\\"}]}"]]},"headers":[{"level":2,"title":"The Critical-Section Problem","slug":"the-critical-section-problem","link":"#the-critical-section-problem","children":[]},{"level":2,"title":"Hardware Solutions","slug":"hardware-solutions","link":"#hardware-solutions","children":[]},{"level":2,"title":"Mutex Locks","slug":"mutex-locks","link":"#mutex-locks","children":[]},{"level":2,"title":"Semaphores","slug":"semaphores","link":"#semaphores","children":[]},{"level":2,"title":"monitors","slug":"monitors","link":"#monitors","children":[]},{"level":2,"title":"Condition Variables","slug":"condition-variables","link":"#condition-variables","children":[]},{"level":2,"title":"channel","slug":"channel","link":"#channel","children":[]}],"git":{"createdTime":1712936892000,"updatedTime":1713101740000,"contributors":[{"name":"DnullP","email":"dnull123p@gmail.com","commits":2}]},"readingTime":{"minutes":2.82,"words":845},"filePathRelative":"posts/operating-system/osc/OSC_4.md","localizedDate":"2024å¹´2æœˆ2æ—¥","excerpt":"\\n<h2>The Critical-Section Problem</h2>\\n<p>There are four sections in the critical section problem:</p>\\n<ul>\\n<li>entry section</li>\\n<li>critical section</li>\\n<li>exit section</li>\\n<li>remainder section</li>\\n</ul>\\n<div class=\\"language-c\\" data-ext=\\"c\\" data-title=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token keyword\\">while</span><span class=\\"token punctuation\\">(</span>true<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    entry section\\n        critical section\\n    exit section\\n        remainder section\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}`);export{f as comp,M as data};
