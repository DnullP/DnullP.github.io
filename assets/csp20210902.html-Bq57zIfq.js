import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as p,a as t,e as o}from"./app-DCTCPPGQ.js";const e={},c=t("p",null,"大模拟，非常折磨",-1),l=o(`<p><img src="https://s3.bmp.ovh/imgs/2021/12/5061c8d9ded298a0.png" alt="题目" loading="lazy"><img src="https://s3.bmp.ovh/imgs/2021/12/d5aed082f36906cc.png" alt="题目" loading="lazy"><img src="https://s3.bmp.ovh/imgs/2021/12/159d4f6a5512aa1e.png" alt="题目" loading="lazy"></p><h2 id="思路" tabindex="-1"><a class="header-anchor" href="#思路"><span>思路：</span></a></h2><p>很少打这类复杂的模拟题，直接实现不需要太多思路，但是需要考虑的细节真的很多</p><p>此外，在延迟脉冲的记录上，我代码里使用了<code>map</code>来记录，但是只能拿到66分，如果改用循环数组优化，运气好可以跑到83分</p><p>至于满分确实是没什么思路了，网上的题解也少之又少</p><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码"><span>代码：</span></a></h2><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iomanip&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> next_ <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token comment">/* RAND_MAX assumed to be 32767 */</span>
<span class="token keyword">int</span> <span class="token function">myrand</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    next_ <span class="token operator">=</span> next_ <span class="token operator">*</span> <span class="token number">1103515245</span> <span class="token operator">+</span> <span class="token number">12345</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span><span class="token punctuation">(</span>next_ <span class="token operator">/</span> <span class="token number">65536</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">32768</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token operator">&gt;</span> delays<span class="token punctuation">[</span><span class="token number">2005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">Ne</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">double</span> v<span class="token punctuation">,</span> u<span class="token punctuation">;</span>
    <span class="token keyword">double</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">;</span>
    <span class="token keyword">int</span> times <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">Ne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
    <span class="token function">Ne</span><span class="token punctuation">(</span><span class="token keyword">double</span> in_1<span class="token punctuation">,</span> <span class="token keyword">double</span> in_2<span class="token punctuation">,</span> <span class="token keyword">double</span> in_3<span class="token punctuation">,</span>
       <span class="token keyword">double</span> in_4<span class="token punctuation">,</span> <span class="token keyword">double</span> in_5<span class="token punctuation">,</span> <span class="token keyword">double</span> in_6<span class="token punctuation">)</span>
        <span class="token operator">:</span> <span class="token function">v</span><span class="token punctuation">(</span>in_1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">u</span><span class="token punctuation">(</span>in_2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">a</span><span class="token punctuation">(</span>in_3<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">b</span><span class="token punctuation">(</span>in_4<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">c</span><span class="token punctuation">(</span>in_5<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">d</span><span class="token punctuation">(</span>in_6<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> ne<span class="token punctuation">[</span><span class="token number">2005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> num_ne <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> sp<span class="token punctuation">[</span><span class="token number">2005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">Edge</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> from<span class="token punctuation">,</span> to<span class="token punctuation">;</span>
    <span class="token keyword">double</span> w<span class="token punctuation">;</span>
    <span class="token keyword">int</span> D<span class="token punctuation">;</span>
    <span class="token keyword">int</span> next<span class="token punctuation">;</span>
<span class="token punctuation">}</span> ed<span class="token punctuation">[</span><span class="token number">2005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> head<span class="token punctuation">[</span><span class="token number">2005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> ed_num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> f<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">,</span> <span class="token keyword">double</span> w<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    ed<span class="token punctuation">[</span><span class="token operator">++</span>ed_num<span class="token punctuation">]</span><span class="token punctuation">.</span>from <span class="token operator">=</span> f<span class="token punctuation">;</span>
    ed<span class="token punctuation">[</span>ed_num<span class="token punctuation">]</span><span class="token punctuation">.</span>to <span class="token operator">=</span> t<span class="token punctuation">;</span>
    ed<span class="token punctuation">[</span>ed_num<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">=</span> w<span class="token punctuation">;</span>
    ed<span class="token punctuation">[</span>ed_num<span class="token punctuation">]</span><span class="token punctuation">.</span>D <span class="token operator">=</span> d<span class="token punctuation">;</span>
    ed<span class="token punctuation">[</span>ed_num<span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">;</span>
    head<span class="token punctuation">[</span>f<span class="token punctuation">]</span> <span class="token operator">=</span> ed_num<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">double</span> ans_1_max <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ans_1_min <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> ans_2_max <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ans_2_min <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> N<span class="token punctuation">,</span> S<span class="token punctuation">,</span> P<span class="token punctuation">,</span> T<span class="token punctuation">;</span>
<span class="token keyword">double</span> D_t<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cin <span class="token operator">&gt;&gt;</span> N <span class="token operator">&gt;&gt;</span> S <span class="token operator">&gt;&gt;</span> P <span class="token operator">&gt;&gt;</span> T<span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> D_t<span class="token punctuation">;</span>

    <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> N<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> input<span class="token punctuation">;</span>
        <span class="token keyword">double</span> v<span class="token punctuation">,</span> u<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> input <span class="token operator">&gt;&gt;</span> v <span class="token operator">&gt;&gt;</span> u <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b <span class="token operator">&gt;&gt;</span> c <span class="token operator">&gt;&gt;</span> d<span class="token punctuation">;</span>
        temp <span class="token operator">+=</span> input<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>input<span class="token operator">--</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            ne<span class="token punctuation">[</span><span class="token operator">++</span>num_ne<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Ne</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> P<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cin <span class="token operator">&gt;&gt;</span> sp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> S<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> s<span class="token punctuation">,</span> t<span class="token punctuation">,</span> d<span class="token punctuation">;</span>
        <span class="token keyword">double</span> w<span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> s <span class="token operator">&gt;&gt;</span> t <span class="token operator">&gt;&gt;</span> w <span class="token operator">&gt;&gt;</span> d<span class="token punctuation">;</span>
        <span class="token function">add</span><span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> w<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">spread</span><span class="token punctuation">(</span><span class="token keyword">int</span> times_k<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> P<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> myrand_ <span class="token operator">=</span> <span class="token function">myrand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>sp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> myrand_<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> p <span class="token operator">=</span> head<span class="token punctuation">[</span>i <span class="token operator">+</span> N<span class="token punctuation">]</span><span class="token punctuation">;</span> p<span class="token punctuation">;</span> p <span class="token operator">=</span> ed<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">int</span> y <span class="token operator">=</span> ed<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">;</span>
                <span class="token punctuation">(</span>delays<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span>times_k <span class="token operator">+</span> ed<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>D<span class="token punctuation">]</span> <span class="token operator">+=</span> ed<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> p <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">double</span> up <span class="token operator">=</span> ne<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>u<span class="token punctuation">,</span> vp <span class="token operator">=</span> ne<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>
        ne<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">=</span> vp <span class="token operator">+</span> D_t <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.04</span> <span class="token operator">*</span> vp <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">*</span> vp <span class="token operator">+</span> <span class="token number">140</span> <span class="token operator">-</span> up<span class="token punctuation">)</span> <span class="token operator">+</span> delays<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>times_k<span class="token punctuation">]</span><span class="token punctuation">;</span>
        ne<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>u <span class="token operator">=</span> up <span class="token operator">+</span> D_t <span class="token operator">*</span> ne<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>a <span class="token operator">*</span> <span class="token punctuation">(</span>ne<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>b <span class="token operator">*</span> vp <span class="token operator">-</span> up<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">(</span>delays<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span>times_k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>ne<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">&gt;=</span> <span class="token number">30</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            ne<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">=</span> ne<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">;</span>
            ne<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>u <span class="token operator">=</span> ne<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>u <span class="token operator">+</span> ne<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">;</span>
            ne<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>times<span class="token operator">++</span><span class="token punctuation">;</span>

            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> head<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token punctuation">;</span> j <span class="token operator">=</span> ed<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">int</span> y <span class="token operator">=</span> ed<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">;</span>
                <span class="token punctuation">(</span>delays<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span>times_k <span class="token operator">+</span> ed<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>D<span class="token punctuation">]</span> <span class="token operator">+=</span> ed<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> T<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">spread</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        ans_1_max <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans_1_max<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ans_1_min <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ans_1_min<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ans_2_max <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans_2_max<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>times<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ans_2_min <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ans_2_min<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>times<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token function">setiosflags</span><span class="token punctuation">(</span>ios<span class="token double-colon punctuation">::</span>fixed<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token function">setprecision</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> ans_1_min <span class="token operator">&lt;&lt;</span> <span class="token char">&#39; &#39;</span> <span class="token operator">&lt;&lt;</span> ans_1_max <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> ans_2_min <span class="token operator">&lt;&lt;</span> <span class="token char">&#39; &#39;</span> <span class="token operator">&lt;&lt;</span> ans_2_max<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7);function i(u,k){return s(),a("div",null,[c,p(" more -"),l])}const v=n(e,[["render",i],["__file","csp20210902.html.vue"]]),m=JSON.parse(`{"path":"/posts/algorithm/oi/quiz/csp20210902.html","title":"CSP_20210903","lang":"zh-CN","frontmatter":{"date":"2021-01-01T00:00:00.000Z","title":"CSP_20210903","tag":["线性","差分"],"categories":["OI练习"],"mathjax":true,"description":"大模拟，非常折磨 题目 题目 题目 思路： 很少打这类复杂的模拟题，直接实现不需要太多思路，但是需要考虑的细节真的很多 此外，在延迟脉冲的记录上，我代码里使用了map来记录，但是只能拿到66分，如果改用循环数组优化，运气好可以跑到83分 至于满分确实是没什么思路了，网上的题解也少之又少 代码： ","head":[["meta",{"property":"og:url","content":"https://Dnullp.github.io/posts/algorithm/oi/quiz/csp20210902.html"}],["meta",{"property":"og:site_name","content":"Dnull's Blog"}],["meta",{"property":"og:title","content":"CSP_20210903"}],["meta",{"property":"og:description","content":"大模拟，非常折磨 题目 题目 题目 思路： 很少打这类复杂的模拟题，直接实现不需要太多思路，但是需要考虑的细节真的很多 此外，在延迟脉冲的记录上，我代码里使用了map来记录，但是只能拿到66分，如果改用循环数组优化，运气好可以跑到83分 至于满分确实是没什么思路了，网上的题解也少之又少 代码： "}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://s3.bmp.ovh/imgs/2021/12/5061c8d9ded298a0.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-14T13:35:40.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"CSP_20210903"}],["meta",{"property":"article:author","content":"Dnull"}],["meta",{"property":"article:tag","content":"线性"}],["meta",{"property":"article:tag","content":"差分"}],["meta",{"property":"article:published_time","content":"2021-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-14T13:35:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CSP_20210903\\",\\"image\\":[\\"https://s3.bmp.ovh/imgs/2021/12/5061c8d9ded298a0.png\\",\\"https://s3.bmp.ovh/imgs/2021/12/d5aed082f36906cc.png\\",\\"https://s3.bmp.ovh/imgs/2021/12/159d4f6a5512aa1e.png\\"],\\"datePublished\\":\\"2021-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-14T13:35:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dnull\\",\\"url\\":\\"https://Dnullp.github.io\\"}]}"]]},"headers":[{"level":2,"title":"思路：","slug":"思路","link":"#思路","children":[]},{"level":2,"title":"代码：","slug":"代码","link":"#代码","children":[]}],"git":{"createdTime":1712936892000,"updatedTime":1713101740000,"contributors":[{"name":"DnullP","email":"dnull123p@gmail.com","commits":2}]},"readingTime":{"minutes":1.96,"words":588},"filePathRelative":"posts/algorithm/oi/quiz/csp20210902.md","localizedDate":"2021年1月1日","excerpt":"<p>大模拟，非常折磨</p>\\n<!-- more --->\\n<p><img src=\\"https://s3.bmp.ovh/imgs/2021/12/5061c8d9ded298a0.png\\" alt=\\"题目\\" loading=\\"lazy\\">\\n<img src=\\"https://s3.bmp.ovh/imgs/2021/12/d5aed082f36906cc.png\\" alt=\\"题目\\" loading=\\"lazy\\">\\n<img src=\\"https://s3.bmp.ovh/imgs/2021/12/159d4f6a5512aa1e.png\\" alt=\\"题目\\" loading=\\"lazy\\"></p>","autoDesc":true}`);export{v as comp,m as data};
