import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,o as r,c as s,d as l,e as t,a as e}from"./app-DCTCPPGQ.js";const o={},c=t('<h1 id="数据库的作用" tabindex="-1"><a class="header-anchor" href="#数据库的作用"><span>数据库的作用</span></a></h1><p>早些时候我们使用文件来储存和操作数据, 但是对于大量的数据和操作并不理想, 针对其中缺陷, 我们可以映射出数据库需要提供的功能.</p><ul><li>解决数据冗余和一致性问题</li><li>访问数据的困难</li><li>数据隔离</li><li>完整性问题</li><li>原子性问题</li><li>并发访问问题</li></ul><h1 id="数据视图" tabindex="-1"><a class="header-anchor" href="#数据视图"><span>数据视图</span></a></h1><p>数据视图可以看作对于数据的抽象</p><p>首先我们明确一下抽象(abstraction)的定义:</p><blockquote><p>抽象是对于事物属性中, 我们感兴趣的那一部分共有属性的提取, 使我们可以只专注于感兴趣的特定部分</p></blockquote><p>于是数据视图是根据用户感兴趣的程度, 提供不同的数据, 进行整理修改后提供的特定呈现模式</p><h2 id="数据模型" tabindex="-1"><a class="header-anchor" href="#数据模型"><span>数据模型</span></a></h2><ul><li>Relational Model(关系模型)</li><li>Entity-Relationship Model(实体-联系模型)</li><li>Semi-structured Model(半结构化模型)</li><li>Object-oriented Model(面向对象模型)</li></ul><h2 id="数据抽象" tabindex="-1"><a class="header-anchor" href="#数据抽象"><span>数据抽象</span></a></h2><p>这一部分是更纯粹的数据抽象, 我们从不同的level来关注数据:</p><ul><li>logical level</li><li>phyiscal level</li></ul><h1 id="database-design" tabindex="-1"><a class="header-anchor" href="#database-design"><span>Database Design</span></a></h1><p>数据库的设计我们一般认为是数据库的schema的设计</p><p>schema可以看作对于需求的数据库概念实现, 通过实例化schema来让业务的数据需求再数据库中实现</p><p>我们可以将设计过程概括为下图:</p>',17),p=e("h1",{id:"数据库系统",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#数据库系统"},[e("span",null,"数据库系统")])],-1),d=e("p",null,"数据库系统包含三个主要组件:",-1),h=e("ul",null,[e("li",null,"storage manager"),e("li",null,"query processor"),e("li",null,"transaction manager")],-1),m=e("h2",{id:"storage-manager",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#storage-manager"},[e("span",null,"storage manager")])],-1),u=e("p",null,"具体职责如下:",-1),g=t('<ul><li><p>Authorization: 对用户的权限进行验证, 保证用户只能访问其有权限的数据. 要知道, 用户数据大多数时候也是以数据形式储存在数据库中的, 所以交由storage management来验证用户权限是说得通的</p></li><li><p>integrity management: 保证数据的完整性, 这主要是要求对数据的修改必须满足数据的约束(constraint), 不破坏schema</p></li><li><p>transaction management: 保证事务的原子性, 一致性, 隔离性, 持久性</p></li><li><p>file management: 数据本身是要持久化到文件中的, 所以需要对文件进行管理, 包括文件的创建, 删除, 修改, 读取等</p></li><li><p>buffer management: 与数据的交互中间需要经过一层内存, 用于数据交互的缓存</p></li><li><p>indices: 索引, 对数据建立索引加快了对数据的查询, 具体建立索引的方式涉及到底层的数据结构, 不在此展开</p></li></ul><h2 id="query-processor" tabindex="-1"><a class="header-anchor" href="#query-processor"><span>query processor</span></a></h2><p>查询处理主要是转化用户的指令, 让storage manager能够理解并执行相应的底层操作</p><ul><li>DDL: 数据定义语言, 用于定义schema</li><li>DML: 数据操作语言, 用于对数据进行操作</li><li>Query evaluation engine: 查询执行引擎, 用于执行查询语句</li></ul><h2 id="transaction-manager" tabindex="-1"><a class="header-anchor" href="#transaction-manager"><span>transaction manager</span></a></h2><p>管理事务</p><h3 id="acid" tabindex="-1"><a class="header-anchor" href="#acid"><span>ACID</span></a></h3><ul><li>Atomicity: 原子性, 事务要么全部执行, 要么全部不执行</li><li>Consistency: 一致性, 事务执行前后, 数据库的状态要保持一致</li><li>Isolation: 隔离性, 事务之间互不干扰</li><li>Durability: 持久性, 事务执行后, 数据库的状态要持久化</li></ul><h1 id="数据库系统的架构" tabindex="-1"><a class="header-anchor" href="#数据库系统的架构"><span>数据库系统的架构</span></a></h1><h2 id="数据库系统自身架构" tabindex="-1"><a class="header-anchor" href="#数据库系统自身架构"><span>数据库系统自身架构</span></a></h2>',10),b=t('<p>自身架构的基本逻辑是, 不同的用户通过不同的工具接入查询处理层, 在这个层将不同形式的查询和操作统一翻译为数据库能够理解的语言, 交由storage manager进行处理, 最后将数据持久化到设备中</p><h2 id="数据库使用架构" tabindex="-1"><a class="header-anchor" href="#数据库使用架构"><span>数据库使用架构</span></a></h2><p>使用场景的架构大致分为两类:</p><ul><li>双层架构</li><li>三层架构</li></ul><h3 id="双层架构" tabindex="-1"><a class="header-anchor" href="#双层架构"><span>双层架构</span></a></h3><p>双层架构场景比较简单, 只有数据库和数据库使用者, 主要是直接提供数据库服务, 一般是2b服务</p><h3 id="三层架构" tabindex="-1"><a class="header-anchor" href="#三层架构"><span>三层架构</span></a></h3><p>三层架构是在用户和数据库之间提供一个业务层, 也是当下互联网的一个基本架构逻辑</p>',8);function f(y,x){const a=n("Mermaid");return r(),s("div",null,[c,l(a,{id:"mermaid-110",code:"eJxlTz1PwzAQ3fMrrO4Z+JiR0jZMIKR2NFXlOldilDjBsYUQRaoQC6rYGFEFW1mQGAEh/gx11X9R23GHqDfdvXt3771xVlzTlAiJTnoBMlWp0YUgZYoi3CWSoLxIIBu4la2ECaCSFXzLtxUN93APMmJxkqHT5kk03Mcxl0zehFtSlbJyl3aA+5CzsJJCUakEJLuUQ3w2ujQGwkIw4LJJAZ4Ermlj5xrRglMo5aBGIxSGR5P19FHP3vXibTmfTVC7XjVSOaSLW8eKO8wkOudIwJUyrNyo2rFfAmVjRl2cllfoYK+ozE1FU8iJ38S3+vVLP32sX6b68/7/92/1vLBvPF/PH5Y/3/XFnc9g3aK4NuP7+pUbOsEGmW6PSA=="}),p,d,h,m,u,l(a,{id:"mermaid-140",code:"eJx1kE2OwjAMhfc+RS7AYjoz25FaWDKb2UbVyC1uG6lNkO0IwelJCggqwFJ+pO+9OM/dGA7tgKxm+wdQ2s3vtoa17dxIRo6iNNUAEpuecT+YyooGxp7MhD4dXINJNW930f+HZZJ9ENeMTo8XTa5EEiujDoHdCdUFv4SFdV6p5+S6dpjI61LzaZXRC7bZ/lb1dYnwDn/bJnYd8ZOA/O5lpMJuUNGIcmw1Mj0+V6RQM80tZUmuvp2bv4u8mEaRwjif2M2Vu+cFpVmtfkwFUM2XNZwBTfV9fQ=="}),g,l(a,{id:"mermaid-233",code:"eJxtVMtSrDAQ3fsV+YFZCIzLW+XI3Xl311XKsjIQmCgkmIDWWH68Jy8ISBYzdPfpzjndDU2nPqsL0yP5f7ohOGY6t5oNF1LSJ8P1s3PaU77cUslG8cHJtAlklA1DJypElSSDVqjQ92tMTo0aLsKMFsbrXzUKWrORnZnhhNW9kEBqNqqA4bK+cQ9gQQ6HP99I/yZ/QSm9WciR64ZV3PgsMHPgTy1GB18T/Q3P09o5fZ+4vpJRqW5GFCmioJEqd1xNxDow2FkwuX85BtuxgZ0H210HOwu2Kw771heYR3EfmKCzIGtiU+ypheaVUxPmZw8q0LJ89AIHzfG7ZOA6Wv57JLakiNJ9IKeV6gfRcU2YrEkn5Ns6s3CZK5DSLZPia4077i0EUedXcEV6zVPwXVDHP1g3+QwuWyEBSkmH3hSpc93Ate+YAo87wOi7S4FxBIlzvYCb0ZyoweBZy0nPJP6SNpzsdk7jRWnx5WXZftmZtNjH615CRrH00jA/0R1ATht0fi9S0PPUNBjKKrahDV1OH6htbN+YxfYrutih7bPuB1oL80aC+IXIA0TbFzn1ZFTIWsyvmXfmDob9dVqZvqbBAl1Fy9zHoiNLPciJUkAR1A72wo2dRYCdZQqIdgD4YVtHFBvtIBZdmgE//JRhGQ=="}),b])}const v=i(o,[["render",f],["__file","database-1.html.vue"]]),J=JSON.parse(`{"path":"/posts/CS/DB/database-1.html","title":"数据库原理(一)总览","lang":"zh-CN","frontmatter":{"title":"数据库原理(一)总览","tag":["数据库","mysql"],"categories":["数据库原理"],"math":true,"mermaid":true,"date":"2023-09-20T00:00:00.000Z","description":"数据库的作用 早些时候我们使用文件来储存和操作数据, 但是对于大量的数据和操作并不理想, 针对其中缺陷, 我们可以映射出数据库需要提供的功能. 解决数据冗余和一致性问题 访问数据的困难 数据隔离 完整性问题 原子性问题 并发访问问题 数据视图 数据视图可以看作对于数据的抽象 首先我们明确一下抽象(abstraction)的定义: 抽象是对于事物属性中,...","head":[["meta",{"property":"og:url","content":"https://Dnullp.github.io/posts/CS/DB/database-1.html"}],["meta",{"property":"og:site_name","content":"Dnull's Blog"}],["meta",{"property":"og:title","content":"数据库原理(一)总览"}],["meta",{"property":"og:description","content":"数据库的作用 早些时候我们使用文件来储存和操作数据, 但是对于大量的数据和操作并不理想, 针对其中缺陷, 我们可以映射出数据库需要提供的功能. 解决数据冗余和一致性问题 访问数据的困难 数据隔离 完整性问题 原子性问题 并发访问问题 数据视图 数据视图可以看作对于数据的抽象 首先我们明确一下抽象(abstraction)的定义: 抽象是对于事物属性中,..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Dnull"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:tag","content":"mysql"}],["meta",{"property":"article:published_time","content":"2023-09-20T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据库原理(一)总览\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-20T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dnull\\",\\"url\\":\\"https://Dnullp.github.io\\"}]}"]]},"headers":[{"level":2,"title":"数据模型","slug":"数据模型","link":"#数据模型","children":[]},{"level":2,"title":"数据抽象","slug":"数据抽象","link":"#数据抽象","children":[]},{"level":2,"title":"storage manager","slug":"storage-manager","link":"#storage-manager","children":[]},{"level":2,"title":"query processor","slug":"query-processor","link":"#query-processor","children":[]},{"level":2,"title":"transaction manager","slug":"transaction-manager","link":"#transaction-manager","children":[{"level":3,"title":"ACID","slug":"acid","link":"#acid","children":[]}]},{"level":2,"title":"数据库系统自身架构","slug":"数据库系统自身架构","link":"#数据库系统自身架构","children":[]},{"level":2,"title":"数据库使用架构","slug":"数据库使用架构","link":"#数据库使用架构","children":[{"level":3,"title":"双层架构","slug":"双层架构","link":"#双层架构","children":[]},{"level":3,"title":"三层架构","slug":"三层架构","link":"#三层架构","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":4.29,"words":1286},"filePathRelative":"posts/CS/DB/database-1.md","localizedDate":"2023年9月20日","excerpt":"\\n<p>早些时候我们使用文件来储存和操作数据, 但是对于大量的数据和操作并不理想, 针对其中缺陷, 我们可以映射出数据库需要提供的功能.</p>\\n<ul>\\n<li>解决数据冗余和一致性问题</li>\\n<li>访问数据的困难</li>\\n<li>数据隔离</li>\\n<li>完整性问题</li>\\n<li>原子性问题</li>\\n<li>并发访问问题</li>\\n</ul>\\n<h1>数据视图</h1>\\n<p>数据视图可以看作对于数据的抽象</p>\\n<p>首先我们明确一下抽象(abstraction)的定义:</p>\\n<blockquote>\\n<p>抽象是对于事物属性中, 我们感兴趣的那一部分共有属性的提取, 使我们可以只专注于感兴趣的特定部分</p>\\n</blockquote>","autoDesc":true}`);export{v as comp,J as data};
