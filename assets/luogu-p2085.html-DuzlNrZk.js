import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o,c as e,a as n,b as s,d as c,w as l,e as u}from"./app-DCTCPPGQ.js";const i={},k=n("p",null,"简单的堆应用，把函数写成结构，以记录函数的第n小值，全部加入堆中，每次弹出最小函数把n+1，再次加入堆",-1),r=n("strong",null,"代码如下：",-1),d=n("br",null,null,-1),m=u(`<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">func</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> C<span class="token punctuation">;</span>
    <span class="token keyword">int</span> val<span class="token punctuation">;</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>

    <span class="token keyword">int</span> <span class="token function">min_</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">(</span>B <span class="token operator">*</span> <span class="token number">1.00</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.00</span> <span class="token operator">*</span> A<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            mid <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            mid <span class="token operator">+=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> A <span class="token operator">*</span> mid <span class="token operator">*</span> mid <span class="token operator">+</span> B <span class="token operator">*</span> mid <span class="token operator">+</span> C<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">int</span> x_1 <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> x_2 <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">x_2</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">(</span>A <span class="token operator">*</span> x_1 <span class="token operator">*</span> x_1 <span class="token operator">+</span> B <span class="token operator">*</span> x_1 <span class="token operator">+</span> C<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> ans<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span>
            ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">(</span>A <span class="token operator">*</span> x_1 <span class="token operator">*</span> x_1 <span class="token operator">+</span> B <span class="token operator">*</span> x_1 <span class="token operator">+</span> C<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>A <span class="token operator">*</span> x_2 <span class="token operator">*</span> x_2 <span class="token operator">+</span> B <span class="token operator">*</span> x_2 <span class="token operator">+</span> C<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">(</span>A <span class="token operator">*</span> x_1 <span class="token operator">*</span> x_1 <span class="token operator">+</span> B <span class="token operator">*</span> x_1 <span class="token operator">+</span> C<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>A <span class="token operator">*</span> x_2 <span class="token operator">*</span> x_2 <span class="token operator">+</span> B <span class="token operator">*</span> x_2 <span class="token operator">+</span> C<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> n_<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        A <span class="token operator">=</span> a<span class="token punctuation">;</span>
        B <span class="token operator">=</span> b<span class="token punctuation">;</span>
        C <span class="token operator">=</span> c<span class="token punctuation">;</span>
        n <span class="token operator">=</span> n_<span class="token punctuation">;</span>
        val <span class="token operator">=</span> <span class="token function">min_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>func a<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> val <span class="token operator">&gt;</span> a<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>

    heap<span class="token operator">&lt;</span>func<span class="token operator">&gt;</span> <span class="token function">My_heap</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> C<span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> A <span class="token operator">&gt;&gt;</span> B <span class="token operator">&gt;&gt;</span> C<span class="token punctuation">;</span>

        My_heap<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">func</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> C<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> My_heap<span class="token punctuation">.</span><span class="token function">GetTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>val <span class="token operator">&lt;&lt;</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">;</span>

        func temp <span class="token operator">=</span> My_heap<span class="token punctuation">.</span><span class="token function">GetTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        My_heap<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        temp<span class="token punctuation">.</span>n<span class="token operator">++</span><span class="token punctuation">;</span>
        temp<span class="token punctuation">.</span>val <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">min_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        My_heap<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function v(b,y){const a=t("RouteLink");return o(),e("div",null,[k,n("p",null,[r,d,s(" 其中的堆是手写的模板，为了算法部分便于观看，删去了堆的实现部分的代码，具体可以查看 "),c(a,{to:"/posts/algorithm/oi/learning-note/HandWrittenHeap.html"},{default:l(()=>[s("堆模板")]),_:1}),s(")")]),m])}const f=p(i,[["render",v],["__file","luogu-p2085.html.vue"]]),w=JSON.parse(`{"path":"/posts/algorithm/oi/quiz/luogu-p2085.html","title":"Luogu_P2085","lang":"zh-CN","frontmatter":{"date":"2021-01-01T00:00:00.000Z","title":"Luogu_P2085","tag":["二叉堆"],"categories":["OI练习"],"mathjax":true,"description":"简单的堆应用，把函数写成结构，以记录函数的第n小值，全部加入堆中，每次弹出最小函数把n+1，再次加入堆 代码如下： 其中的堆是手写的模板，为了算法部分便于观看，删去了堆的实现部分的代码，具体可以查看 ) ","head":[["meta",{"property":"og:url","content":"https://Dnullp.github.io/posts/algorithm/oi/quiz/luogu-p2085.html"}],["meta",{"property":"og:site_name","content":"Dnull's Blog"}],["meta",{"property":"og:title","content":"Luogu_P2085"}],["meta",{"property":"og:description","content":"简单的堆应用，把函数写成结构，以记录函数的第n小值，全部加入堆中，每次弹出最小函数把n+1，再次加入堆 代码如下： 其中的堆是手写的模板，为了算法部分便于观看，删去了堆的实现部分的代码，具体可以查看 ) "}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-14T13:35:40.000Z"}],["meta",{"property":"article:author","content":"Dnull"}],["meta",{"property":"article:tag","content":"二叉堆"}],["meta",{"property":"article:published_time","content":"2021-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-14T13:35:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Luogu_P2085\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-14T13:35:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dnull\\",\\"url\\":\\"https://Dnullp.github.io\\"}]}"]]},"headers":[],"git":{"createdTime":1712936892000,"updatedTime":1713101740000,"contributors":[{"name":"DnullP","email":"dnull123p@gmail.com","commits":2}]},"readingTime":{"minutes":0.97,"words":290},"filePathRelative":"posts/algorithm/oi/quiz/luogu-p2085.md","localizedDate":"2021年1月1日","excerpt":"<p>简单的堆应用，把函数写成结构，以记录函数的第n小值，全部加入堆中，每次弹出最小函数把n+1，再次加入堆</p>\\n<p><strong>代码如下：</strong><br>\\n其中的堆是手写的模板，为了算法部分便于观看，删去了堆的实现部分的代码，具体可以查看\\n<a href=\\"/posts/algorithm/oi/learning-note/HandWrittenHeap.html\\" target=\\"_blank\\">堆模板</a>)</p>\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;cstdio&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;cmath&gt;</span></span>\\n\\n<span class=\\"token keyword\\">using</span> <span class=\\"token keyword\\">namespace</span> std<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">func</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> A<span class=\\"token punctuation\\">,</span> B<span class=\\"token punctuation\\">,</span> C<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">int</span> val<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">int</span> n<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">min_</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">int</span> mid <span class=\\"token operator\\">=</span> <span class=\\"token function\\">round</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>B <span class=\\"token operator\\">*</span> <span class=\\"token number\\">1.00</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">/</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">-</span><span class=\\"token number\\">2.00</span> <span class=\\"token operator\\">*</span> A<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>mid<span class=\\"token operator\\">&lt;</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n            mid <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n            mid <span class=\\"token operator\\">+=</span> n<span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">return</span> A <span class=\\"token operator\\">*</span> mid <span class=\\"token operator\\">*</span> mid <span class=\\"token operator\\">+</span> B <span class=\\"token operator\\">*</span> mid <span class=\\"token operator\\">+</span> C<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token keyword\\">int</span> x_1 <span class=\\"token operator\\">=</span> mid <span class=\\"token operator\\">+</span> <span class=\\"token punctuation\\">(</span>n <span class=\\"token operator\\">/</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span> x_2 <span class=\\"token operator\\">=</span> mid <span class=\\"token operator\\">-</span> <span class=\\"token punctuation\\">(</span>n <span class=\\"token operator\\">/</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span><span class=\\"token generic-function\\"><span class=\\"token function\\">x_2</span><span class=\\"token generic class-name\\"><span class=\\"token operator\\">&lt;</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">(</span>A <span class=\\"token operator\\">*</span> x_1 <span class=\\"token operator\\">*</span> x_1 <span class=\\"token operator\\">+</span> B <span class=\\"token operator\\">*</span> x_1 <span class=\\"token operator\\">+</span> C<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token keyword\\">int</span> ans<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>n <span class=\\"token operator\\">&amp;</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span>\\n            ans <span class=\\"token operator\\">=</span> <span class=\\"token function\\">max</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>A <span class=\\"token operator\\">*</span> x_1 <span class=\\"token operator\\">*</span> x_1 <span class=\\"token operator\\">+</span> B <span class=\\"token operator\\">*</span> x_1 <span class=\\"token operator\\">+</span> C<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span>A <span class=\\"token operator\\">*</span> x_2 <span class=\\"token operator\\">*</span> x_2 <span class=\\"token operator\\">+</span> B <span class=\\"token operator\\">*</span> x_2 <span class=\\"token operator\\">+</span> C<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">else</span>\\n        <span class=\\"token punctuation\\">{</span>\\n            ans <span class=\\"token operator\\">=</span> <span class=\\"token function\\">min</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>A <span class=\\"token operator\\">*</span> x_1 <span class=\\"token operator\\">*</span> x_1 <span class=\\"token operator\\">+</span> B <span class=\\"token operator\\">*</span> x_1 <span class=\\"token operator\\">+</span> C<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span>A <span class=\\"token operator\\">*</span> x_2 <span class=\\"token operator\\">*</span> x_2 <span class=\\"token operator\\">+</span> B <span class=\\"token operator\\">*</span> x_2 <span class=\\"token operator\\">+</span> C<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">return</span> ans<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token function\\">func</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> a<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> b<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> c<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> n_<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        A <span class=\\"token operator\\">=</span> a<span class=\\"token punctuation\\">;</span>\\n        B <span class=\\"token operator\\">=</span> b<span class=\\"token punctuation\\">;</span>\\n        C <span class=\\"token operator\\">=</span> c<span class=\\"token punctuation\\">;</span>\\n        n <span class=\\"token operator\\">=</span> n_<span class=\\"token punctuation\\">;</span>\\n        val <span class=\\"token operator\\">=</span> <span class=\\"token function\\">min_</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token function\\">func</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">bool</span> <span class=\\"token keyword\\">operator</span><span class=\\"token operator\\">&gt;</span></span></span><span class=\\"token punctuation\\">(</span>func a<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> val <span class=\\"token operator\\">&gt;</span> a<span class=\\"token punctuation\\">.</span>val<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> n<span class=\\"token punctuation\\">,</span> m<span class=\\"token punctuation\\">;</span>\\n    cin <span class=\\"token operator\\">&gt;&gt;</span> n <span class=\\"token operator\\">&gt;&gt;</span> m<span class=\\"token punctuation\\">;</span>\\n\\n    heap<span class=\\"token operator\\">&lt;</span>func<span class=\\"token operator\\">&gt;</span> <span class=\\"token function\\">My_heap</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> n<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">int</span> A<span class=\\"token punctuation\\">,</span> B<span class=\\"token punctuation\\">,</span> C<span class=\\"token punctuation\\">;</span>\\n        cin <span class=\\"token operator\\">&gt;&gt;</span> A <span class=\\"token operator\\">&gt;&gt;</span> B <span class=\\"token operator\\">&gt;&gt;</span> C<span class=\\"token punctuation\\">;</span>\\n\\n        My_heap<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">insert</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">func</span><span class=\\"token punctuation\\">(</span>A<span class=\\"token punctuation\\">,</span> B<span class=\\"token punctuation\\">,</span> C<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> m<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        cout <span class=\\"token operator\\">&lt;&lt;</span> My_heap<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetTop</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>val <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token char\\">' '</span><span class=\\"token punctuation\\">;</span>\\n\\n        func temp <span class=\\"token operator\\">=</span> My_heap<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetTop</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        My_heap<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">extract</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        temp<span class=\\"token punctuation\\">.</span>n<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n        temp<span class=\\"token punctuation\\">.</span>val <span class=\\"token operator\\">=</span> temp<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">min_</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        My_heap<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">insert</span><span class=\\"token punctuation\\">(</span>temp<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}`);export{f as comp,w as data};
