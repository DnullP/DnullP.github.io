import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-DCTCPPGQ.js";const e={},p=t(`<p>这一部分记录了关于thrift的一些实践, 主要为使用golang完成官方的tutorial实践</p><hr><h1 id="环境" tabindex="-1"><a class="header-anchor" href="#环境"><span>环境</span></a></h1><ul><li>windows 10</li><li>golang 1.20.7</li><li>thrift 1.18</li></ul><p>本来是打算用C++来做实验的, 但是在windows平台上使用C++的thrift库有些麻烦, 需要自行编译其依赖库, 并且依赖库的编译又依赖于第三方的C++库, 这些会在后面有机会再尝试, 这里采用开发较为简单的golang来尝试</p><h1 id="thrift简介" tabindex="-1"><a class="header-anchor" href="#thrift简介"><span>thrift简介</span></a></h1><p>thrift本身是一个用于定义RPC接口IDL框架, 分为两部分:</p><ul><li>thrift编译器: 用于将thrift定义的IDL文件编译成各种语言的RPC接口代码</li><li>thrift依赖库: 各个语言有各自的thrift依赖, 用于上述编译结果的文件</li></ul><p>thrift编译器本身只要下载安装使用就行, 依赖库根据不同语言进行安装即可, 我们的工作主要是编写用于生成接口的thrift文件, 并在各自的语言中实现其接口</p><h1 id="thrift语法" tabindex="-1"><a class="header-anchor" href="#thrift语法"><span>thrift语法</span></a></h1><p>官方给出了标准语法的巴科斯范式以及tutorial以供参考, 我们结合两者来理解</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>bool        Boolean, one byte
i8 (byte)   Signed 8-bit integer
i16         Signed 16-bit integer
i32         Signed 32-bit integer
i64         Signed 64-bit integer
double      64-bit floating point value
string      String
binary      Blob (byte array)
map&lt;t1,t2&gt;  Map from one type to another
list&lt;t1&gt;    Ordered list of one type
set&lt;t1&gt;     Set of unique elements of one type
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是thrift支持的数据类型, 不用过多解释</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>include &quot;shared.thrift&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用include来包含其他thrift文件中的定义</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>namespace cl tutorial
namespace cpp tutorial
namespace d tutorial
namespace dart tutorial
namespace java tutorial
namespace php tutorial
namespace perl tutorial
namespace haxe tutorial
namespace netstd tutorial
namespace go tutorial
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义一个namespace, 通过文档中的说明:</p><blockquote><p>A namespace declares which namespaces/package/module/etc. the type definitions in this file will be declared in for the target languages. The namespace scope indicates which language the namespace applies to; a scope of ‘*’ indicates that the namespace applies to all target languages.</p></blockquote><p>这规定了当前thrift文件编译目标语言时, 会被分配到哪一个模块中, 对于C++而言就是namespace, 对于golang而言就是package</p><p>以上部分属于Header, 一个thrift文件由Header和Definition组成, Definition部分包括:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Definition      ::=  Const | Typedef | Enum 
                | Struct | Union | Exception | Service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>具体如下:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>typedef i32 MyInteger
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这允许我们为类型取一个别名</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>const i32 INT32CONSTANT = 9853
const map&lt;string,string&gt; MAPCONSTANT = {&#39;hello&#39;:&#39;world&#39;, &#39;goodnight&#39;:&#39;moon&#39;}

enum Operation {
  ADD = 1,
  SUBTRACT = 2,
  MULTIPLY = 3,
  DIVIDE = 4
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义常量和枚举</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>struct Work {
  1: i32 num1 = 0,
  2: i32 num2,
  3: Operation op,
  4: optional string comment,
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>struct的语法如下:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Struct          ::=  &#39;struct&#39; Identifier &#39;{&#39; Field* &#39;}&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中的Field的语法如下:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Field           ::=  FieldID? FieldReq? FieldType 
                Identifier (&#39;=&#39; ConstValue)? XsdFieldOptions ListSeparator?

FieldID         ::=  IntConstant &#39;:&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这要求我们以一个可选的数字ID来为struct的每个字段开头, 以及一个optional来表明字段的可选择性, 然后必要部分包括字段类型, 标识符, 以及可选的默认值. (最后两个我们忽视掉, 官方文档的说明不足)</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>exception InvalidOperation {
  1: i32 whatOp,
  2: string why
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>exception和struct类似, 但是用于生成target lan的异常类</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>service Calculator extends shared.SharedService {

   void ping(),

   i32 add(1:i32 num1, 2:i32 num2),

   i32 calculate(1:i32 logid, 2:Work w) throws (1:InvalidOperation ouch),

   oneway void zip()
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>service可以选择性地继承自另一个service, 并在其中声明定义一系列的方法</p><p>方法定义解决C-style, 用返回值类型 + 标识符 + 符合字段格式的参数, 以及可选的抛出的错误类型</p><p>文档中关于thrift的基本语法就到这里</p><hr><h1 id="在golang中实现接口" tabindex="-1"><a class="header-anchor" href="#在golang中实现接口"><span>在golang中实现接口</span></a></h1><p>我们通过<code>thrift -r --gen go tutorial</code>生成了目标代码的文件, 完成相关module的配置后, 我们可以实现定义的接口:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> CalculatorHandler <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	log <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token operator">*</span>tutorial<span class="token punctuation">.</span>SharedStruct
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">NewCalculatorHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>CalculatorHandler <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>CalculatorHandler<span class="token punctuation">{</span>log<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token operator">*</span>tutorial<span class="token punctuation">.</span>SharedStruct<span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>CalculatorHandler</code>就是我们的服务了, 我们在服务中定义一个<code>log</code>字段用于记录服务日志</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>CalculatorHandler<span class="token punctuation">)</span> <span class="token function">Ping</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">&quot;ping()\\n&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>CalculatorHandler<span class="token punctuation">)</span> <span class="token function">Add</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> num1 <span class="token builtin">int32</span><span class="token punctuation">,</span> num2 <span class="token builtin">int32</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>retval17 <span class="token builtin">int32</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">&quot;add(&quot;</span><span class="token punctuation">,</span> num1<span class="token punctuation">,</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">,</span> num2<span class="token punctuation">,</span> <span class="token string">&quot;)\\n&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>CalculatorHandler<span class="token punctuation">)</span> <span class="token function">Calculate</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> logid <span class="token builtin">int32</span><span class="token punctuation">,</span> w <span class="token operator">*</span>tutorial<span class="token punctuation">.</span>Work<span class="token punctuation">)</span> <span class="token punctuation">(</span>val <span class="token builtin">int32</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">&quot;calculate(&quot;</span><span class="token punctuation">,</span> logid<span class="token punctuation">,</span> <span class="token string">&quot;, {&quot;</span><span class="token punctuation">,</span> w<span class="token punctuation">.</span>Op<span class="token punctuation">,</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">,</span> w<span class="token punctuation">.</span>Num1<span class="token punctuation">,</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">,</span> w<span class="token punctuation">.</span>Num2<span class="token punctuation">,</span> <span class="token string">&quot;})\\n&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">switch</span> w<span class="token punctuation">.</span>Op <span class="token punctuation">{</span>
	<span class="token keyword">case</span> tutorial<span class="token punctuation">.</span>Operation_ADD<span class="token punctuation">:</span>
		val <span class="token operator">=</span> w<span class="token punctuation">.</span>Num1 <span class="token operator">+</span> w<span class="token punctuation">.</span>Num2
	<span class="token keyword">case</span> tutorial<span class="token punctuation">.</span>Operation_SUBTRACT<span class="token punctuation">:</span>
		val <span class="token operator">=</span> w<span class="token punctuation">.</span>Num1 <span class="token operator">-</span> w<span class="token punctuation">.</span>Num2
	<span class="token keyword">case</span> tutorial<span class="token punctuation">.</span>Operation_MULTIPLY<span class="token punctuation">:</span>
		val <span class="token operator">=</span> w<span class="token punctuation">.</span>Num1 <span class="token operator">*</span> w<span class="token punctuation">.</span>Num2
	<span class="token keyword">case</span> tutorial<span class="token punctuation">.</span>Operation_DIVIDE<span class="token punctuation">:</span>
		<span class="token keyword">if</span> w<span class="token punctuation">.</span>Num2 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			ouch <span class="token operator">:=</span> tutorial<span class="token punctuation">.</span><span class="token function">NewInvalidOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			ouch<span class="token punctuation">.</span>WhatOp <span class="token operator">=</span> <span class="token function">int32</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span>Op<span class="token punctuation">)</span>
			ouch<span class="token punctuation">.</span>Why <span class="token operator">=</span> <span class="token string">&quot;Cannot divide by 0&quot;</span>
			err <span class="token operator">=</span> ouch
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>
		val <span class="token operator">=</span> w<span class="token punctuation">.</span>Num1 <span class="token operator">/</span> w<span class="token punctuation">.</span>Num2
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		ouch <span class="token operator">:=</span> tutorial<span class="token punctuation">.</span><span class="token function">NewInvalidOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		ouch<span class="token punctuation">.</span>WhatOp <span class="token operator">=</span> <span class="token function">int32</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span>Op<span class="token punctuation">)</span>
		ouch<span class="token punctuation">.</span>Why <span class="token operator">=</span> <span class="token string">&quot;Unknown operation&quot;</span>
		err <span class="token operator">=</span> ouch
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	entry <span class="token operator">:=</span> tutorial<span class="token punctuation">.</span><span class="token function">NewSharedStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	entry<span class="token punctuation">.</span>Key <span class="token operator">=</span> logid
	entry<span class="token punctuation">.</span>Value <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span><span class="token function">int</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span>
	k <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span>logid<span class="token punctuation">)</span>
	<span class="token comment">/*
	   oldvalue, exists := p.log[k]
	   if exists {
	     fmt.Print(&quot;Replacing &quot;, oldvalue, &quot; with &quot;, entry, &quot; for key &quot;, k, &quot;\\n&quot;)
	   } else {
	     fmt.Print(&quot;Adding &quot;, entry, &quot; for key &quot;, k, &quot;\\n&quot;)
	   }
	*/</span>
	p<span class="token punctuation">.</span>log<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> entry
	<span class="token keyword">return</span> val<span class="token punctuation">,</span> err
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>CalculatorHandler<span class="token punctuation">)</span> <span class="token function">GetStruct</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> key <span class="token builtin">int32</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>tutorial<span class="token punctuation">.</span>SharedStruct<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">&quot;getStruct(&quot;</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token string">&quot;)\\n&quot;</span><span class="token punctuation">)</span>
	v <span class="token operator">:=</span> p<span class="token punctuation">.</span>log<span class="token punctuation">[</span><span class="token function">int</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span>
	<span class="token keyword">return</span> v<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>CalculatorHandler<span class="token punctuation">)</span> <span class="token function">Zip</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">&quot;zip()\\n&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后实现了接口中的全部方法 (在golang中, 只要实现了对应的方法就可视为实现接口)</p><p>接下来我们看看如何启动一个服务:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">runServer</span><span class="token punctuation">(</span>transportFactory thrift<span class="token punctuation">.</span>TTransportFactory<span class="token punctuation">,</span> protocolFactory thrift<span class="token punctuation">.</span>TProtocolFactory<span class="token punctuation">,</span> addr <span class="token builtin">string</span><span class="token punctuation">,</span> secure <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> transport thrift<span class="token punctuation">.</span>TServerTransport 

	<span class="token keyword">var</span> err <span class="token builtin">error</span>
	<span class="token keyword">if</span> secure <span class="token punctuation">{</span>
		cfg <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>tls<span class="token punctuation">.</span>Config<span class="token punctuation">)</span>
		<span class="token keyword">if</span> cert<span class="token punctuation">,</span> err <span class="token operator">:=</span> tls<span class="token punctuation">.</span><span class="token function">LoadX509KeyPair</span><span class="token punctuation">(</span><span class="token string">&quot;server.crt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;server.key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			cfg<span class="token punctuation">.</span>Certificates <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>cfg<span class="token punctuation">.</span>Certificates<span class="token punctuation">,</span> cert<span class="token punctuation">)</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		transport<span class="token punctuation">,</span> err <span class="token operator">=</span> thrift<span class="token punctuation">.</span><span class="token function">NewTSSLServerSocket</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> cfg<span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		transport<span class="token punctuation">,</span> err <span class="token operator">=</span> thrift<span class="token punctuation">.</span><span class="token function">NewTServerSocket</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%T\\n&quot;</span><span class="token punctuation">,</span> transport<span class="token punctuation">)</span>
	handler <span class="token operator">:=</span> <span class="token function">NewCalculatorHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	processor <span class="token operator">:=</span> tutorial<span class="token punctuation">.</span><span class="token function">NewCalculatorProcessor</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span>
	server <span class="token operator">:=</span> thrift<span class="token punctuation">.</span><span class="token function">NewTSimpleServer4</span><span class="token punctuation">(</span>processor<span class="token punctuation">,</span> transport<span class="token punctuation">,</span> transportFactory<span class="token punctuation">,</span> protocolFactory<span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Starting the simple server... on &quot;</span><span class="token punctuation">,</span> addr<span class="token punctuation">)</span>
	<span class="token keyword">return</span> server<span class="token punctuation">.</span><span class="token function">Serve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先我们看函数中的第一行: <code>thrift.TServerTransport</code></p><p>这是一个接口, 定义如下:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// Server transport. Object which provides client transports.</span>
<span class="token keyword">type</span> TServerTransport <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">Listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
	<span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>TTransport<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
	<span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span>

	<span class="token comment">// Optional method implementation. This signals to the server transport</span>
	<span class="token comment">// that it should break out of any accept() or listen() that it is currently</span>
	<span class="token comment">// blocked on. This method, if implemented, MUST be thread safe, as it may</span>
	<span class="token comment">// be called from a different thread context than the other TServerTransport</span>
	<span class="token comment">// methods.</span>
	<span class="token function">Interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出, 这是一个经典的Socket Server的接口</p><p>然后是建立一个Socket接口, 这里的代码根据secure参数来决定是否使用TLS加密</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">if</span> secure <span class="token punctuation">{</span>
		cfg <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>tls<span class="token punctuation">.</span>Config<span class="token punctuation">)</span>
		<span class="token keyword">if</span> cert<span class="token punctuation">,</span> err <span class="token operator">:=</span> tls<span class="token punctuation">.</span><span class="token function">LoadX509KeyPair</span><span class="token punctuation">(</span><span class="token string">&quot;server.crt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;server.key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			cfg<span class="token punctuation">.</span>Certificates <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>cfg<span class="token punctuation">.</span>Certificates<span class="token punctuation">,</span> cert<span class="token punctuation">)</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		transport<span class="token punctuation">,</span> err <span class="token operator">=</span> thrift<span class="token punctuation">.</span><span class="token function">NewTSSLServerSocket</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> cfg<span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		transport<span class="token punctuation">,</span> err <span class="token operator">=</span> thrift<span class="token punctuation">.</span><span class="token function">NewTServerSocket</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>建立好了Socket链接后, 我们将实现了接口的<code>CalculatorHandler</code>传入<code>NewCalculatorProcessor</code>中, 生成一个<code>processor</code>, 然后将其传入<code>NewTSimpleServer4</code>中, 生成一个<code>server</code>, 最后调用<code>server.Serve()</code>来启动服务</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%T\\n&quot;</span><span class="token punctuation">,</span> transport<span class="token punctuation">)</span>
handler <span class="token operator">:=</span> <span class="token function">NewCalculatorHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
processor <span class="token operator">:=</span> tutorial<span class="token punctuation">.</span><span class="token function">NewCalculatorProcessor</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span>
server <span class="token operator">:=</span> thrift<span class="token punctuation">.</span><span class="token function">NewTSimpleServer4</span><span class="token punctuation">(</span>processor<span class="token punctuation">,</span> transport<span class="token punctuation">,</span> transportFactory<span class="token punctuation">,</span> protocolFactory<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Starting the simple server... on &quot;</span><span class="token punctuation">,</span> addr<span class="token punctuation">)</span>
<span class="token keyword">return</span> server<span class="token punctuation">.</span><span class="token function">Serve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体可以表示为下述的图:</p><div class="language-Mermaid line-numbers-mode" data-ext="Mermaid" data-title="Mermaid"><pre class="language-Mermaid"><code>graph TD
CalculatorHandler --&gt;|implement| CalculatorHandler.Interface
CalculatorHandler --&gt;|composition| Processor
Processor --&gt;|composition| Server
Transport --&gt;|composition| Server
Server --&gt; Run
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们只要在main函数中调用<code>runServer</code>和<code>runClient</code>就可以启动并使用服务了</p>`,58),o=[p];function i(c,l){return s(),a("div",null,o)}const d=n(e,[["render",i],["__file","IDL-practice1.html.vue"]]),k=JSON.parse(`{"path":"/posts/IDL-practice1.html","title":"thrift实践 - golang实现","lang":"zh-CN","frontmatter":{"title":"thrift实践 - golang实现","tag":["RPC","IDL","thrift"],"categories":["RPC"],"math":true,"mermaid":true,"date":"2023-08-14T00:00:00.000Z","description":"这一部分记录了关于thrift的一些实践, 主要为使用golang完成官方的tutorial实践 环境 windows 10 golang 1.20.7 thrift 1.18 本来是打算用C++来做实验的, 但是在windows平台上使用C++的thrift库有些麻烦, 需要自行编译其依赖库, 并且依赖库的编译又依赖于第三方的C++库, 这些会在后面...","head":[["meta",{"property":"og:url","content":"https://Dnullp.github.io/posts/IDL-practice1.html"}],["meta",{"property":"og:site_name","content":"Dnull's Blog"}],["meta",{"property":"og:title","content":"thrift实践 - golang实现"}],["meta",{"property":"og:description","content":"这一部分记录了关于thrift的一些实践, 主要为使用golang完成官方的tutorial实践 环境 windows 10 golang 1.20.7 thrift 1.18 本来是打算用C++来做实验的, 但是在windows平台上使用C++的thrift库有些麻烦, 需要自行编译其依赖库, 并且依赖库的编译又依赖于第三方的C++库, 这些会在后面..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Dnull"}],["meta",{"property":"article:tag","content":"RPC"}],["meta",{"property":"article:tag","content":"IDL"}],["meta",{"property":"article:tag","content":"thrift"}],["meta",{"property":"article:published_time","content":"2023-08-14T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"thrift实践 - golang实现\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-08-14T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dnull\\",\\"url\\":\\"https://Dnullp.github.io\\"}]}"]]},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":5.3,"words":1591},"filePathRelative":"posts/IDL-practice1.md","localizedDate":"2023年8月14日","excerpt":"<p>这一部分记录了关于thrift的一些实践, 主要为使用golang完成官方的tutorial实践</p>\\n<hr>\\n<h1>环境</h1>\\n<ul>\\n<li>windows 10</li>\\n<li>golang 1.20.7</li>\\n<li>thrift 1.18</li>\\n</ul>\\n<p>本来是打算用C++来做实验的, 但是在windows平台上使用C++的thrift库有些麻烦, 需要自行编译其依赖库, 并且依赖库的编译又依赖于第三方的C++库, 这些会在后面有机会再尝试, 这里采用开发较为简单的golang来尝试</p>\\n<h1>thrift简介</h1>\\n<p>thrift本身是一个用于定义RPC接口IDL框架, 分为两部分:</p>","autoDesc":true}`);export{d as comp,k as data};
