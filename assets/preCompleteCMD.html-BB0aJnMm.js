import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as t,f as p,a as e,b as a,e as l}from"./app-DCTCPPGQ.js";const o={},c=e("p",null,[a("挺庞大的一节内容，所以整理为一篇博客"),e("br"),a(" 注意：记录的是笔者学习中产生的碎片化知识，而不是系统性的整理")],-1),i=l(`<h2 id="define宏定义" tabindex="-1"><a class="header-anchor" href="#define宏定义"><span>#define宏定义</span></a></h2><ul><li>用于预处理阶段替换源码，增加代码可读性<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    ll a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="pragma" tabindex="-1"><a class="header-anchor" href="#pragma"><span>#pragma</span></a></h2><p>该指令后面可跟多种类型的参数：</p><ul><li><p>pack()<br> 设置类、结构、枚举等自定义类型的内存对齐模式</p><ul><li>pack(4)<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span></span></span>
<span class="token keyword">struct</span> <span class="token class-name">test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> a<span class="token punctuation">;</span>
    <span class="token keyword">char</span> b<span class="token punctuation">;</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>每个元素在内存上以4为单位对齐，a占4字节，b占2字节，c占8字节</li></ul></li></ul><h2 id="assert" tabindex="-1"><a class="header-anchor" href="#assert"><span>assert()</span></a></h2><p>这是一个预处理宏，在很多头文件中有定义</p><p>运行时，他会检查括号中的表达式的真假，若为假，则退出程序并显示信息<br> 若为真则不执行动作</p><p>此外<code>assert()</code>的运行和一个预处理变量有关<code>NDEBUG</code></p><h2 id="ndebug" tabindex="-1"><a class="header-anchor" href="#ndebug"><span>NDEBUG</span></a></h2><p>作为一个预处理变量，当<code>NDEBUG</code>被定义时，<code>assert()</code>将不会执行</p><p>除此之外，可以把<code>NDEBUG</code>当作一个普通的预处理变量使用</p><h2 id="几个预处理宏" tabindex="-1"><a class="header-anchor" href="#几个预处理宏"><span>几个预处理宏</span></a></h2><ul><li><code>__func__</code>：当前函数的函数名</li><li><code>__FILE__</code>：当前文件名</li><li><code>__LINE__</code>：当前行</li><li><code>__TIME__</code>：编译时间</li><li><code>__DATE__</code>：编译日期</li></ul><p>这些预处理宏编译阶段完成，对于程序的调试和报错的处理很有用</p>`,15);function r(d,u){return s(),t("div",null,[c,p(" more -"),i])}const h=n(o,[["render",r],["__file","preCompleteCMD.html.vue"]]),g=JSON.parse(`{"path":"/posts/program-language/CPP-notes/preCompleteCMD.html","title":"C++中的预处理指令","lang":"zh-CN","frontmatter":{"date":"2021-01-01T00:00:00.000Z","title":"C++中的预处理指令","tag":["C++","预处理指令","预处理宏"],"categories":["C++学习记录"],"mathjax":true,"description":"挺庞大的一节内容，所以整理为一篇博客 注意：记录的是笔者学习中产生的碎片化知识，而不是系统性的整理 #define宏定义 用于预处理阶段替换源码，增加代码可读性 #pragma 该指令后面可跟多种类型的参数： pack() 设置类、结构、枚举等自定义类型的内存对齐模式 pack(4)每个元素在内存上以4为单位对齐，a占4字节，b占2字节，c占8字节 a...","head":[["meta",{"property":"og:url","content":"https://Dnullp.github.io/posts/program-language/CPP-notes/preCompleteCMD.html"}],["meta",{"property":"og:site_name","content":"Dnull's Blog"}],["meta",{"property":"og:title","content":"C++中的预处理指令"}],["meta",{"property":"og:description","content":"挺庞大的一节内容，所以整理为一篇博客 注意：记录的是笔者学习中产生的碎片化知识，而不是系统性的整理 #define宏定义 用于预处理阶段替换源码，增加代码可读性 #pragma 该指令后面可跟多种类型的参数： pack() 设置类、结构、枚举等自定义类型的内存对齐模式 pack(4)每个元素在内存上以4为单位对齐，a占4字节，b占2字节，c占8字节 a..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Dnull"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"预处理指令"}],["meta",{"property":"article:tag","content":"预处理宏"}],["meta",{"property":"article:published_time","content":"2021-01-01T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C++中的预处理指令\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-01-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dnull\\",\\"url\\":\\"https://Dnullp.github.io\\"}]}"]]},"headers":[{"level":2,"title":"#define宏定义","slug":"define宏定义","link":"#define宏定义","children":[]},{"level":2,"title":"#pragma","slug":"pragma","link":"#pragma","children":[]},{"level":2,"title":"assert()","slug":"assert","link":"#assert","children":[]},{"level":2,"title":"NDEBUG","slug":"ndebug","link":"#ndebug","children":[]},{"level":2,"title":"几个预处理宏","slug":"几个预处理宏","link":"#几个预处理宏","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.24,"words":373},"filePathRelative":"posts/program-language/CPP-notes/preCompleteCMD.md","localizedDate":"2021年1月1日","excerpt":"<p>挺庞大的一节内容，所以整理为一篇博客<br>\\n注意：记录的是笔者学习中产生的碎片化知识，而不是系统性的整理</p>\\n<!-- more --->\\n<h2>#define宏定义</h2>\\n<ul>\\n<li>用于预处理阶段替换源码，增加代码可读性<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span> <span class=\\"token macro-name\\">ll</span> <span class=\\"token expression\\"><span class=\\"token keyword\\">long</span> <span class=\\"token keyword\\">long</span></span></span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    ll a <span class=\\"token operator\\">=</span> <span class=\\"token number\\">123</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div></li>\\n</ul>","autoDesc":true}`);export{h as comp,g as data};
