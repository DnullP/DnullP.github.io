import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,e}from"./app-DCTCPPGQ.js";const t={},p=e(`<p>关于C++Primer的学习只是补充我所缺少的碎片化知识，而不是系统化的整理或者项目记录什么的</p><h2 id="智能指针" tabindex="-1"><a class="header-anchor" href="#智能指针"><span>智能指针</span></a></h2><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">auto</span> ptr_1 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    shared_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">ptr</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//use inner &quot;new&quot; to initial a ptr</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>ptr_1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>包含于<code>memory</code>头文件中，智能指针存在一个计数器，记录某个对象的引用次数，当没有指针引用该对象时，自动销毁该对象</p><p>智能指针的使用与普通指针一样，创建方式参照代码</p><p>智能指针分为两种：<code>shared</code>和<code>unique</code></p><ul><li><code>shared</code>允许多个共享指针引用同一个对象</li><li><code>unique</code>只允许一个指针在同一时刻引用该对象</li></ul><h2 id="浅拷贝深拷贝" tabindex="-1"><a class="header-anchor" href="#浅拷贝深拷贝"><span>浅拷贝深拷贝</span></a></h2><p>涉及指针管理内存的概念，一个对象的成员中可能有指针成员，进行拷贝后的对象中的指针只是和原对象指向同一个地址，而不是在一个新地址上拷贝对象，这样是浅拷贝，反之则为深拷贝</p><h2 id="关于智能指针和内置new混用的一种问题" tabindex="-1"><a class="header-anchor" href="#关于智能指针和内置new混用的一种问题"><span>关于智能指针和内置new混用的一种问题</span></a></h2><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">ptr_1</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    shared_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">ptr_2</span><span class="token punctuation">(</span>ptr_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ptr_2 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//here ptr_1 has been dangling</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里智能指针不会统计指向内置new分配的动态内存的指针，所以在<code>ptr_2</code>重定向后，原本的地址被释放，<code>ptr_1</code>成为了悬挂指针</p><h2 id="c-中的哑类" tabindex="-1"><a class="header-anchor" href="#c-中的哑类"><span>C++中的哑类</span></a></h2><p>我对这方面知之甚少，有空闲的时间会去好好了解关于哑类的来源之类的</p><p>C++中有些类没有良好的析构函数在对象销毁时正确释放资源，使用智能指针来管理这些对象可以减少在编写程序时由于哑类导致的内存泄漏</p><p>我按照书上的代码来解释一下自己的理解：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">end_connection</span><span class="token punctuation">(</span>connection <span class="token operator">*</span>p<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">disconnection</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span>destinction <span class="token operator">&amp;</span>d<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    connection c <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
    shared_ptr<span class="token operator">&lt;</span>connection<span class="token operator">&gt;</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">,</span> end_connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按照书本思路，这是一个网络库中的连接函数，在断开连接时，使用<code>disconnection()</code>函数销毁对象，<code>connection</code>自身并没有析构函数释放类资源<br> 为了让程序自行管理并释放<code>connection</code>对象，使用智能指针指向了一个局部变量，并且绑定了一个删除器函数，这个删除器使得指针在被销毁时不会调用<code>delete</code>，而是使用删除器，将自身保存的指针传递给删除器，从而调用<code>disconnection</code>释放资源</p><h2 id="unique-ptr" tabindex="-1"><a class="header-anchor" href="#unique-ptr"><span>unique_ptr</span></a></h2><p><code>unique_ptr</code>不能使用拷贝初始化和赋值，只能采用直接初始化，只能接受通过<code>new</code>得到的指针</p><h2 id="weak-ptr" tabindex="-1"><a class="header-anchor" href="#weak-ptr"><span>weak_ptr</span></a></h2><p>弱指针，指向一个由<code>shared_ptr</code>管理的地址，当<code>shared_ptr</code>管理的地址完全释放之后，弱指针仍然指向这个地方</p><p>由于指向地址可能已经释放，所以弱指针不能直接解引用，而使用<code>lock()</code>函数得到一个<code>shared_ptr</code>，若指向地址为空，则返回空 <code>shared_ptr</code> 指针，否则返回一个指向该地址的<code>shared_ptr</code></p><p>利用<code>weak_ptr</code>可以方便的检测一个位置上的值是否还存在</p><h2 id="动态数组" tabindex="-1"><a class="header-anchor" href="#动态数组"><span>动态数组</span></a></h2><p>常规动态数组就不说了</p><p>需要注意的是，动态数组不是数组，不包含长度信息，无法使用<code>begin()</code>、<code>end()</code>之类的函数获得头尾，动态数组本身只是分配的一片连续的元素，而内置数组包含了更多的信息和操作</p><p><code>unique_ptr</code>支持分配动态数组：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>unique_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token function">ptr_1</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ptr_1<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//delete this ptr</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>shared_ptr</code>本身不支持动态数组，如果一次性分配多个对象的话，需要自行绑定删除器：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   shared_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">ptr_1</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">)</span>
                         <span class="token punctuation">{</span> <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> p<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码通过lambda表达式定义了一个删除器，模拟删除p指向的动态数组</p><h2 id="allocator类" tabindex="-1"><a class="header-anchor" href="#allocator类"><span>allocator类</span></a></h2><p><code>allocator</code>涉及到一个很很重要的东西——内存池</p><p>可能不涉及，但是它的存在确实会让人联想起内存池</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>allocator<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> alloc<span class="token punctuation">;</span>
<span class="token keyword">auto</span> p <span class="token operator">=</span> alloc<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">auto</span> q <span class="token operator">=</span> p<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请求分配了一片用于储存<code>string</code>类型的内存</p><p>分配的内存没有构造元素，是一片完全空的内存，用于随时动态储存<code>string</code>对象</p><p>其分配的一大片内存可以看作一个内存池，所谓内存池，就是提前向系统申请的一片内存空间，固定用来管理一堆对象，从而避免每次都要重新分配内存而造成系统资源消耗</p><p>同时，一片统一的内存方便对大量的对象进行管理，可以在不需要时清除区域中的全部对象</p><p>现在谈及“池”的概念还为时尚早，包括了内存池、线程池、对象池等，在不同的场景都各有作用</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>alloc<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span>q<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
alloc<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span>q<span class="token operator">++</span><span class="token punctuation">,</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
alloc<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token operator">--</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然分配了内存，但是还是要自己用指针管理</p><ul><li><p>初始化算法</p></li><li><p><code>uninitialized_copy(b,e,b2)</code></p></li><li><p><code>uninitialized_fill(b,e,t)</code></p></li></ul>`,44),o=[p];function c(l,i){return a(),s("div",null,o)}const d=n(t,[["render",c],["__file","DynamicMemery.html.vue"]]),k=JSON.parse(`{"path":"/posts/program-language/CPP-notes/DynamicMemery.html","title":"C++的动态内存和智能指针","lang":"zh-CN","frontmatter":{"date":"2021-01-01T00:00:00.000Z","title":"C++的动态内存和智能指针","tag":["C++","动态内存","智能指针","浅拷贝","深拷贝"],"categories":["C++学习记录"],"mathjax":true,"description":"关于C++Primer的学习只是补充我所缺少的碎片化知识，而不是系统化的整理或者项目记录什么的 智能指针 包含于memory头文件中，智能指针存在一个计数器，记录某个对象的引用次数，当没有指针引用该对象时，自动销毁该对象 智能指针的使用与普通指针一样，创建方式参照代码 智能指针分为两种：shared和unique shared允许多个共享指针引用同一个...","head":[["meta",{"property":"og:url","content":"https://Dnullp.github.io/posts/program-language/CPP-notes/DynamicMemery.html"}],["meta",{"property":"og:site_name","content":"Dnull's Blog"}],["meta",{"property":"og:title","content":"C++的动态内存和智能指针"}],["meta",{"property":"og:description","content":"关于C++Primer的学习只是补充我所缺少的碎片化知识，而不是系统化的整理或者项目记录什么的 智能指针 包含于memory头文件中，智能指针存在一个计数器，记录某个对象的引用次数，当没有指针引用该对象时，自动销毁该对象 智能指针的使用与普通指针一样，创建方式参照代码 智能指针分为两种：shared和unique shared允许多个共享指针引用同一个..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Dnull"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"动态内存"}],["meta",{"property":"article:tag","content":"智能指针"}],["meta",{"property":"article:tag","content":"浅拷贝"}],["meta",{"property":"article:tag","content":"深拷贝"}],["meta",{"property":"article:published_time","content":"2021-01-01T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C++的动态内存和智能指针\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-01-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dnull\\",\\"url\\":\\"https://Dnullp.github.io\\"}]}"]]},"headers":[{"level":2,"title":"智能指针","slug":"智能指针","link":"#智能指针","children":[]},{"level":2,"title":"浅拷贝深拷贝","slug":"浅拷贝深拷贝","link":"#浅拷贝深拷贝","children":[]},{"level":2,"title":"关于智能指针和内置new混用的一种问题","slug":"关于智能指针和内置new混用的一种问题","link":"#关于智能指针和内置new混用的一种问题","children":[]},{"level":2,"title":"C++中的哑类","slug":"c-中的哑类","link":"#c-中的哑类","children":[]},{"level":2,"title":"unique_ptr","slug":"unique-ptr","link":"#unique-ptr","children":[]},{"level":2,"title":"weak_ptr","slug":"weak-ptr","link":"#weak-ptr","children":[]},{"level":2,"title":"动态数组","slug":"动态数组","link":"#动态数组","children":[]},{"level":2,"title":"allocator类","slug":"allocator类","link":"#allocator类","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":4.31,"words":1292},"filePathRelative":"posts/program-language/CPP-notes/DynamicMemery.md","localizedDate":"2021年1月1日","excerpt":"<p>关于C++Primer的学习只是补充我所缺少的碎片化知识，而不是系统化的整理或者项目记录什么的</p>\\n<h2>智能指针</h2>\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">auto</span> ptr_1 <span class=\\"token operator\\">=</span> <span class=\\"token generic-function\\"><span class=\\"token function\\">make_shared</span><span class=\\"token generic class-name\\"><span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span></span></span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">300</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    shared_ptr<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token function\\">ptr</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">100</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//use inner \\"new\\" to initial a ptr</span>\\n\\n    cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token operator\\">*</span>ptr_1 <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}`);export{d as comp,k as data};
