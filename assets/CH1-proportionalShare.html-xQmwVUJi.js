import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as p,c as i,a as s,b as a,d as m,e as n}from"./app-DCTCPPGQ.js";const c={},r=n('<h1 id="分比例调度" tabindex="-1"><a class="header-anchor" href="#分比例调度"><span>分比例调度</span></a></h1><p>分比例调度就是每个进程都获得一个比例，所占比例越大的进程越容易被调度运行</p><h2 id="lottery-scheduling-彩票调度" tabindex="-1"><a class="header-anchor" href="#lottery-scheduling-彩票调度"><span>Lottery Scheduling（彩票调度）</span></a></h2><p>Lottery调度的关键在于票据（tickets）,每个进程被分配了一定数量的票据，然后我们利用随机数，随机抽取一张票，拥有这个ticket的进程就能被调度运行，按照概率论（probability theory）的理论，当随机次数足够多时，每个进程被调度的概率接近于其tickets数量所占的比例</p><p>具体实现方式如下：</p><ul><li>首先我们用一个链表，每个节点上储存的是每个进程的进程信息，其中包括了进程的tickets数量</li><li>然后我们利用生成器随机生成一个票数以内的数字</li><li>接着我们遍历链表，将每个进程的tickets数量加起来，当加起来的数量大于随机生成的数字时，就确定了这个进程被调度运行</li></ul><p>一般tickets数量比较大的进程被排在链表前面，这样可以减少遍历链表的次数，提高效率</p><p>至于如何分配tickets，这是一个开放问题，用户可以根据需求自定义每个进程的tickets数量 在进程间友好的环境下可以让进程自己产生更多的tickets，但是如果进程间存在竞争的话，进程就会不断产生新的tickets，从而导致诸多问题 此外用户也可以根据需求给指定的进程更多票据，来优先完成某些任务之类的 系统自行分配tickets可以参照之前的OS调度的思路，执行时间越久的进程分配的票据越少，每进行一段时间就从其tickets中拿走一些</p><h2 id="stride-scheduling" tabindex="-1"><a class="header-anchor" href="#stride-scheduling"><span>Stride Scheduling</span></a></h2><p>使用Lottery Scheduling的问题在于，当某个进程分配的tickets很少时，有可能会导致其一直都无法被调度执行，使得这个进程进入饥饿状态</p><p>所以这里书上再介绍了一种方式：Stride Scheduling（步幅调度）</p><p>我们用与Lottery Scheduling相似的方式给每个进程分配一个stride（步幅）和一个pass（经过长度），其中stride和其tickets数量成反比</p><p>然后初始状态所有进程的pass都为0，我们随机从中选择进程调度执行一个time quantum，然后将其pass值加上stride，然后再从pass值最小的进程中选择一个调度运行，以此类推</p><p>这样我们就能保证每个步幅的进程都能得到相应概率的调度运行</p><p>但是Stride Scheduling并不支持global state（全局状态），也就是说，我们只能对几个固定的进程进行Stride Scheduling，而不能对全部进程进行，如果此时有一个新的进程需要加入调度列表，其他的进程的pass值已经很大，新进程的pass值如果只是0的话，那么新进程就会占据CPU的使用，这样就会导致其他进程饥饿</p><p>虽然书上没有进一步说明，但是我认为pass值是可以根据现有的进程的pass值预估出一个合理的值的</p><h2 id="cfs-completely-fair-scheduler" tabindex="-1"><a class="header-anchor" href="#cfs-completely-fair-scheduler"><span>CFS（Completely Fair Scheduler）</span></a></h2><p>CFS是Linux使用的进程调度方式，这个调度法的主要参数有两个：</p><ul><li>vruntime（虚拟运行时间）</li><li>sched_latency（调度延迟）</li></ul><p>vruntime并不是进程实际运行的时间，而是CFS评估进程是否调度的一个标准，是基于优先级和实际运行时间计算出的一个数值</p><p>sched_latency作为调度延迟，实际意义指一个进程在运行完自己的min_time后，再次被调度执行之前，需要等待的时间 用另一种方式来思考的话，我们可以先假设进程运行的时间被sched_latency所分，也就是说每个区间的长度为sched_latency，然后在这个区间中每个进程需要平分这段时间，也就是说每个进程的time slice为sched_latency / 进程数(n)</p><p>这样的话就能保证每个进程被调用的平均延迟（latency）为sched_latency，同时为了防止同时进行的进程过多，导致每个进程的min_time过短，导致context switching产生overhead，所以对于sched_latency划分的值会设定一个min_granluarity（最小粒度），这也就导致当进程数过多时，进程之间必然不能完全公平，有些进程将得不到调度运行</p><p>大概对这两个参数有个了解之后我们通过一个例子来说明CFS的运作方式：</p><p>现在假设有4个进程A、B、C、D，他们的初始vruntime都为0，sched_latency为1000，min_granularity为100，那么我们可以得到每个进程的min_time为1000 / 4 = 250，也就是说每个进程在一个sched_latency的时间内至少要运行250的时间才能被中断</p><ul><li>tips：min_time并不一定是time quantum的倍数，我们以time quantum进行累加，超过了min_time就认定为完成了应该运行的时间</li></ul><p>一个进程运行会累加他的vruntime，当vruntime大于250时CFS就会去寻找一个vruntime小于250的进程来运行</p><p>这样相同优先级的进程就能平分cpu的占用时间</p><p>但是我们之前说了<strong>vruntime</strong>是通过公式计算出来的一个虚拟的运行时间，对于一个优先级高的进程，它运行的实际时间应该要更多一些，但是我们不能去修改由sched_latency均分而来的time slice（这样就破坏了CFS公平的部分），所以我们的vruntime的累加是由公式来计算的，公式如下：</p>',28),o=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mi",null,"v"),s("mi",null,"r"),s("mi",null,"u"),s("mi",null,"n"),s("mi",null,"t"),s("mi",null,"i"),s("mi",null,"m"),s("msub",null,[s("mi",null,"e"),s("mi",null,"i")]),s("mo",null,"="),s("mi",null,"v"),s("mi",null,"r"),s("mi",null,"u"),s("mi",null,"n"),s("mi",null,"t"),s("mi",null,"i"),s("mi",null,"m"),s("msub",null,[s("mi",null,"e"),s("mi",null,"i")]),s("mo",null,"+"),s("mfrac",null,[s("mrow",null,[s("mi",null,"w"),s("mi",null,"e"),s("mi",null,"i"),s("mi",null,"g"),s("mi",null,"h"),s("msub",null,[s("mi",null,"t"),s("mn",null,"0")])]),s("mrow",null,[s("mi",null,"w"),s("mi",null,"e"),s("mi",null,"i"),s("mi",null,"g"),s("mi",null,"h"),s("msub",null,[s("mi",null,"t"),s("mi",null,"i")])])]),s("mo",null,"×"),s("mi",null,"r"),s("mi",null,"u"),s("mi",null,"n"),s("mi",null,"t"),s("mi",null,"i"),s("mi",null,"m"),s("msub",null,[s("mi",null,"e"),s("mi",null,"i")])]),s("annotation",{encoding:"application/x-tex"}," vruntime_i = vruntime_i + \\frac{weight_0}{weight_i}\\times runtime_i ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8095em","vertical-align":"-0.15em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"v"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mord mathnormal"},"im"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"e"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3117em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"i")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8095em","vertical-align":"-0.15em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"v"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mord mathnormal"},"im"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"e"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3117em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"i")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.2519em","vertical-align":"-0.8804em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.3714em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),s("span",{class:"mord mathnormal"},"e"),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"mord mathnormal"},"h"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"t"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3117em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"i")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),s("span",{class:"mord mathnormal"},"e"),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"mord mathnormal"},"h"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"t"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"0")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8804em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8095em","vertical-align":"-0.15em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mord mathnormal"},"im"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"e"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3117em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"i")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])])])],-1),u=s("p",null,[a("这里的"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"w"),s("mi",null,"e"),s("mi",null,"i"),s("mi",null,"g"),s("mi",null,"h"),s("mi",null,"t")]),s("annotation",{encoding:"application/x-tex"},"weight")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),s("span",{class:"mord mathnormal"},"e"),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"mord mathnormal"},"h"),s("span",{class:"mord mathnormal"},"t")])])]),a("指的是优先级的权重，"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"w"),s("mi",null,"e"),s("mi",null,"i"),s("mi",null,"g"),s("mi",null,"h"),s("msub",null,[s("mi",null,"t"),s("mn",null,"0")])]),s("annotation",{encoding:"application/x-tex"},"weight_0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),s("span",{class:"mord mathnormal"},"e"),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"mord mathnormal"},"h"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"t"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"0")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),a("是标准优先级的权重，不同优先级的权重由下所示：")],-1),h=n(`<div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> prio_to_weight<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token comment">/* -20 */</span> <span class="token number">88761</span><span class="token punctuation">,</span> <span class="token number">71755</span><span class="token punctuation">,</span> <span class="token number">56483</span><span class="token punctuation">,</span> <span class="token number">46273</span><span class="token punctuation">,</span> <span class="token number">36291</span><span class="token punctuation">,</span>
<span class="token comment">/* -15 */</span> <span class="token number">29154</span><span class="token punctuation">,</span> <span class="token number">23254</span><span class="token punctuation">,</span> <span class="token number">18705</span><span class="token punctuation">,</span> <span class="token number">14949</span><span class="token punctuation">,</span> <span class="token number">11916</span><span class="token punctuation">,</span>
<span class="token comment">/* -10 */</span> <span class="token number">9548</span><span class="token punctuation">,</span> <span class="token number">7620</span><span class="token punctuation">,</span> <span class="token number">6100</span><span class="token punctuation">,</span> <span class="token number">4904</span><span class="token punctuation">,</span> <span class="token number">3906</span><span class="token punctuation">,</span>
<span class="token comment">/* -5 */</span> <span class="token number">3121</span><span class="token punctuation">,</span> <span class="token number">2501</span><span class="token punctuation">,</span> <span class="token number">1991</span><span class="token punctuation">,</span> <span class="token number">1586</span><span class="token punctuation">,</span> <span class="token number">1277</span><span class="token punctuation">,</span>
<span class="token comment">/* 0 */</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">820</span><span class="token punctuation">,</span> <span class="token number">655</span><span class="token punctuation">,</span> <span class="token number">526</span><span class="token punctuation">,</span> <span class="token number">423</span><span class="token punctuation">,</span>
<span class="token comment">/* 5 */</span> <span class="token number">335</span><span class="token punctuation">,</span> <span class="token number">272</span><span class="token punctuation">,</span> <span class="token number">215</span><span class="token punctuation">,</span> <span class="token number">172</span><span class="token punctuation">,</span> <span class="token number">137</span><span class="token punctuation">,</span>
<span class="token comment">/* 10 */</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span>
<span class="token comment">/* 15 */</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是书上所示的优先级及其对应的权重，负数的优先级代表高优先，正数代表低优先</p><p>通过以上的优先级权重表就可以计算对应的vruntime的累加了 相应的，也可以通过其权重和sched_latency计算出每个进程的实际运行的时间</p><h2 id="使用红黑树" tabindex="-1"><a class="header-anchor" href="#使用红黑树"><span>使用红黑树</span></a></h2><p>为了能够快速找到正在运行的进程中的vruntime最小的进程，我们需要使用适合的数据结构来储存这些进程的信息</p><p>Linux使用了红黑树来完成这个工作，并且带有对最小值的缓存，所以有相当概率可以在O(1)的时间内找到最小值，即便缓存不命中，也只需要O(logn)的时间 而完成运行后的进程需要重新加入红黑树中，仍然只需要O(logn)的时间即可</p>`,6),d={href:"https://dnullp.github.io/2023/01/25/data_struct/RBTree/",target:"_blank",rel:"noopener noreferrer"},g=s("h2",{id:"关于长时间休眠的进程",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#关于长时间休眠的进程"},[s("span",null,"关于长时间休眠的进程")])],-1),k=s("p",null,"长时间休眠的进程重新开始运行后，其vruntime会远小于其他进程，从而导致其独占CPU的使用，所以我们要对其vruntime进行调整，Linux会选择红黑树中最小的进程，设置为其新的vruntime，这样能够避免进程的饥饿状态，但是一定程度上破坏了公平性",-1);function y(v,b){const t=l("ExternalLinkIcon");return p(),i("div",null,[r,o,u,h,s("p",null,[a("关于红黑树的文章如下： "),s("a",d,[a("https://dnullp.github.io/2023/01/25/data_struct/RBTree/"),m(t)])]),g,k])}const S=e(c,[["render",y],["__file","CH1-proportionalShare.html.vue"]]),f=JSON.parse(`{"path":"/posts/operating-system/ostep/CH1-proportionalShare.html","title":"分比例调度","lang":"zh-CN","frontmatter":{"date":"2021-01-01T00:00:00.000Z","title":"分比例调度","tag":["operating-system","计算机系统","分比例调度","彩票调度","Stride Scheduling"],"categories":["操作系统","Three-Easy-Pieces"],"mathjax":true,"description":"分比例调度 分比例调度就是每个进程都获得一个比例，所占比例越大的进程越容易被调度运行 Lottery Scheduling（彩票调度） Lottery调度的关键在于票据（tickets）,每个进程被分配了一定数量的票据，然后我们利用随机数，随机抽取一张票，拥有这个ticket的进程就能被调度运行，按照概率论（probability theory）的理论...","head":[["meta",{"property":"og:url","content":"https://Dnullp.github.io/posts/operating-system/ostep/CH1-proportionalShare.html"}],["meta",{"property":"og:site_name","content":"Dnull's Blog"}],["meta",{"property":"og:title","content":"分比例调度"}],["meta",{"property":"og:description","content":"分比例调度 分比例调度就是每个进程都获得一个比例，所占比例越大的进程越容易被调度运行 Lottery Scheduling（彩票调度） Lottery调度的关键在于票据（tickets）,每个进程被分配了一定数量的票据，然后我们利用随机数，随机抽取一张票，拥有这个ticket的进程就能被调度运行，按照概率论（probability theory）的理论..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-14T13:35:40.000Z"}],["meta",{"property":"article:author","content":"Dnull"}],["meta",{"property":"article:tag","content":"operating-system"}],["meta",{"property":"article:tag","content":"计算机系统"}],["meta",{"property":"article:tag","content":"分比例调度"}],["meta",{"property":"article:tag","content":"彩票调度"}],["meta",{"property":"article:tag","content":"Stride Scheduling"}],["meta",{"property":"article:published_time","content":"2021-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-14T13:35:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"分比例调度\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-14T13:35:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dnull\\",\\"url\\":\\"https://Dnullp.github.io\\"}]}"]]},"headers":[{"level":2,"title":"Lottery Scheduling（彩票调度）","slug":"lottery-scheduling-彩票调度","link":"#lottery-scheduling-彩票调度","children":[]},{"level":2,"title":"Stride Scheduling","slug":"stride-scheduling","link":"#stride-scheduling","children":[]},{"level":2,"title":"CFS（Completely Fair Scheduler）","slug":"cfs-completely-fair-scheduler","link":"#cfs-completely-fair-scheduler","children":[]},{"level":2,"title":"使用红黑树","slug":"使用红黑树","link":"#使用红黑树","children":[]},{"level":2,"title":"关于长时间休眠的进程","slug":"关于长时间休眠的进程","link":"#关于长时间休眠的进程","children":[]}],"git":{"createdTime":1712936892000,"updatedTime":1713101740000,"contributors":[{"name":"DnullP","email":"dnull123p@gmail.com","commits":2}]},"readingTime":{"minutes":6.54,"words":1961},"filePathRelative":"posts/operating-system/ostep/CH1-proportionalShare.md","localizedDate":"2021年1月1日","excerpt":"\\n<p>分比例调度就是每个进程都获得一个比例，所占比例越大的进程越容易被调度运行</p>\\n<h2>Lottery Scheduling（彩票调度）</h2>\\n<p>Lottery调度的关键在于票据（tickets）,每个进程被分配了一定数量的票据，然后我们利用随机数，随机抽取一张票，拥有这个ticket的进程就能被调度运行，按照概率论（probability theory）的理论，当随机次数足够多时，每个进程被调度的概率接近于其tickets数量所占的比例</p>\\n<p>具体实现方式如下：</p>\\n<ul>\\n<li>首先我们用一个链表，每个节点上储存的是每个进程的进程信息，其中包括了进程的tickets数量</li>\\n<li>然后我们利用生成器随机生成一个票数以内的数字</li>\\n<li>接着我们遍历链表，将每个进程的tickets数量加起来，当加起来的数量大于随机生成的数字时，就确定了这个进程被调度运行</li>\\n</ul>","autoDesc":true}`);export{S as comp,f as data};
