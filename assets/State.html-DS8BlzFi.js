import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-DCTCPPGQ.js";const e={},p=t(`<h3 id="state" tabindex="-1"><a class="header-anchor" href="#state"><span>State</span></a></h3><p>状态模式的思想可以参考状态机（有限状态机）</p><p>一个类有一个状态机，并且该类处于不同的状态时的方法的行为也不同，我们可以考虑通过条件分支来实现状态机，但是这样的实现需要对每个类都实现状态机的条件分治，高重复度的部分难以得到复用，代码的维护也相当麻烦</p><p>所以我们把每个状态写成一个类，然后只需要在不同的类中实现状态改变的方法，在需要的时候调用状态改变的方法即可</p><p>下面我们通过UML图详细说明：</p><figure><img src="https://refactoring.guru/images/patterns/diagrams/state/structure-en.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这个图中包含了四个要素：</p><ul><li>Context 这是需要变化状态的类，其中包含了<code>state</code>字段用于储存类当前状态，<code>changeState()</code>方法可用于改变状态</li><li>State 这是状态的接口，其中包含了在不同状态下表现不同的方法</li><li>ConcreteState 这里面实现了不同状态的方法，由于这些方法也有可能改变Context的状态，所以这些类也包含了context</li><li>Client</li></ul><p>下面是来自noob note的代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAction</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里定义了State的接口，需要包含状态不同时行为不同的方法</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StartState</span> <span class="token keyword">implements</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>
 
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAction</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Player is in start state&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      context<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
   <span class="token punctuation">}</span>
 
   <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token string">&quot;Start State&quot;</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StopState</span> <span class="token keyword">implements</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>
 
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAction</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Player is in stop state&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      context<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
   <span class="token punctuation">}</span>
 
   <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token string">&quot;Stop State&quot;</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里是两个状态的具体实现</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span>
   <span class="token keyword">private</span> <span class="token class-name">State</span> state<span class="token punctuation">;</span>
 
   <span class="token keyword">public</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      state <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
 
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token class-name">State</span> state<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>     
   <span class="token punctuation">}</span>
 
   <span class="token keyword">public</span> <span class="token class-name">State</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> state<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是存在多种状态的类，可通过<code>setState()</code>方法改变状态</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StatePatternDemo</span> <span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">Context</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
      <span class="token class-name">StartState</span> startState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StartState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      startState<span class="token punctuation">.</span><span class="token function">doAction</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
      <span class="token class-name">StopState</span> stopState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StopState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      stopState<span class="token punctuation">.</span><span class="token function">doAction</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17),c=[p];function o(i,l){return s(),a("div",null,c)}const d=n(e,[["render",o],["__file","State.html.vue"]]),k=JSON.parse(`{"path":"/posts/SE/design-pattern/State.html","title":"State","lang":"zh-CN","frontmatter":{"date":"2021-01-01T00:00:00.000Z","title":"State","tag":["design-pattern","面向对象"],"categories":["设计模式"],"mathjax":true,"description":"State 状态模式的思想可以参考状态机（有限状态机） 一个类有一个状态机，并且该类处于不同的状态时的方法的行为也不同，我们可以考虑通过条件分支来实现状态机，但是这样的实现需要对每个类都实现状态机的条件分治，高重复度的部分难以得到复用，代码的维护也相当麻烦 所以我们把每个状态写成一个类，然后只需要在不同的类中实现状态改变的方法，在需要的时候调用状态改变...","head":[["meta",{"property":"og:url","content":"https://Dnullp.github.io/posts/SE/design-pattern/State.html"}],["meta",{"property":"og:site_name","content":"Dnull's Blog"}],["meta",{"property":"og:title","content":"State"}],["meta",{"property":"og:description","content":"State 状态模式的思想可以参考状态机（有限状态机） 一个类有一个状态机，并且该类处于不同的状态时的方法的行为也不同，我们可以考虑通过条件分支来实现状态机，但是这样的实现需要对每个类都实现状态机的条件分治，高重复度的部分难以得到复用，代码的维护也相当麻烦 所以我们把每个状态写成一个类，然后只需要在不同的类中实现状态改变的方法，在需要的时候调用状态改变..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://refactoring.guru/images/patterns/diagrams/state/structure-en.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"State"}],["meta",{"property":"article:author","content":"Dnull"}],["meta",{"property":"article:tag","content":"design-pattern"}],["meta",{"property":"article:tag","content":"面向对象"}],["meta",{"property":"article:published_time","content":"2021-01-01T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"State\\",\\"image\\":[\\"https://refactoring.guru/images/patterns/diagrams/state/structure-en.png\\"],\\"datePublished\\":\\"2021-01-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dnull\\",\\"url\\":\\"https://Dnullp.github.io\\"}]}"]]},"headers":[{"level":3,"title":"State","slug":"state","link":"#state","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.66,"words":498},"filePathRelative":"posts/SE/design-pattern/State.md","localizedDate":"2021年1月1日","excerpt":"<h3>State</h3>\\n<p>状态模式的思想可以参考状态机（有限状态机）</p>\\n<p>一个类有一个状态机，并且该类处于不同的状态时的方法的行为也不同，我们可以考虑通过条件分支来实现状态机，但是这样的实现需要对每个类都实现状态机的条件分治，高重复度的部分难以得到复用，代码的维护也相当麻烦</p>\\n<p>所以我们把每个状态写成一个类，然后只需要在不同的类中实现状态改变的方法，在需要的时候调用状态改变的方法即可</p>\\n<p>下面我们通过UML图详细说明：</p>\\n<figure><img src=\\"https://refactoring.guru/images/patterns/diagrams/state/structure-en.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>","autoDesc":true}`);export{d as comp,k as data};
