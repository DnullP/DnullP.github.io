import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as t,a as p,e}from"./app-DCTCPPGQ.js";const o={},c=p("p",null,"关于一些重载运算符和类型转换的内容",-1),l=e(`<ul><li>重载运算符约定：重载运算符必须是类成员函数，或者参数列表至少含有一个类类型</li><li>递增递减函数添加一个 <code>int</code>实参，表示后置运算符</li><li>输入输出运算符要注意流对象状态的控制</li><li>函数对象——可调用的类对象</li><li>lambda表达式也是一种函数对象，捕获的变量作为成员变量传入，不含默认构造函数析构函数，默认拷贝控制函数由捕获的数据成员决定</li></ul><h3 id="标准库定义的函数对象" tabindex="-1"><a class="header-anchor" href="#标准库定义的函数对象"><span>标准库定义的函数对象</span></a></h3><p>首先，这些函数对象都会执行对应的运算符操作</p><p>然后，这些函数对象都是模板</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>plus<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> intAdd<span class="token punctuation">;</span>
<span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">intAdd</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>类似这样的用法</p><p>那么这些函数对象有什么用呢？</p><p>Primer上记录的一种用法是改变泛型算法中使用的运算符</p><p>比如 <code>sort()</code>函数默认使用的是&lt;运算符，我们可以传入一个参数为函数对象的 <code>greater&lt;int&gt;</code>来使排序的比较方式改变</p><p>这种用法本质应该和lambda表达式是相同的</p><ul><li>此外，标准库的函数对象对于指针来说是定义良好的，直接比较两个无关指针的结果是未定义的，使用标准库的话...咱还不知道会发生什么，原谅咱现在没有空闲去实际验证了</li></ul><h3 id="function类型" tabindex="-1"><a class="header-anchor" href="#function类型"><span>function类型</span></a></h3><p>在使用模板容器储存可调用对象时，对于lambda表达式和函数对象时，无法使用函数指针存入，所以使用 <code>function</code>类型来规范化可调用对象</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Mult</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> mult<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">cut</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span> myOP<span class="token punctuation">;</span>

    <span class="token keyword">auto</span> plus <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">int</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    myOP<span class="token punctuation">[</span><span class="token string">&quot;+&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> plus<span class="token punctuation">;</span>
    myOP<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">,</span> cut<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    myOP<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">,</span> mult<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上的可调用对象都可用一个 <code>function&lt;int(int, int)&gt;</code>储存</p><h3 id="类型转换运算符" tabindex="-1"><a class="header-anchor" href="#类型转换运算符"><span>类型转换运算符</span></a></h3><p>强制类型转换或者隐式类型转换也是由类的内置运算符控制的</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">A</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> a<span class="token punctuation">;</span>
    <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">int</span> in<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">a</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
    <span class="token keyword">operator</span> <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a <span class="token operator">+</span> <span class="token number">0.1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    A <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">double</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">double</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码分别执行了显式类型转换和隐式类型转换</p><ul><li><p>使用 <code>explicit</code>来避免隐式转换（蛮重要的）</p></li><li><p>隐式转换和本身为参数的构造函数同时存在时造成二义性错误:</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">A</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> a<span class="token punctuation">;</span>
    <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
    <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">int</span> in<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">a</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// A(const A &amp;in) { a = in.a + 1; }</span>
    <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">const</span> B <span class="token operator">&amp;</span>in<span class="token punctuation">)</span> <span class="token punctuation">{</span> a <span class="token operator">=</span> in<span class="token punctuation">.</span>a <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

B<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">A</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">auto</span> f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> A <span class="token operator">&amp;</span>a<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">.</span>a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    B <span class="token function">t</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">f</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//there is an ambiguity error</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按照Primer上的说法，以上代码的同时存在从B到A的隐式转换和用B来隐式构造A，所以会产生Ambiguity Error，但是实际上运行这段代码是默认使用的A类中的隐式构造 我认为是不使用隐式类型转换的函数被编译器认为是更精确的，所以优先选择了构造函数，所以书上的Ambiguity Error有待确定</p><p>至于其他所提到的二义性错误均一一验证（其实只验证了几个）</p></li></ul>`,20);function i(u,r){return s(),a("div",null,[c,t(" more -"),l])}const v=n(o,[["render",i],["__file","overloadAssignment.html.vue"]]),m=JSON.parse(`{"path":"/posts/program-language/CPP-notes/overloadAssignment.html","title":"C++的重载运算符","lang":"zh-CN","frontmatter":{"date":"2021-01-01T00:00:00.000Z","title":"C++的重载运算符","tag":["C++"],"categories":["C++学习记录"],"mathjax":true,"description":"关于一些重载运算符和类型转换的内容 重载运算符约定：重载运算符必须是类成员函数，或者参数列表至少含有一个类类型 递增递减函数添加一个 int实参，表示后置运算符 输入输出运算符要注意流对象状态的控制 函数对象——可调用的类对象 lambda表达式也是一种函数对象，捕获的变量作为成员变量传入，不含默认构造函数析构函数，默认拷贝控制函数由捕获的数据成员决定...","head":[["meta",{"property":"og:url","content":"https://Dnullp.github.io/posts/program-language/CPP-notes/overloadAssignment.html"}],["meta",{"property":"og:site_name","content":"Dnull's Blog"}],["meta",{"property":"og:title","content":"C++的重载运算符"}],["meta",{"property":"og:description","content":"关于一些重载运算符和类型转换的内容 重载运算符约定：重载运算符必须是类成员函数，或者参数列表至少含有一个类类型 递增递减函数添加一个 int实参，表示后置运算符 输入输出运算符要注意流对象状态的控制 函数对象——可调用的类对象 lambda表达式也是一种函数对象，捕获的变量作为成员变量传入，不含默认构造函数析构函数，默认拷贝控制函数由捕获的数据成员决定..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Dnull"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:published_time","content":"2021-01-01T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C++的重载运算符\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-01-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dnull\\",\\"url\\":\\"https://Dnullp.github.io\\"}]}"]]},"headers":[{"level":3,"title":"标准库定义的函数对象","slug":"标准库定义的函数对象","link":"#标准库定义的函数对象","children":[]},{"level":3,"title":"function类型","slug":"function类型","link":"#function类型","children":[]},{"level":3,"title":"类型转换运算符","slug":"类型转换运算符","link":"#类型转换运算符","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.87,"words":862},"filePathRelative":"posts/program-language/CPP-notes/overloadAssignment.md","localizedDate":"2021年1月1日","excerpt":"<p>关于一些重载运算符和类型转换的内容</p>\\n<!-- more --->\\n<ul>\\n<li>重载运算符约定：重载运算符必须是类成员函数，或者参数列表至少含有一个类类型</li>\\n<li>递增递减函数添加一个 <code>int</code>实参，表示后置运算符</li>\\n<li>输入输出运算符要注意流对象状态的控制</li>\\n<li>函数对象——可调用的类对象</li>\\n<li>lambda表达式也是一种函数对象，捕获的变量作为成员变量传入，不含默认构造函数析构函数，默认拷贝控制函数由捕获的数据成员决定</li>\\n</ul>\\n<h3>标准库定义的函数对象</h3>\\n<p>首先，这些函数对象都会执行对应的运算符操作</p>","autoDesc":true}`);export{v as comp,m as data};
