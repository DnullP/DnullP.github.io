import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as l,a as t}from"./app-DCTCPPGQ.js";const o={},r=t("h3",{id:"单例模式",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#单例模式"},[t("span",null,"单例模式")])],-1),i=t("p",null,"单例模式没什么值得多说的，记住几个原则和使用方法",-1),a=t("ul",null,[t("li",null,[t("p",null,"保证object只有一个")]),t("li",null,[t("p",null,"我们可以定义一个单例接口，然后实现一堆单例类，在不同的环境使用不同的单例类，但是必须保证每个环境只有一个这样的单例类，我们通过构建一个registry来管理注册这些不同的单例类")]),t("li",null,[t("p",null,"单例类可以用来优化全局变量，减少命名空间的使用")])],-1),p=[r,i,a];function s(c,u){return n(),l("div",null,p)}const g=e(o,[["render",s],["__file","singleton.html.vue"]]),m=JSON.parse(`{"path":"/posts/SE/design-pattern/singleton.html","title":"单例模式","lang":"zh-CN","frontmatter":{"date":"2021-01-01T00:00:00.000Z","title":"单例模式","tag":["design-pattern","面向对象"],"categories":["设计模式"],"mathjax":true,"description":"单例模式 单例模式没什么值得多说的，记住几个原则和使用方法 保证object只有一个 我们可以定义一个单例接口，然后实现一堆单例类，在不同的环境使用不同的单例类，但是必须保证每个环境只有一个这样的单例类，我们通过构建一个registry来管理注册这些不同的单例类 单例类可以用来优化全局变量，减少命名空间的使用 ","head":[["meta",{"property":"og:url","content":"https://Dnullp.github.io/posts/SE/design-pattern/singleton.html"}],["meta",{"property":"og:site_name","content":"Dnull's Blog"}],["meta",{"property":"og:title","content":"单例模式"}],["meta",{"property":"og:description","content":"单例模式 单例模式没什么值得多说的，记住几个原则和使用方法 保证object只有一个 我们可以定义一个单例接口，然后实现一堆单例类，在不同的环境使用不同的单例类，但是必须保证每个环境只有一个这样的单例类，我们通过构建一个registry来管理注册这些不同的单例类 单例类可以用来优化全局变量，减少命名空间的使用 "}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Dnull"}],["meta",{"property":"article:tag","content":"design-pattern"}],["meta",{"property":"article:tag","content":"面向对象"}],["meta",{"property":"article:published_time","content":"2021-01-01T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"单例模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-01-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dnull\\",\\"url\\":\\"https://Dnullp.github.io\\"}]}"]]},"headers":[{"level":3,"title":"单例模式","slug":"单例模式","link":"#单例模式","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.52,"words":156},"filePathRelative":"posts/SE/design-pattern/singleton.md","localizedDate":"2021年1月1日","excerpt":"<h3>单例模式</h3>\\n<p>单例模式没什么值得多说的，记住几个原则和使用方法</p>\\n<ul>\\n<li>\\n<p>保证object只有一个</p>\\n</li>\\n<li>\\n<p>我们可以定义一个单例接口，然后实现一堆单例类，在不同的环境使用不同的单例类，但是必须保证每个环境只有一个这样的单例类，我们通过构建一个registry来管理注册这些不同的单例类</p>\\n</li>\\n<li>\\n<p>单例类可以用来优化全局变量，减少命名空间的使用</p>\\n</li>\\n</ul>\\n","autoDesc":true}`);export{g as comp,m as data};
