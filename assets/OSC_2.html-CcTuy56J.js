import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as p,c,f as a,d as t,e,a as s,b as i}from"./app-DCTCPPGQ.js";const r={},d=e('<ul><li><ol><li><a href="#processstate">Process state</a></li></ol></li><li><ol start="2"><li><a href="#queue">Queue</a></li></ol></li><li><ol start="3"><li><a href="#sharedmemory">Shared memory</a></li></ol></li><li><ol start="4"><li><a href="#messagepassing">Message passing</a></li></ol><ul><li>4.1. <a href="#directorindirect">Direct or indirect</a></li><li>4.2. <a href="#synchronizesorasynchronizes">Synchronizes or asynchronizes</a></li><li>4.3. <a href="#automaticorexplicitbuffering">Automatic or explicit buffering</a></li><li>4.4. <a href="#somemessagepassingipcmethod">Some message passing IPC method</a><ul><li>4.4.1. <a href="#pipes">pipes</a></li></ul></li></ul></li><li><ol start="5"><li><a href="#thebenefitofmultithread">The benefit of multithread</a></li></ol></li><li><ol start="6"><li><a href="#twokindofdispatch">two kind of dispatch</a></li></ol></li><li><ol start="7"><li><a href="#challenge">challenge</a></li></ol></li><li><ol start="8"><li><a href="#threadmodel">Thread model</a></li></ol></li><li><ol start="9"><li><a href="#somethread-basedtool">Some thread-based tool</a></li></ol><ul><li>9.1. <a href="#threadpools">Thread Pools</a></li><li>9.2. <a href="#forkjoin">Fork join</a></li><li>9.3. <a href="#openmp">OpenMP</a></li><li>9.4. <a href="#grandcentraldispatch">Grand Central Dispatch</a></li></ul></li><li><ol start="10"><li><a href="#someissueswiththemultithread">Some issues with the multithread</a></li></ol></li><li><ol start="11"><li><a href="#threadcancellation">Thread cancellation</a></li></ol></li></ul>',1),h=e(`<h1 id="process" tabindex="-1"><a class="header-anchor" href="#process"><span>Process</span></a></h1><p>Process is the basic unit of execution in an OS, it is a program in execution.</p><p>Memory allocation is based on process.</p><p>The memory space of a process is devided into some segments like:</p><ul><li><code>.data</code></li><li><code>.text</code></li><li><code>.stack</code></li><li><code>.heap</code></li></ul><p>it&#39;s always layed out like this:</p><table><thead><tr><th>stack</th></tr></thead><tbody><tr><td>unused</td></tr><tr><td>heap</td></tr><tr><td>data</td></tr><tr><td>text</td></tr></tbody></table><p>And a process have an exact state at any time, which is called <strong>process state</strong>.</p><h2 id="_1-process-state" tabindex="-1"><a class="header-anchor" href="#_1-process-state"><span>1. <a name="Processstate"></a>Process state</span></a></h2><ul><li>New</li><li>Running</li><li>Waiting</li><li>Ready</li><li>Terminated</li></ul><p>These state is usually represented by a <strong>Process Control Block</strong> (PCB), which contains:</p><ul><li>Process state</li><li>Program counter</li><li>CPU registers</li><li>CPU scheduling information</li><li>Memory-management information</li><li>Accounting information</li><li>I/O status information</li></ul><h1 id="operation-on-process" tabindex="-1"><a class="header-anchor" href="#operation-on-process"><span>operation on process</span></a></h1><p>you can create a process by two kinds of command:</p><ul><li><code>fork()</code>: create a new process by copying the current process</li><li><code>exec()</code>: replace the current process with a new process</li></ul><p>When you fork a process, the entire address space of the parent process is duplicated and given to the child process. The child process is an exact copy of the parent. But it&#39;s based on a technique called <strong>copy-on-write</strong>.</p><p>Only when the child writes a data, the data will be copied to the child&#39;s address space. Otherwise, they will share the same address space.</p><p>And there is the data they will create new rather than share the same one:</p><ul><li>Process ID</li><li>Parent process ID</li><li>pending signal</li><li>...</li></ul><p>To use a <code>fork()</code> function in C program, you should include the <code>&lt;unistd.h&gt;</code> header file.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token comment">//fork()</span>
    <span class="token comment">/* Clone the calling process, creating an exact copy.
       Return -1 for errors, 0 to the new process,
       and the process ID of the new process to the old process.  */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Child: %d\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Parent: %d\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now let&#39;s discuss the <code>exec()</code> function.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>args<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;ls&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-l&quot;</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">//exec()</span>
    <span class="token comment">/* Execute the program PATH with arguments ARGV,
       searching for it in the path.  */</span>
    <span class="token function">execvp</span><span class="token punctuation">(</span><span class="token string">&quot;ls&quot;</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This function will replace the current process with a new process loaded form a file.</p><p>Every process is created by another process, the first process of the system in linux is the <code>systemd</code> process.</p><p>Besides, you can check the running process by <code>ps</code> command. If you want to check the history of process, you can use <code>ps -ef</code>.</p><ul><li><code>wait()</code>: wait for a child process to terminate, and return the process ID of the terminated child process.</li></ul><p>we can use the function to control the concurrency of the process to implement the <strong>synchronization</strong>.</p><ul><li><code>exit()</code>: terminate the current process.</li></ul><p>A terminated process will get into the <strong>zombie state</strong>. It&#39;s a state that the process is terminated but still have some information in the PCB. It&#39;s ready for the parent process to call <code>wait()</code> to get the status of its children process.</p><p>But if the parent process terminate before reap the child process, the child process will be adopted by the <code>init</code> process or the <code>systemd</code> process, which will repeatedly call <code>wait()</code> to reap the child process.</p><h1 id="process-scheduling" tabindex="-1"><a class="header-anchor" href="#process-scheduling"><span>Process scheduling</span></a></h1><p>In the modern OS, the unit of scheduling is usually the <strong>thread</strong> rather than the <strong>process</strong>. So we consider the <strong>process scheduling</strong> and <strong>thread scheduling</strong> as an interchangeable concept unless we emphasize with the “thread scheduling”.</p><p>The detailed info of scheduling is in the <code>sched.h</code> header.</p><p>There is two kinds of process we often discuss:</p><ul><li>CPU-bound process: the process that spend most of its time on the CPU.</li><li>I/O-bound process: the process that spend most of its time on the I/O.</li></ul><p>To maximize the CPU utilization, we should schedule the other process when the current process is waiting for the I/O.</p><p>The real cost is related to the <strong>context switch</strong>.</p><h2 id="_2-queue" tabindex="-1"><a class="header-anchor" href="#_2-queue"><span>2. <a name="Queue"></a>Queue</span></a></h2><ul><li>ready queue: the queue that store the process that is ready to run.</li><li>waiting queue: the queue that store the process that is waiting for the I/O.</li></ul><p>Scheduling will move the process between the queues and select one to fulfill the vacancy of the CPU, which is called <strong>dispatch</strong>.</p><p>Usually, we can depict the process state and scheduling as below:</p>`,42),u=e(`<p>We give every process a priority to decide which process should be scheduled first. We will talk it later in <strong>CPU scheduling</strong>.</p><h1 id="ipc-inter-process-communication" tabindex="-1"><a class="header-anchor" href="#ipc-inter-process-communication"><span>IPC (Inter-Process Communication)</span></a></h1><p>There is some reason why we need IPC:</p><ul><li>Information sharing</li><li>Computation speedup</li><li>Modularity</li></ul><p>And there is usually two kinds of IPC method we can apply:</p><ul><li>Shared memory</li><li>Message passing</li></ul><h2 id="_3-shared-memory" tabindex="-1"><a class="header-anchor" href="#_3-shared-memory"><span>3. <a name="Sharedmemory"></a>Shared memory</span></a></h2><p>The basic conception of shared memory based IPC is:</p><ul><li>a process reserve some space and admit others to access it.</li><li>OS remap their memory together</li></ul><p>We usually use the header <code>&lt;sys/shm.h&gt;</code> to implement the shared memory based IPC.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/shm.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> shmid <span class="token operator">=</span> <span class="token function">shm_open</span><span class="token punctuation">(</span><span class="token string">&quot;/shm&quot;</span><span class="token punctuation">,</span> O_RDWR <span class="token operator">|</span> O_CREAT<span class="token punctuation">,</span> <span class="token number">0666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ftruncate</span><span class="token punctuation">(</span>shmid<span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">mmap</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">,</span> PROT_READ <span class="token operator">|</span> PROT_WRITE<span class="token punctuation">,</span> MAP_SHARED<span class="token punctuation">,</span> shmid<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">int</span> <span class="token operator">*</span>shared_data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">mmap</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> PROT_READ <span class="token operator">|</span> PROT_WRITE<span class="token punctuation">,</span>
                                   MAP_SHARED <span class="token operator">|</span> MAP_ANONYMOUS<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> producer <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>producer <span class="token operator">&lt;</span> <span class="token number">100</span> <span class="token operator">&amp;&amp;</span> ptr<span class="token punctuation">[</span>producer<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            ptr<span class="token punctuation">[</span>producer<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Producer: %d\\n&quot;</span><span class="token punctuation">,</span> producer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            producer<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>shm_open()</code> will create a shared memory object, and return a file descriptor. Then we can use the <code>mmap()</code> to map a file to the memory space, so we can share the memory space with others.</p><p><code>ftruncate()</code> is used to allocate the size of the shared memory object.</p><h2 id="_4-message-passing" tabindex="-1"><a class="header-anchor" href="#_4-message-passing"><span>4. <a name="Messagepassing"></a>Message passing</span></a></h2><p>This is the main method of IPC we use in the real situation. We can classfy the message passing into various types:</p><ul><li>Direct or indirect</li><li>synchronizes or asynchronizes</li><li>automatic or explicit buffering</li></ul><h3 id="_4-1-direct-or-indirect" tabindex="-1"><a class="header-anchor" href="#_4-1-direct-or-indirect"><span>4.1. <a name="Directorindirect"></a>Direct or indirect</span></a></h3><p>A <strong>direct communication</strong> is to establish a link between the two processes, and to establish it, it&#39;s necessary to name the processes that will communicate with each other.</p><p>Like the naive TCP, RPC, etc. are using the direct communication.</p><p>An <strong>indirect communication</strong> is to use a middleman to forward the message between the two processes.</p><p>Like there is a message queue in the middleman, some senders send the message to the queue, and the receiver get the message from the queue. They don&#39;t know each other but can communicate.</p><h3 id="_4-2-synchronizes-or-asynchronizes" tabindex="-1"><a class="header-anchor" href="#_4-2-synchronizes-or-asynchronizes"><span>4.2. <a name="Synchronizesorasynchronizes"></a>Synchronizes or asynchronizes</span></a></h3><p>If the sender need to suspend until the receiver get the message, it&#39;s a <strong>synchronizes</strong> communication. We need to maintain the consistence in a synchronizes system.</p><p>Vice versa, it&#39;s an <strong>asynchronizes</strong> communication that we can just send the message and then continue the process. Maybe we will receive the ACK later but we don&#39;t need to wait for it.</p><h3 id="_4-3-automatic-or-explicit-buffering" tabindex="-1"><a class="header-anchor" href="#_4-3-automatic-or-explicit-buffering"><span>4.3. <a name="Automaticorexplicitbuffering"></a>Automatic or explicit buffering</span></a></h3><p>I don&#39;t think it&#39;s worthy to discuss this.</p><h3 id="_4-4-some-message-passing-ipc-method" tabindex="-1"><a class="header-anchor" href="#_4-4-some-message-passing-ipc-method"><span>4.4. <a name="SomemessagepassingIPCmethod"></a>Some message passing IPC method</span></a></h3><ul><li>Pipes</li><li>MQ</li></ul><h4 id="_4-4-1-pipes" tabindex="-1"><a class="header-anchor" href="#_4-4-1-pipes"><span>4.4.1. <a name="pipes"></a>pipes</span></a></h4><p>We can use pipes in C by the header <code>&lt;unistd.h&gt;</code>.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> pipe_fd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">pipe</span><span class="token punctuation">(</span>pipe_fd<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">int</span> pid<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//write 1 to 10 to the parent</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">write</span><span class="token punctuation">(</span>pipe_fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>   
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//read from the child</span>
        <span class="token keyword">int</span> num<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">read</span><span class="token punctuation">(</span>pipe_fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Consumer: %d\\n&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>pipe is a unidirectional communication method for the parent and child process, we also consider the pipe as a file. So we can use the <code>read()</code> and <code>write()</code> function to communicate. The <code>pipe_fd[0]</code> is the read end of the pipe and the <code>pipe_fd[1]</code> is the write end of the pipe.</p><h1 id="thread" tabindex="-1"><a class="header-anchor" href="#thread"><span>Thread</span></a></h1><p>Thread is the basic unit of scheduling and running in the OS. One process at least have one thread.</p>`,34),m=e('<p>This is the resource managed by thread and process.</p><h2 id="_5-the-benefit-of-multithread" tabindex="-1"><a class="header-anchor" href="#_5-the-benefit-of-multithread"><span>5. <a name="Thebenefitofmultithread"></a>The benefit of multithread</span></a></h2><ul><li>responsiveness: it&#39;s good for interactive application.</li><li>resource sharing: it&#39;s easy to share the resource between threads.</li><li>economy: it&#39;s cheaper to create a thread than a process.</li><li>scalability: the problem is easier to be divided into some subproblems for multi cores CPU to run faster.</li></ul><h2 id="_6-two-kind-of-dispatch" tabindex="-1"><a class="header-anchor" href="#_6-two-kind-of-dispatch"><span>6. <a name="twokindofdispatch"></a>two kind of dispatch</span></a></h2><ul><li>data parallelism: this focus on the parallelism of the calculation.</li><li>task parallelism: this focus on the task dispatching.</li></ul><h2 id="_7-challenge" tabindex="-1"><a class="header-anchor" href="#_7-challenge"><span>7. <a name="challenge"></a>challenge</span></a></h2><ul><li>How to identify the question that can be solved by multithread?</li><li>Whether the multithread can improve the performance?</li></ul><p>To estimate the second question, we offer a formula:</p>',8),k=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mi",null,"P"),s("mo",null,"="),s("mfrac",null,[s("mn",null,"1"),s("mrow",null,[s("mi",null,"S"),s("mo",null,"+"),s("mfrac",null,[s("mrow",null,[s("mn",null,"1"),s("mo",null,"−"),s("mi",null,"S")]),s("mi",null,"N")])])])]),s("annotation",{encoding:"application/x-tex"}," P = \\frac{1}{S+\\frac{1-S}{N}} ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"P"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.4288em","vertical-align":"-1.1073em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.3214em"}},[s("span",{style:{top:"-2.2377em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8723em"}},[s("span",{style:{top:"-2.655em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.10903em"}},"N")])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.394em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"1"),s("span",{class:"mbin mtight"},"−"),s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05764em"}},"S")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.345em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"1")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.1073em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})])])])])])],-1),g=s("p",null,[i("The "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"S")]),s("annotation",{encoding:"application/x-tex"},"S")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S")])])]),i(" is the part of the program that must run in serial, and "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"N")]),s("annotation",{encoding:"application/x-tex"},"N")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N")])])]),i(" is the number of the processors.")],-1),f=e('<ul><li>How to split the data for the data parallelism?</li><li>How to solve the data denpendency? (synchronization problem)</li><li>test and debug is also a difficult problem.</li></ul><h2 id="_8-thread-model" tabindex="-1"><a class="header-anchor" href="#_8-thread-model"><span>8. <a name="Threadmodel"></a>Thread model</span></a></h2><p>We have two kinds of thread: <strong>user mode thread</strong> and <strong>kernel mode thread</strong>. Scheduling happens in the kernel mode thread, and kernel mode thread consume more resource to create and maintain.</p><p>There is three kinds of thread model:</p><ul><li>Many-to-one (routine or green thread): We create many user mode threads and dispatch them to the same kernel mode thread. This will well support a high concurrency but user mode thread can&#39;t run in parallel.</li><li>One-to-one: It does&#39;t have the difference to using the only kernel mode thread.</li><li>Many-to-many: It&#39;s the most flexible and maybe have the best performance. But it&#39;s hard to implement. One CPU-bound process will more likely to be dispatched to a single CPU. And some I/O-bound process will more likely to be dispatched to the same CPU.</li></ul><h2 id="_9-some-thread-based-tool" tabindex="-1"><a class="header-anchor" href="#_9-some-thread-based-tool"><span>9. <a name="Somethread-basedtool"></a>Some thread-based tool</span></a></h2><p>These are some libs with implicit thread model:</p><h3 id="_9-1-thread-pools" tabindex="-1"><a class="header-anchor" href="#_9-1-thread-pools"><span>9.1. <a name="ThreadPools"></a>Thread Pools</span></a></h3><p>We know that the creation of thread is expensive, so we can create a thread pool. When we need a thread, we can just apply for a thread from the pool. The similar technique is also usual in the computer science.</p><h3 id="_9-2-fork-join" tabindex="-1"><a class="header-anchor" href="#_9-2-fork-join"><span>9.2. <a name="Forkjoin"></a>Fork join</span></a></h3><p>This is a model for the task parallelism. When we run a task, we can fork some subtasks on the serial part and join them at the end of the serial part.</p><p>Below is an example of the fork join model:</p>',12),v=e('<h3 id="_9-3-openmp" tabindex="-1"><a class="header-anchor" href="#_9-3-openmp"><span>9.3. <a name="OpenMP"></a>OpenMP</span></a></h3><p>This is the introduction from the official website:</p><blockquote><p>OpenMP (Open Multi-Processing) is an application programming interface (API) that supports multi-platform shared-memory multiprocessing programming in C, C++, and Fortran,[3] on many platforms, instruction-set architectures and operating systems, including Solaris, AIX, FreeBSD, HP-UX, Linux, macOS, and Windows. It consists of a set of compiler directives, library routines, and environment variables that influence run-time behavior.[2][4][5]</p></blockquote><h3 id="_9-4-grand-central-dispatch" tabindex="-1"><a class="header-anchor" href="#_9-4-grand-central-dispatch"><span>9.4. <a name="GrandCentralDispatch"></a>Grand Central Dispatch</span></a></h3><p>This is a technique used by Apple.</p><h2 id="_10-some-issues-with-the-multithread" tabindex="-1"><a class="header-anchor" href="#_10-some-issues-with-the-multithread"><span>10. <a name="Someissueswiththemultithread"></a>Some issues with the multithread</span></a></h2><ul><li><p>Fork and exec: when we fork a process, we need to decide wether to copy the threads it has. Usually, there is two kinds of fork() function to specify this.</p></li><li><p>Signal handling: Signal is sended between process, but when we have more than one thread in a process, we need to decide how to solve the problem. Usually, we have four kinds of method to solve this:</p><ul><li>Deliver the signal to all the threads in the process.</li><li>Deliver the signal to the thread which the signal applies.</li><li>Deliver to certain threads in the process.</li><li>Assign a specific thread to receive all the signals.</li></ul></li></ul><h2 id="_11-thread-cancellation" tabindex="-1"><a class="header-anchor" href="#_11-thread-cancellation"><span>11. <a name="Threadcancellation"></a>Thread cancellation</span></a></h2><p>There is two kinds of thread cancellation:</p><ul><li>asynchronous cancellation</li><li>deferred cancellation</li></ul><p>The difference between them is just that the deferred will wait the thread to get to a safe point to cancel it when the resources are correctly released.</p><p>But the asynchronous cancellation does&#39;t care about these factors.</p>',12);function b(y,w){const n=l("Mermaid");return p(),c("div",null,[a(" vscode-markdown-toc "),d,a(` vscode-markdown-toc-config
	numbering=true
	autoSave=true
	/vscode-markdown-toc-config `),a(" /vscode-markdown-toc "),h,t(n,{id:"mermaid-436",code:"eJxLy8kvT85ILCrhUgCCoOii0ry8zLz0WDA3PLo8MbMEznWKTsrJT85OTYFwg1yii1ITUyohvJDoktSi3My8xBK4vIKurl1NSmZxQWJJckYNUD3EULCwp75/jYITxFiEAFAJAHzeKUM="}),u,t(n,{id:"mermaid-590",code:"eJxljUkOwjAMRfecwlegPQE9AYvuIoQcx6QRUYPswPlJiFQ6/I3l5+F5wdcE43CCEn3b1l8lEavCj9Zc7mdDyfFtRTrzCHFDeuNjshgBZweaMQeCD0pAu95bLOMkjG7hNUPxlEN6/tcb7oywD5pZ9pPexETFeRTx3J7X+gXUFD2s"}),m,k,g,f,t(n,{id:"mermaid-720",code:"eJxLL0osyFAIceJSAALH6OL83FSF8vyi7FiwgFN0GpztjMR2VNDVtVOAaHICs50hasBsl2gkE8AirkgiEDVu0Vn5mXkQEReICJjtisR2A7PdkR0FAKcKKVg="}),v])}const P=o(r,[["render",b],["__file","OSC_2.html.vue"]]),T=JSON.parse(`{"path":"/posts/operating-system/osc/OSC_2.html","title":"process and thread (OSC_2)","lang":"zh-CN","frontmatter":{"title":"process and thread (OSC_2)","tag":["OS","process","thread"],"category":["OS"],"math":true,"mermaid":true,"date":"2023-10-08T00:00:00.000Z","description":" Process state Queue Shared memory Message passing 4.1. Direct or indirect 4.2. Synchronizes or asynchronizes 4.3. Automatic or explicit buffering 4.4. Some message passing IPC ...","head":[["meta",{"property":"og:url","content":"https://Dnullp.github.io/posts/operating-system/osc/OSC_2.html"}],["meta",{"property":"og:site_name","content":"Dnull's Blog"}],["meta",{"property":"og:title","content":"process and thread (OSC_2)"}],["meta",{"property":"og:description","content":" Process state Queue Shared memory Message passing 4.1. Direct or indirect 4.2. Synchronizes or asynchronizes 4.3. Automatic or explicit buffering 4.4. Some message passing IPC ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-14T13:35:40.000Z"}],["meta",{"property":"article:author","content":"Dnull"}],["meta",{"property":"article:tag","content":"OS"}],["meta",{"property":"article:tag","content":"process"}],["meta",{"property":"article:tag","content":"thread"}],["meta",{"property":"article:published_time","content":"2023-10-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-14T13:35:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"process and thread (OSC_2)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-08T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-14T13:35:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dnull\\",\\"url\\":\\"https://Dnullp.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1. Process state","slug":"_1-process-state","link":"#_1-process-state","children":[]},{"level":2,"title":"2. Queue","slug":"_2-queue","link":"#_2-queue","children":[]},{"level":2,"title":"3. Shared memory","slug":"_3-shared-memory","link":"#_3-shared-memory","children":[]},{"level":2,"title":"4. Message passing","slug":"_4-message-passing","link":"#_4-message-passing","children":[{"level":3,"title":"4.1. Direct or indirect","slug":"_4-1-direct-or-indirect","link":"#_4-1-direct-or-indirect","children":[]},{"level":3,"title":"4.2. Synchronizes or asynchronizes","slug":"_4-2-synchronizes-or-asynchronizes","link":"#_4-2-synchronizes-or-asynchronizes","children":[]},{"level":3,"title":"4.3. Automatic or explicit buffering","slug":"_4-3-automatic-or-explicit-buffering","link":"#_4-3-automatic-or-explicit-buffering","children":[]},{"level":3,"title":"4.4. Some message passing IPC method","slug":"_4-4-some-message-passing-ipc-method","link":"#_4-4-some-message-passing-ipc-method","children":[]}]},{"level":2,"title":"5. The benefit of multithread","slug":"_5-the-benefit-of-multithread","link":"#_5-the-benefit-of-multithread","children":[]},{"level":2,"title":"6. two kind of dispatch","slug":"_6-two-kind-of-dispatch","link":"#_6-two-kind-of-dispatch","children":[]},{"level":2,"title":"7. challenge","slug":"_7-challenge","link":"#_7-challenge","children":[]},{"level":2,"title":"8. Thread model","slug":"_8-thread-model","link":"#_8-thread-model","children":[]},{"level":2,"title":"9. Some thread-based tool","slug":"_9-some-thread-based-tool","link":"#_9-some-thread-based-tool","children":[{"level":3,"title":"9.1. Thread Pools","slug":"_9-1-thread-pools","link":"#_9-1-thread-pools","children":[]},{"level":3,"title":"9.2. Fork join","slug":"_9-2-fork-join","link":"#_9-2-fork-join","children":[]},{"level":3,"title":"9.3. OpenMP","slug":"_9-3-openmp","link":"#_9-3-openmp","children":[]},{"level":3,"title":"9.4. Grand Central Dispatch","slug":"_9-4-grand-central-dispatch","link":"#_9-4-grand-central-dispatch","children":[]}]},{"level":2,"title":"10. Some issues with the multithread","slug":"_10-some-issues-with-the-multithread","link":"#_10-some-issues-with-the-multithread","children":[]},{"level":2,"title":"11. Thread cancellation","slug":"_11-thread-cancellation","link":"#_11-thread-cancellation","children":[]}],"git":{"createdTime":1712936892000,"updatedTime":1713101740000,"contributors":[{"name":"DnullP","email":"dnull123p@gmail.com","commits":2}]},"readingTime":{"minutes":7.39,"words":2217},"filePathRelative":"posts/operating-system/osc/OSC_2.md","localizedDate":"2023年10月8日","excerpt":"<!-- vscode-markdown-toc -->\\n<ul>\\n<li>\\n<ol>\\n<li><a href=\\"#processstate\\">Process state</a></li>\\n</ol>\\n</li>\\n<li>\\n<ol start=\\"2\\">\\n<li><a href=\\"#queue\\">Queue</a></li>\\n</ol>\\n</li>\\n<li>\\n<ol start=\\"3\\">\\n<li><a href=\\"#sharedmemory\\">Shared memory</a></li>\\n</ol>\\n</li>\\n<li>\\n<ol start=\\"4\\">\\n<li><a href=\\"#messagepassing\\">Message passing</a></li>\\n</ol>\\n<ul>\\n<li>4.1. <a href=\\"#directorindirect\\">Direct or indirect</a></li>\\n<li>4.2. <a href=\\"#synchronizesorasynchronizes\\">Synchronizes or asynchronizes</a></li>\\n<li>4.3. <a href=\\"#automaticorexplicitbuffering\\">Automatic or explicit buffering</a></li>\\n<li>4.4. <a href=\\"#somemessagepassingipcmethod\\">Some message passing IPC method</a>\\n<ul>\\n<li>4.4.1. <a href=\\"#pipes\\">pipes</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<ol start=\\"5\\">\\n<li><a href=\\"#thebenefitofmultithread\\">The benefit of multithread</a></li>\\n</ol>\\n</li>\\n<li>\\n<ol start=\\"6\\">\\n<li><a href=\\"#twokindofdispatch\\">two kind of dispatch</a></li>\\n</ol>\\n</li>\\n<li>\\n<ol start=\\"7\\">\\n<li><a href=\\"#challenge\\">challenge</a></li>\\n</ol>\\n</li>\\n<li>\\n<ol start=\\"8\\">\\n<li><a href=\\"#threadmodel\\">Thread model</a></li>\\n</ol>\\n</li>\\n<li>\\n<ol start=\\"9\\">\\n<li><a href=\\"#somethread-basedtool\\">Some thread-based tool</a></li>\\n</ol>\\n<ul>\\n<li>9.1. <a href=\\"#threadpools\\">Thread Pools</a></li>\\n<li>9.2. <a href=\\"#forkjoin\\">Fork join</a></li>\\n<li>9.3. <a href=\\"#openmp\\">OpenMP</a></li>\\n<li>9.4. <a href=\\"#grandcentraldispatch\\">Grand Central Dispatch</a></li>\\n</ul>\\n</li>\\n<li>\\n<ol start=\\"10\\">\\n<li><a href=\\"#someissueswiththemultithread\\">Some issues with the multithread</a></li>\\n</ol>\\n</li>\\n<li>\\n<ol start=\\"11\\">\\n<li><a href=\\"#threadcancellation\\">Thread cancellation</a></li>\\n</ol>\\n</li>\\n</ul>","autoDesc":true}`);export{P as comp,T as data};
