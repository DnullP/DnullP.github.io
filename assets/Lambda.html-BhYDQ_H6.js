import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,f as t,a as e,e as p}from"./app-DCTCPPGQ.js";const o={},c=e("p",null,"Lambda表达式真的是我从来没有接触过的一类语法，于C++11中补充",-1),l=p(`<h2 id="lambda表达式" tabindex="-1"><a class="header-anchor" href="#lambda表达式"><span>Lambda表达式</span></a></h2><p>C++中存在一类可调用对象，可以通过调用运算符 <code>()</code>来进行调用<br> 函数就是一种最常见的可调用对象</p><p>有时候我们编写函数时会遇到这么一种情况：</p><p>我需要在一个函数中调用另一个函数实现具体的功能，调用的函数需要使用到父函数的局部变量，此时如果我把这个变量作为参数传递过去就使得函数的原型过于冗杂了，而我又不可能为了一个函数的变量使用而去定义一个全局变量，此时，我们可以使用Lambda表达式来优化代码</p><p>Lambda表达式和函数一样作为一种可调用对象存在</p><p>如下定义一个lambda表达式：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">auto</span> lam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>auto</code>对应的类型是 <code>lambda []int (int a)-&gt;int</code><br> 我们对照一下函数的声明 <code>auto f(int a)-&gt;int</code><br> 可以注意到，两者的形式其实蛮像的，但是lambda表达式中间没有函数的命名，并且要多一个捕获列表，返回值类型强制使用尾置类型</p><p>其实lambda表达式可以说是一种匿名函数，即不能通过名字来调用的函数<br> 而且每一个lambda表达式都是一个自定义类，编译器会先建立一个对应的lambda表达式的类型，再创建一个实例</p><p>作为一种匿名函数，除了不可以直接通过标识来调用外，所有函数支持的操作lambda表达式都可以使用</p><h2 id="捕获列表" tabindex="-1"><a class="header-anchor" href="#捕获列表"><span>捕获列表</span></a></h2><p>那么lambda表达式最重要的东西就是它的捕获列表，lambda表达式会自动从父函数中捕获对应名字的变量，然后作为子函数的lambda表达式也可以使用</p><p>使用方式如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">auto</span> lam <span class="token operator">=</span> <span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span>
            <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">father_fucn</span><span class="token punctuation">(</span><span class="token keyword">int</span> ar_1<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token function">lam</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上使用的lambda表达式会自动捕获父函数中的<code>size</code>变量</p><p>默认情况下，捕获是采用传值的方式，也就是每次调用会拷贝一份 <code>size</code>在子函数中<br> 如果使用 <code>&amp;</code>或 <code>=</code>号可以改变其捕获方式，具体的使用就不说了</p><h2 id="结合算法库使用" tabindex="-1"><a class="header-anchor" href="#结合算法库使用"><span>结合算法库使用</span></a></h2><p>标准算法库中，有些算法可以接受一个可调用对象，在算法执行中调用，被称作<strong>谓语</strong><br> 谓语可以是任何可调用对象，但是传入参数的数量有限制，并且只能是容器的元素对应的类型，如果需要有额外的参数的话，就可以用到lambda表达式捕获父对象的变量</p><p>lambda表达式还有一些其他的特性，比如返回值类型之类的，在此就不多记录了</p><h2 id="参数绑定" tabindex="-1"><a class="header-anchor" href="#参数绑定"><span>参数绑定</span></a></h2><p>由于和这部分内容放在一起，所以这里也记录一些关于参数绑定的内容</p><p>参数绑定使用 <code>bind()</code>函数</p><p>使用方式：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">print_th</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token double-colon punctuation">::</span>placeholders<span class="token punctuation">;</span>
    <span class="token keyword">auto</span> print_tw <span class="token operator">=</span> <span class="token function">bind</span><span class="token punctuation">(</span>print_th<span class="token punctuation">,</span> _2<span class="token punctuation">,</span> _1<span class="token punctuation">,</span> _3<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> print_nn <span class="token operator">=</span> <span class="token function">bind</span><span class="token punctuation">(</span>print_th<span class="token punctuation">,</span> _2<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> _1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print_tw</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print_nn</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>带有下划线的数字会对应原函数的参数，下划线后面代表第几个参数（仅限于带下划线的参数的次序），新创建的可调用对象只用输入有下划线的参数即可，其余参数由对应的位置上的参数写入</p><p>这样可以在使用算法库时加入更多的参数，但是个人认为lambda表达式的捕获功能更加有趣方便，<code>bind()</code>或许可以在已经写好的函数上使用减少代码量，毕竟每一个lambda表达式都需要建立一个新的函数体</p><h2 id="ref-函数" tabindex="-1"><a class="header-anchor" href="#ref-函数"><span>ref()函数</span></a></h2><p>其本质是在模拟引用的行为，实际上并不是真正的引用，由于 <code>bind()</code>函数传递的参数必须拷贝一份过去，本身不支持引用，所以使用 <code>ref()</code>函数创建一个包含了引用的对象拷贝过去</p><p>这大概算是C++标准库设计的一个缺点</p>`,29);function i(d,u){return a(),s("div",null,[c,t(" more -"),l])}const k=n(o,[["render",i],["__file","Lambda.html.vue"]]),b=JSON.parse(`{"path":"/posts/program-language/CPP-notes/Lambda.html","title":"C++的Lambda表达式","lang":"zh-CN","frontmatter":{"date":"2021-01-01T00:00:00.000Z","title":"C++的Lambda表达式","tag":["C++","Lambda表达式","面向对象"],"categories":["C++学习记录"],"mathjax":true,"description":"Lambda表达式真的是我从来没有接触过的一类语法，于C++11中补充 Lambda表达式 C++中存在一类可调用对象，可以通过调用运算符 ()来进行调用 函数就是一种最常见的可调用对象 有时候我们编写函数时会遇到这么一种情况： 我需要在一个函数中调用另一个函数实现具体的功能，调用的函数需要使用到父函数的局部变量，此时如果我把这个变量作为参数传递过去就...","head":[["meta",{"property":"og:url","content":"https://Dnullp.github.io/posts/program-language/CPP-notes/Lambda.html"}],["meta",{"property":"og:site_name","content":"Dnull's Blog"}],["meta",{"property":"og:title","content":"C++的Lambda表达式"}],["meta",{"property":"og:description","content":"Lambda表达式真的是我从来没有接触过的一类语法，于C++11中补充 Lambda表达式 C++中存在一类可调用对象，可以通过调用运算符 ()来进行调用 函数就是一种最常见的可调用对象 有时候我们编写函数时会遇到这么一种情况： 我需要在一个函数中调用另一个函数实现具体的功能，调用的函数需要使用到父函数的局部变量，此时如果我把这个变量作为参数传递过去就..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Dnull"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"Lambda表达式"}],["meta",{"property":"article:tag","content":"面向对象"}],["meta",{"property":"article:published_time","content":"2021-01-01T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C++的Lambda表达式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-01-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dnull\\",\\"url\\":\\"https://Dnullp.github.io\\"}]}"]]},"headers":[{"level":2,"title":"Lambda表达式","slug":"lambda表达式","link":"#lambda表达式","children":[]},{"level":2,"title":"捕获列表","slug":"捕获列表","link":"#捕获列表","children":[]},{"level":2,"title":"结合算法库使用","slug":"结合算法库使用","link":"#结合算法库使用","children":[]},{"level":2,"title":"参数绑定","slug":"参数绑定","link":"#参数绑定","children":[]},{"level":2,"title":"ref()函数","slug":"ref-函数","link":"#ref-函数","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.72,"words":1115},"filePathRelative":"posts/program-language/CPP-notes/Lambda.md","localizedDate":"2021年1月1日","excerpt":"<p>Lambda表达式真的是我从来没有接触过的一类语法，于C++11中补充</p>\\n<!-- more --->\\n<h2>Lambda表达式</h2>\\n<p>C++中存在一类可调用对象，可以通过调用运算符 <code>()</code>来进行调用<br>\\n函数就是一种最常见的可调用对象</p>\\n<p>有时候我们编写函数时会遇到这么一种情况：</p>\\n<p>我需要在一个函数中调用另一个函数实现具体的功能，调用的函数需要使用到父函数的局部变量，此时如果我把这个变量作为参数传递过去就使得函数的原型过于冗杂了，而我又不可能为了一个函数的变量使用而去定义一个全局变量，此时，我们可以使用Lambda表达式来优化代码</p>","autoDesc":true}`);export{k as comp,b as data};
