import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-DCTCPPGQ.js";const e={},p=t(`<h3 id="composite" tabindex="-1"><a class="header-anchor" href="#composite"><span>Composite</span></a></h3><p>还是来自Refactorying·Guru网站的UML图 <img src="https://refactoring.guru/images/patterns/diagrams/composite/structure-en.png" alt="" loading="lazy"></p><p>Composite pattern contains 4 main members:</p><ul><li>Component</li><li>Composite</li><li>Leaf</li><li>Client</li></ul><p>首先介绍一下Composite的思想： 对于一些组成树形结构的对象，由于他们类型不同，在遍历时需要的判断不同的条件</p><p>To simplify the process of traverse, we declare a <strong>interface</strong> Component to do the process when traveling through the node, Leaf and Composite are both implements of the Component, so they can do the same <strong>operation</strong> to finish the tasks.</p><p>There is an example:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">Graphic</span> is
    method <span class="token function">move</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
    method <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Dot</span> <span class="token keyword">implements</span> <span class="token class-name">Graphic</span> is
    field x<span class="token punctuation">,</span> y

    constructor <span class="token class-name">Dot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>

    method <span class="token function">move</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> is
        <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+=</span> x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">+=</span> y

    method <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> is

<span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">extends</span> <span class="token class-name">Dot</span> is
    field radius

    constructor <span class="token class-name">Circle</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> radius<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>

    method <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> is

<span class="token keyword">class</span> <span class="token class-name">CompoundGraphic</span> <span class="token keyword">implements</span> <span class="token class-name">Graphic</span> is
    field children<span class="token operator">:</span> array of <span class="token class-name">Graphic</span>

    method <span class="token function">add</span><span class="token punctuation">(</span>child<span class="token operator">:</span> <span class="token class-name">Graphic</span><span class="token punctuation">)</span> is

    method <span class="token function">remove</span><span class="token punctuation">(</span>child<span class="token operator">:</span> <span class="token class-name">Graphic</span><span class="token punctuation">)</span> is

    method <span class="token function">move</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> is
        foreach <span class="token punctuation">(</span>child in children<span class="token punctuation">)</span> <span class="token keyword">do</span>
            child<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>

    method <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> is

<span class="token keyword">class</span> <span class="token class-name">ImageEditor</span> is
    field all<span class="token operator">:</span> <span class="token class-name">CompoundGraphic</span>

    method <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> is
        all <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompoundGraphic</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        all<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dot</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        all<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    method <span class="token function">groupSelected</span><span class="token punctuation">(</span>components<span class="token operator">:</span> array of <span class="token class-name">Graphic</span><span class="token punctuation">)</span> is
        group <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompoundGraphic</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        foreach <span class="token punctuation">(</span>component in components<span class="token punctuation">)</span> <span class="token keyword">do</span>
            group<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span>
            all<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span>
        all<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span>

        all<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This piece of pseudocode declare <strong>Graphic</strong> as the component, and <strong>Dot</strong>, <strong>Circle</strong> are Leaf. <strong>CompoundGraphic</strong> is the composite, which is able to contain other <strong>Graphic</strong>.</p><h3 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h3><p>组合模式（composite）的主要思想就是一层一层的盒子（composite），盒子组成树形结构，盒子里面可以装其他的物品（Component），这些物品可能是其它类，也可能是盒子</p>`,11),o=[p];function i(c,l){return s(),a("div",null,o)}const m=n(e,[["render",i],["__file","composite.html.vue"]]),d=JSON.parse(`{"path":"/posts/SE/design-pattern/composite.html","title":"Composite pattern","lang":"zh-CN","frontmatter":{"date":"2021-01-01T00:00:00.000Z","title":"Composite pattern","tag":["design-pattern","面向对象"],"categories":["设计模式"],"mathjax":true,"description":"Composite 还是来自Refactorying·Guru网站的UML图 Composite pattern contains 4 main members: Component Composite Leaf Client 首先介绍一下Composite的思想： 对于一些组成树形结构的对象，由于他们类型不同，在遍历时需要的判断不同的条件 To si...","head":[["meta",{"property":"og:url","content":"https://Dnullp.github.io/posts/SE/design-pattern/composite.html"}],["meta",{"property":"og:site_name","content":"Dnull's Blog"}],["meta",{"property":"og:title","content":"Composite pattern"}],["meta",{"property":"og:description","content":"Composite 还是来自Refactorying·Guru网站的UML图 Composite pattern contains 4 main members: Component Composite Leaf Client 首先介绍一下Composite的思想： 对于一些组成树形结构的对象，由于他们类型不同，在遍历时需要的判断不同的条件 To si..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://refactoring.guru/images/patterns/diagrams/composite/structure-en.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"Composite pattern"}],["meta",{"property":"article:author","content":"Dnull"}],["meta",{"property":"article:tag","content":"design-pattern"}],["meta",{"property":"article:tag","content":"面向对象"}],["meta",{"property":"article:published_time","content":"2021-01-01T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Composite pattern\\",\\"image\\":[\\"https://refactoring.guru/images/patterns/diagrams/composite/structure-en.png\\"],\\"datePublished\\":\\"2021-01-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dnull\\",\\"url\\":\\"https://Dnullp.github.io\\"}]}"]]},"headers":[{"level":3,"title":"Composite","slug":"composite","link":"#composite","children":[]},{"level":3,"title":"Summary","slug":"summary","link":"#summary","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.17,"words":351},"filePathRelative":"posts/SE/design-pattern/composite.md","localizedDate":"2021年1月1日","excerpt":"<h3>Composite</h3>\\n<p>还是来自Refactorying·Guru网站的UML图\\n<img src=\\"https://refactoring.guru/images/patterns/diagrams/composite/structure-en.png\\" alt=\\"\\" loading=\\"lazy\\"></p>\\n<p>Composite pattern contains 4 main members:</p>\\n<ul>\\n<li>Component</li>\\n<li>Composite</li>\\n<li>Leaf</li>\\n<li>Client</li>\\n</ul>\\n<p>首先介绍一下Composite的思想：\\n对于一些组成树形结构的对象，由于他们类型不同，在遍历时需要的判断不同的条件</p>","autoDesc":true}`);export{m as comp,d as data};
