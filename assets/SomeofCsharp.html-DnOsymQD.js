import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o as l,c as i,f as u,a as n,d as t,w as e,b as s,e as p}from"./app-DCTCPPGQ.js";const r={},k=p(`<h1 id="foreach" tabindex="-1"><a class="header-anchor" href="#foreach"><span>foreach</span></a></h1><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">forezch</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> element <span class="token keyword">in</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">Writeline</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),d=n("p",null,"诸如此般的用法",-1),m=n("h1",{id:"internal修饰符",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#internal修饰符"},[n("span",null,"internal修饰符")])],-1),v=n("p",null,[s("internal修饰的成员可以被"),n("strong",null,"其所在程序"),s("的所有函数、类调用")],-1),h=n("h1",{id:"ref",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ref"},[n("span",null,"ref")])],-1),b=p(`<div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">ref</span> <span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">,</span><span class="token keyword">ref</span> <span class="token class-name"><span class="token keyword">int</span></span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token operator">&gt;</span>b<span class="token punctuation">?</span>a<span class="token operator">-</span>b<span class="token punctuation">:</span>b<span class="token operator">-</span>a<span class="token punctuation">;</span><span class="token comment">//a,b的值发生改变</span>
<span class="token punctuation">}</span>
<span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">ref</span> a<span class="token punctuation">,</span><span class="token keyword">ref</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="out" tabindex="-1"><a class="header-anchor" href="#out"><span>out</span></a></h1><ul><li>用法与<strong>ref</strong>相同，但是ref不可传入未赋值的变量，<strong>out</strong>可以</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>
<span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">,</span><span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">int</span></span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token operator">&gt;</span>b<span class="token punctuation">?</span>a<span class="token operator">-</span>b<span class="token punctuation">:</span>b<span class="token operator">-</span>a<span class="token punctuation">;</span><span class="token comment">//a,b的值发生改变</span>
<span class="token punctuation">}</span>
<span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">out</span> a<span class="token punctuation">,</span><span class="token keyword">out</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),g={id:"的扩展方法法",tabindex:"-1"},f={class:"header-anchor",href:"#的扩展方法法"},y=p(`<ul><li>每次看到这种东西总是会很兴奋</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringOut</span>
<span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">StringOut_</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name"><span class="token keyword">string</span></span> text<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>像是这样，在一个静态类中定义的静态类，其第一个参数加上this之后<br> 可以产生这种用法：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token string">&quot;33223&quot;</span><span class="token punctuation">.</span><span class="token function">StringOut_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//像这样更加明确的使用方式</span>
    <span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="params" tabindex="-1"><a class="header-anchor" href="#params"><span>params</span></a></h1><ul><li>params <ul><li>传递数目可变的参数</li></ul></li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">UserParame</span><span class="token punctuation">(</span><span class="token keyword">params</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7);function w(_,x){const a=c("Badge");return l(),i("div",null,[k,u(" more "),d,m,v,h,n("ul",null,[n("li",null,[t(a,{type:"danger"},{default:e(()=>[s("中向函数传址时")]),_:1}),t(a,{type:"danger"},{default:e(()=>[s("中向函数传址时")]),_:1}),s("，使用ref")])]),b,n("h1",g,[n("a",f,[n("span",null,[t(a,{type:"danger"},{default:e(()=>[s("的扩展方法")]),_:1}),s("法")])])]),y])}const N=o(r,[["render",w],["__file","SomeofCsharp.html.vue"]]),D=JSON.parse(`{"path":"/posts/program-language/Csharp/SomeofCsharp.html","title":"c#的一些碎片","lang":"zh-CN","frontmatter":{"date":"2021-01-01T00:00:00.000Z","title":"c#的一些碎片","tag":["c#"],"categories":["C#学习记录"],"mathjax":true,"description":"foreach 诸如此般的用法 internal修饰符 internal修饰的成员可以被其所在程序的所有函数、类调用 ref ，使用ref out 用法与ref相同，但是ref不可传入未赋值的变量，out可以 法 每次看到这种东西总是会很兴奋 像是这样，在一个静态类中定义的静态类，其第一个参数加上this之后 可以产生这种用法： params para...","head":[["meta",{"property":"og:url","content":"https://Dnullp.github.io/posts/program-language/Csharp/SomeofCsharp.html"}],["meta",{"property":"og:site_name","content":"Dnull's Blog"}],["meta",{"property":"og:title","content":"c#的一些碎片"}],["meta",{"property":"og:description","content":"foreach 诸如此般的用法 internal修饰符 internal修饰的成员可以被其所在程序的所有函数、类调用 ref ，使用ref out 用法与ref相同，但是ref不可传入未赋值的变量，out可以 法 每次看到这种东西总是会很兴奋 像是这样，在一个静态类中定义的静态类，其第一个参数加上this之后 可以产生这种用法： params para..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Dnull"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:published_time","content":"2021-01-01T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c#的一些碎片\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-01-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dnull\\",\\"url\\":\\"https://Dnullp.github.io\\"}]}"]]},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.03,"words":308},"filePathRelative":"posts/program-language/Csharp/SomeofCsharp.md","localizedDate":"2021年1月1日","excerpt":"\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token class-name\\"><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span></span> a <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\"><span class=\\"token keyword\\">int</span></span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">for</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">int</span></span> i<span class=\\"token operator\\">=</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>i<span class=\\"token operator\\">&lt;</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">;</span>i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    a<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> i<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token function\\">forezch</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">int</span></span> element <span class=\\"token keyword\\">in</span> a<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Writeline</span><span class=\\"token punctuation\\">(</span>element<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}`);export{N as comp,D as data};
