import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,o as s,c as r,a as t,b as e,d as o,e as l}from"./app-DCTCPPGQ.js";const p={},h=t("em",null,"Operating Systems: Three Easy Pieces",-1),c={href:"https://pages.cs.wisc.edu/~remzi/OSTEP/",target:"_blank",rel:"noopener noreferrer"},d=l('<p>This is a online free ebook, and someone recommended it to me.</p><p>I will take down the note and what I thought here, and this is only the record of my learning, so don&#39;t consider it as an authenticated tutorial. However, if I make some mistake, I will be glad you can point out for me.</p><p>&quot;three Pieces&quot; of the book is <em>virtualize</em>, <em>concurrency</em> and <em>persistence</em>, which are also the importance of each chapter.</p><p>Here are several key points below it reveals in the preface:</p><ul><li>What the first of each chapter describes is crux of the problem.</li><li>The timelines shown in the book will be of essence to understand the principle of the device</li><li><strong>Asides</strong> is the relevant but not essential, and <strong>tips</strong> can be used in your system</li><li>There is homework sprinkled in the text</li><li>All the example code is written in C (which I am familiar with)</li></ul><hr><h2 id="冯诺依曼计算机架构" tabindex="-1"><a class="header-anchor" href="#冯诺依曼计算机架构"><span>冯诺依曼计算机架构</span></a></h2><p>intro篇通过冯诺依曼机引入操作系统</p><p>冯诺依曼结构我们在CSAPP中有所了解： 即计算机对于每条指令执行：</p><ul><li>取指</li><li>译码</li><li>执行 （完善之后还有访存和写回阶段） 现在绝大多数计算机都遵循这个架构的设计，但是实际上在每条指令运行的同时，还有很多其他的程序在运行着，目的是为了让计算机变得更容易使用</li></ul><p>试想一下只有这三个操作的计算机，你编写程序时需要先写读取内存的指令，然后如果没有得到结果又要从硬盘中读取指令，然后把指令写入内存，然后......</p><p>OS便是因此诞生的程序，通过将硬件虚拟化，映射到程序中，使得在操作系统之上编写的程序可以简单完成内存管理、并发运行、硬件交互等等</p><p>所有的这些内存、硬件我们都可以看作OS的资源，所以OS又叫做资源管理器（resource manager）</p><h2 id="cpu虚拟化" tabindex="-1"><a class="header-anchor" href="#cpu虚拟化"><span>CPU虚拟化</span></a></h2><p>我们只有一个CPU，但是程序却可以同时运行，这是由操作系统实现的一种假象，实际上CPU在不同程序之间切换来造成一种同时运行程序的假象，这是CPU虚拟化的一个表现</p><p>实际上现代CPU有多个核心，计算机确实可以使用多个核心来真正意义上地实现多线程程序</p><h2 id="内存虚拟化" tabindex="-1"><a class="header-anchor" href="#内存虚拟化"><span>内存虚拟化</span></a></h2><p>每个程序的内存空间和分开的各自的内存空间，我们称为虚拟内存，这些内存地址实际上是随机映射到物理内存上的，所有程序共用一个物理内存，但是OS管理物理内存，并把其分成若干虚拟内存分给各个应用程序使用</p><h2 id="并发运行" tabindex="-1"><a class="header-anchor" href="#并发运行"><span>并发运行</span></a></h2><p>这个主要涉及到多线程部分 这里不得不提一下 <strong>并发（concurrent）</strong> 和 <strong>并行（parallel）</strong> 的区别，并发是指OS同时管理一个程序的很多部分，我们可以编写一个多线程程序，然后OS会根据情况切换CPU的上下文，执行不同的线程，造成计算机同时运行多个线程的假象，实际上只是线程交替运行，这叫并发</p><p>而当我们的CPU有多个处理核心时，OS就会把线程分配到不同的核心上计算，这时才真正实现了多个线程同时进行，这叫并发</p><p>并发可以有效利用有限的计算机资源，比如当一个线程需要向磁盘读取一段数据时，CPU便切换上下文到另一个线程计算，等到磁盘读取完毕后，向OS发送信号，然后再切换回原来的线程继续计算，这样就有效利用了CPU处理的各种空档时间 而并行运算则是利用更多的计算核心协同工作，来提高计算效率</p><h2 id="持久性" tabindex="-1"><a class="header-anchor" href="#持久性"><span>持久性</span></a></h2><p>内存保存数据是不稳定的，当电源切断后，内存中的数据就消失了，所以为了实现持久性，我们将硬件作为I/O设备的形式出现，然后通过磁盘、SSD等I/O设备来完成数据的持久储存</p><p>后面还会讨论更多细节，比如当读写硬盘遇到问题如何反馈，文件系统的数据结构如何高效，如何访问查找数据等等</p><h2 id="os的设计目标" tabindex="-1"><a class="header-anchor" href="#os的设计目标"><span>OS的设计目标</span></a></h2><ul><li>实现硬件设施的抽象</li><li>高性能、节约能源</li><li>进程安全且独立</li><li>OS必须持久可靠</li></ul><h2 id="os的发展历程" tabindex="-1"><a class="header-anchor" href="#os的发展历程"><span>OS的发展历程</span></a></h2><p>最开始，OS只是一系列的标准库，用户可以通过这些标准库来对硬件进行操作，并且这些程序被交给计算机操作员排队批处理（那时候计算机不普及，费用高，使用需要申请使用，类比现在超算）</p><p>但是使用标准库来操作硬件的级别过低，使得用户可以随意更改全部硬件，容易造成错误的访问，所以最初的操作系统引入了一个权限模式，操作系统分为用户模式和内核模式，用户模式可以访问允许的硬件，用户调用系统调用后，操作系统触发中断（trap），进入内核模式，完成系统调用后返回用户模式，再切换回原本的程序运行 这是最开始引入的操作系统的安全性</p><p>然后小型计算机出现，多进程成为了操作系统发展的主要方向，人们希望计算机能够同时进行多个程序的运行，所以内存的保护和中断后上下文的切换等功能的实现成为了当时的主要挑战 这些工作后来由UNIX系统完成并沿用至今日</p><p>之后就是现代操作系统的诞生，不再多讲述</p>',32);function m(u,g){const a=n("ExternalLinkIcon");return s(),r("div",null,[t("p",null,[e("The document I am learning is "),h,e(", and there is the address "),t("a",c,[e("https://pages.cs.wisc.edu/~remzi/OSTEP/"),o(a)]),e(".")]),d])}const S=i(p,[["render",m],["__file","leading-chapter.html.vue"]]),O=JSON.parse(`{"path":"/posts/operating-system/ostep/leading-chapter.html","title":"Operating System Chapter 1","lang":"zh-CN","frontmatter":{"date":"2021-01-01T00:00:00.000Z","title":"Operating System Chapter 1","tag":["operating-system","计算机系统"],"categories":["操作系统","Three-Easy-Pieces"],"mathjax":true,"description":"The document I am learning is Operating Systems: Three Easy Pieces, and there is the address https://pages.cs.wisc.edu/~remzi/OSTEP/. This is a online free ebook, and someone re...","head":[["meta",{"property":"og:url","content":"https://Dnullp.github.io/posts/operating-system/ostep/leading-chapter.html"}],["meta",{"property":"og:site_name","content":"Dnull's Blog"}],["meta",{"property":"og:title","content":"Operating System Chapter 1"}],["meta",{"property":"og:description","content":"The document I am learning is Operating Systems: Three Easy Pieces, and there is the address https://pages.cs.wisc.edu/~remzi/OSTEP/. This is a online free ebook, and someone re..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-14T13:35:40.000Z"}],["meta",{"property":"article:author","content":"Dnull"}],["meta",{"property":"article:tag","content":"operating-system"}],["meta",{"property":"article:tag","content":"计算机系统"}],["meta",{"property":"article:published_time","content":"2021-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-14T13:35:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Operating System Chapter 1\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-14T13:35:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dnull\\",\\"url\\":\\"https://Dnullp.github.io\\"}]}"]]},"headers":[{"level":2,"title":"冯诺依曼计算机架构","slug":"冯诺依曼计算机架构","link":"#冯诺依曼计算机架构","children":[]},{"level":2,"title":"CPU虚拟化","slug":"cpu虚拟化","link":"#cpu虚拟化","children":[]},{"level":2,"title":"内存虚拟化","slug":"内存虚拟化","link":"#内存虚拟化","children":[]},{"level":2,"title":"并发运行","slug":"并发运行","link":"#并发运行","children":[]},{"level":2,"title":"持久性","slug":"持久性","link":"#持久性","children":[]},{"level":2,"title":"OS的设计目标","slug":"os的设计目标","link":"#os的设计目标","children":[]},{"level":2,"title":"OS的发展历程","slug":"os的发展历程","link":"#os的发展历程","children":[]}],"git":{"createdTime":1712936892000,"updatedTime":1713101740000,"contributors":[{"name":"DnullP","email":"dnull123p@gmail.com","commits":2}]},"readingTime":{"minutes":4.98,"words":1494},"filePathRelative":"posts/operating-system/ostep/leading-chapter.md","localizedDate":"2021年1月1日","excerpt":"<p>The document I am learning is <em>Operating Systems: Three Easy Pieces</em>, and there is the address <a href=\\"https://pages.cs.wisc.edu/~remzi/OSTEP/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://pages.cs.wisc.edu/~remzi/OSTEP/</a>.</p>\\n<p>This is a online free ebook, and someone recommended it to me.</p>","autoDesc":true}`);export{S as comp,O as data};
