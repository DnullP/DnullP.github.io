import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as t,a as p,e}from"./app-DCTCPPGQ.js";const o={},c=p("p",null,"关于二分的精度的问题的记录",-1),l=e(`<p>在进行实数范围的二分时，应该据情况控制二分的精度范围：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;utility&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iomanip&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">double</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">8.0</span> <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">4.0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">7.0</span> <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">6.0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">double</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">double</span> Y<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">double</span> l <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">100.0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">&gt;</span> <span class="token number">1e-13</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">double</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">cal</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span> <span class="token operator">&gt;</span> Y<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1e-14</span><span class="token punctuation">;</span><span class="token comment">//there to control the accuracy</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1e-14</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> T<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> fixed <span class="token operator">&lt;&lt;</span> <span class="token function">setprecision</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">&gt;&gt;</span> T<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> T<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">double</span> Y<span class="token punctuation">;</span>
            cin <span class="token operator">&gt;&gt;</span> Y<span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>Y <span class="token operator">&lt;</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> Y <span class="token operator">&gt;</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;No solution!&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            cout <span class="token operator">&lt;&lt;</span> <span class="token function">find</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>小数间的比较要相减再在精度范围内比较</li><li>左右边界改变时要加减上对应的精度</li></ul>`,3);function i(u,r){return s(),a("div",null,[c,t(" more -"),l])}const m=n(o,[["render",i],["__file","Dichotomy.html.vue"]]),v=JSON.parse(`{"path":"/posts/algorithm/oi/learning-note/Dichotomy.html","title":"二分及精度问题","lang":"zh-CN","frontmatter":{"date":"2021-01-01T00:00:00.000Z","title":"二分及精度问题","tag":["二分"],"categories":["OI算法和数据结构"],"mathjax":true,"description":"关于二分的精度的问题的记录 在进行实数范围的二分时，应该据情况控制二分的精度范围： 小数间的比较要相减再在精度范围内比较 左右边界改变时要加减上对应的精度 ","head":[["meta",{"property":"og:url","content":"https://Dnullp.github.io/posts/algorithm/oi/learning-note/Dichotomy.html"}],["meta",{"property":"og:site_name","content":"Dnull's Blog"}],["meta",{"property":"og:title","content":"二分及精度问题"}],["meta",{"property":"og:description","content":"关于二分的精度的问题的记录 在进行实数范围的二分时，应该据情况控制二分的精度范围： 小数间的比较要相减再在精度范围内比较 左右边界改变时要加减上对应的精度 "}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-14T13:35:40.000Z"}],["meta",{"property":"article:author","content":"Dnull"}],["meta",{"property":"article:tag","content":"二分"}],["meta",{"property":"article:published_time","content":"2021-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-14T13:35:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"二分及精度问题\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-14T13:35:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dnull\\",\\"url\\":\\"https://Dnullp.github.io\\"}]}"]]},"headers":[],"git":{"createdTime":1712936892000,"updatedTime":1713101740000,"contributors":[{"name":"DnullP","email":"dnull123p@gmail.com","commits":2}]},"readingTime":{"minutes":0.72,"words":216},"filePathRelative":"posts/algorithm/oi/learning-note/Dichotomy.md","localizedDate":"2021年1月1日","excerpt":"<p>关于二分的精度的问题的记录</p>\\n<!-- more --->\\n<p>在进行实数范围的二分时，应该据情况控制二分的精度范围：</p>\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;cstdio&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;utility&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;algorithm&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;iomanip&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;cmath&gt;</span></span>\\n\\n<span class=\\"token keyword\\">using</span> <span class=\\"token keyword\\">namespace</span> std<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">double</span> <span class=\\"token function\\">cal</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">double</span> x<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">8.0</span> <span class=\\"token operator\\">*</span> <span class=\\"token function\\">pow</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">4.0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> <span class=\\"token number\\">7.0</span> <span class=\\"token operator\\">*</span> <span class=\\"token function\\">pow</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">3.0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> <span class=\\"token number\\">2.0</span> <span class=\\"token operator\\">*</span> <span class=\\"token function\\">pow</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2.0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> <span class=\\"token number\\">3.0</span> <span class=\\"token operator\\">*</span> <span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> <span class=\\"token number\\">6.0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">double</span> <span class=\\"token function\\">find</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">double</span> Y<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">double</span> l <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0.0</span><span class=\\"token punctuation\\">,</span> r <span class=\\"token operator\\">=</span> <span class=\\"token number\\">100.0</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>r <span class=\\"token operator\\">-</span> l <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">1e-13</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">double</span> mid <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>l <span class=\\"token operator\\">+</span> r<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">/</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token function\\">cal</span><span class=\\"token punctuation\\">(</span>mid<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&gt;</span> Y<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n            r <span class=\\"token operator\\">=</span> mid <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1e-14</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//there to control the accuracy</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">else</span>\\n        <span class=\\"token punctuation\\">{</span>\\n            l <span class=\\"token operator\\">=</span> mid <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1e-14</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">(</span>l <span class=\\"token operator\\">+</span> r<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">/</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> T<span class=\\"token punctuation\\">;</span>\\n    cout <span class=\\"token operator\\">&lt;&lt;</span> fixed <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token function\\">setprecision</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>cin <span class=\\"token operator\\">&gt;&gt;</span> T<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;=</span> T<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">double</span> Y<span class=\\"token punctuation\\">;</span>\\n            cin <span class=\\"token operator\\">&gt;&gt;</span> Y<span class=\\"token punctuation\\">;</span>\\n\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>Y <span class=\\"token operator\\">&lt;</span> <span class=\\"token function\\">cal</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">||</span> Y <span class=\\"token operator\\">&gt;</span> <span class=\\"token function\\">cal</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">100</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">{</span>\\n                cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"No solution!\\"</span> <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">continue</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n\\n            cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token function\\">find</span><span class=\\"token punctuation\\">(</span>Y<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}`);export{m as comp,v as data};
