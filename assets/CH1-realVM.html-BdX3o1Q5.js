import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as l,e as t,a as s,b as a}from"./app-DCTCPPGQ.js";const i={},p=t('<p>这一章讲了在VAX/VMS和Linux中的真实虚拟化机制, 关于Linux的详细机制我们后续还有更多值得学习的东西, 我们在这里只记录其中使用的一些优化机制</p><h1 id="vax-vms" tabindex="-1"><a class="header-anchor" href="#vax-vms"><span>VAX/VMS</span></a></h1><p>由于VAX/VMS系统的页大小过小, 导致page table过大, 所以为了减小PT的大小, VAX/VMS采用了以下的机制:</p><h2 id="使用段机制" tabindex="-1"><a class="header-anchor" href="#使用段机制"><span>使用段机制</span></a></h2><p>段机制在之前说过了, 为了减少页表大小, 通过段页式内存管理来实现</p><h2 id="系统区域" tabindex="-1"><a class="header-anchor" href="#系统区域"><span>系统区域</span></a></h2>',6),m=s("p",null,[a("每个进程有三个区域(段), 分别是"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"P"),s("mn",null,"0")])]),s("annotation",{encoding:"application/x-tex"},"P_0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"P"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.1389em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"0")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),a(", "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"P"),s("mn",null,"1")])]),s("annotation",{encoding:"application/x-tex"},"P_1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"P"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.1389em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"1")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),a(", "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"S"),s("mn",null,"0")])]),s("annotation",{encoding:"application/x-tex"},"S_0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0576em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"0")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),a(", 前两个区域分别是代码段+栈和堆, PT映射到进程对应的物理内存区域, 而"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"S"),s("mn",null,"0")])]),s("annotation",{encoding:"application/x-tex"},"S_0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0576em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"0")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),a("区域是系统区域, 存放了OS的代码和数据, 包括Trap Table等内核态需要的数据, 这个区域是所有进程共享的, 映射到同一片物理内存之中")],-1),r=t(`<div class="language-Mermaid line-numbers-mode" data-ext="Mermaid" data-title="Mermaid"><pre class="language-Mermaid"><code>graph TB
subgraph 进程A
    A[P_0]
    B[P_1]
    C[S_0]
end
subgraph 进程B
    D[P_0]
    E[P_1]
    F[S_0]
end
subgraph 系统代码
    G[Trap Table]
    H[kernal data]
    I[kernal code]
    J[kernal heap]
end
A --&gt; 段页表1
B --&gt; 段页表2
C --&gt; 系统代码
D --&gt; 段页表3
E --&gt; 段页表4
F --&gt; 系统代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),c=s("p",null,[a("我们之前如果需要系统调用, 需要调用事先编写好的库, 然后传入参数, 这些参数和syscall的代码被放到指定的寄存器中, 然后通过"),s("code",null,"int"),a("指令触发中断, 进入内核态, 进程阻塞, 然后OS查找并执行相应的系统调用, 如果传递的参数是个指针还需要找到对应的物理地址再传递给系统调用, 完成后返回结果, 并回到用户态, 进程恢复 但是如果将OS虚拟化并跟到进程后面, 系统调用的所有参数都可以只传递一个指针, 因为所有的进程数据对于OS都是可见的 不过相对的, 进程也有可能去读写OS的数据, 所以"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"S"),s("mn",null,"0")])]),s("annotation",{encoding:"application/x-tex"},"S_0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0576em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"0")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),a("区域需要设置特别的保护等级")],-1),h=s("h2",{id:"页表查询",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#页表查询"},[s("span",null,"页表查询")])],-1),o=s("p",null,[a("VAX/VMS系统将进程的页表储存在虚拟化的OS区域中, 也就是进程对应的"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"S"),s("mn",null,"0")])]),s("annotation",{encoding:"application/x-tex"},"S_0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0576em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"0")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),a("区域, 如果页表过大时, 我们可以采用虚拟内存的方式, 将一部分页表存入磁盘, 使用类似的方式实现驱逐和置换, 提供更大的页表空间 正常情况下的地址翻译, OS可以直接查找到物理内存中的页表, 并查询返回, 但是这里的页表中间隔了一层虚拟化, 所以需要先查询虚拟内存中页表的物理地址(这也就产生了新的一部分页表, 这一部分必须储存在物理内存中), 然后再在物理内存中找到对应的页表, 完成查询")],-1),g=t('<p>这是一个时间换空间的策略</p><h2 id="页置换策略" tabindex="-1"><a class="header-anchor" href="#页置换策略"><span>页置换策略</span></a></h2><p>VAX/VMS系统使用了<strong>FIFO置换策略</strong>, 为了缓解<strong>memory hog</strong>的问题(使得进程的内存使用更公平)</p><p>但是由于<strong>FIFO</strong>对于内存命中率的优化不足, 所以开发者采用了以下的优化策略:</p><ul><li>建立两个队列, 一个储存未修改的页, 一个储存修改的页</li><li>每个进程有一个<strong>RSS(Resident Set Size)</strong>, 当内存中页的数量大于RSS时, 采用FIFO, 将其置入上面提到的两个队列中, 如果需要一个新的页时, 进程就可以从上面两个队列选取一个页置换掉(优先选择未修改的页)</li><li>如果一个进程重新使用一个已经进入队列的页, 则将其从队列中移除</li></ul><h2 id="懒惰机制" tabindex="-1"><a class="header-anchor" href="#懒惰机制"><span>懒惰机制</span></a></h2><p>懒惰机制就是在需要时再进行必要的操作, 否则只是假定这些工作已经完成了, 线段树中就有明显的使用</p><p>在VAX/VMA中的内存管理也使用了懒机制 我们给每个内存页添加上一个系统保护位, 当一个内存页被分配时, 可能需要将其数据全部清0, 但是这个操作非常费时, 所以我们一开始并不执行这个操作 当我们确实需要对这个页面进行修改读取时, OS检测到系统保护位, 产生一个中断, 然后OS会检测这个区域是否是需要全部清零并且是进程可访问的, 然后再清零后去除保护位</p><p>除此之外, 写时复制(copy-on-write)也是懒惰机制之一, 当我们复制一个页面时, 只是将虚拟地址映射到同一个物理地址中, 并没有实际复制, 只是给该页打上了一个COW的标记, 然后如果要修改一个页时, 如果检测到COW标记, 则OS会在物理地址中复制一个新的页, 再将虚拟地址重映射的该页面上</p><h2 id="ast和efc机制" tabindex="-1"><a class="header-anchor" href="#ast和efc机制"><span>AST和EFC机制</span></a></h2><p>略</p><hr><h1 id="linux" tabindex="-1"><a class="header-anchor" href="#linux"><span>linux</span></a></h1><h2 id="地址空间" tabindex="-1"><a class="header-anchor" href="#地址空间"><span>地址空间</span></a></h2><p>Linux的地址空间包括用户空间和内核空间, 其中的内核空间包括了<strong>逻辑内核空间(logical kernel space)<strong>和</strong>虚拟内核空间(virtual kernel space)</strong></p><p>逻辑内核空间的虚拟地址和物理地址是从0开始一一对应的, 比如虚拟地址的<code>0x12345</code>对应的物理地址就是<code>0x12345</code>. 此外, 逻辑内核空间的页无法被交换到磁盘中.</p><p>虚拟内核空间可以看作一般的虚拟内存, 其是为了扩展逻辑内核空间的大小(逻辑内核空间只有大约1G)</p><h2 id="地址结构" tabindex="-1"><a class="header-anchor" href="#地址结构"><span>地址结构</span></a></h2><p>Linux使用四级页表, 每一级页表地址占9位, 地址偏移占12位, 结构如下:</p><table><thead><tr><th style="text-align:center;">Unused 16bits</th><th style="text-align:center;">PML4E 9bits</th><th style="text-align:center;">PDPTE 9bits</th><th style="text-align:center;">PDE 9bits</th><th style="text-align:center;">PTE 9bits</th><th style="text-align:center;">Offset 12bits</th></tr></thead></table><h2 id="大页" tabindex="-1"><a class="header-anchor" href="#大页"><span>大页</span></a></h2><p>随着OS发展, 页面大小可以采用更大的选择, 从而缩减页表大小, 提高TLB命中率 缺点是增加了内部碎片的数量</p><h2 id="页缓存-page-cache" tabindex="-1"><a class="header-anchor" href="#页缓存-page-cache"><span>页缓存(page cache)</span></a></h2><p>页缓存相当于用内存做磁盘上的一些数据的缓存, 包括<strong>内存映射文件(memory mapped file)<strong>和</strong>匿名页缓存(anonymous page cache)</strong> 和设备数据</p><p>系统如果对一个文件(设备)有一个较为频繁的读写的话, 我们可以将其先读入内存中, 在更高速的内存中国对其进行修改读写, 在完成后再写回磁盘中, 可以有效提高磁盘读写效率</p><h2 id="页交换" tabindex="-1"><a class="header-anchor" href="#页交换"><span>页交换</span></a></h2><p>Linux的页交换策略使用的2Q算法</p><p>简单来说, 2Q算法将内存中的页分为两个队列, 一个是<strong>最近使用的队列(RUQ)</strong>, 一个<strong>是先进先出队列(FIFO)</strong>, 当一个页进入内存时, 先进入FIFO队列, 如果FIFO队列中的页被再次访问, 则将其选入RUQ之中</p><p>如果有一个新页面, 则加入FIFO队列,如果此时队列已满, 那么队尾的页面就会被完全驱逐 如果有一个页面被提升到RUQ, 则按照LRU的策略驱逐最久未使用的页面(使用时钟算法近似)</p>',29),d=[p,m,r,c,h,o,g];function u(v,x){return e(),l("div",null,d)}const S=n(i,[["render",u],["__file","CH1-realVM.html.vue"]]),M=JSON.parse(`{"path":"/posts/operating-system/ostep/CH1-realVM.html","title":"两个OS中的真实虚拟化机制","lang":"zh-CN","frontmatter":{"title":"两个OS中的真实虚拟化机制","tag":["operating-system","Three-Easy-Pieces","linux","VAX/VMS"],"categories":["操作系统","Three-Easy-Pieces"],"math":true,"date":"2023-03-09T00:00:00.000Z","mermaid":true,"description":"这一章讲了在VAX/VMS和Linux中的真实虚拟化机制, 关于Linux的详细机制我们后续还有更多值得学习的东西, 我们在这里只记录其中使用的一些优化机制 VAX/VMS 由于VAX/VMS系统的页大小过小, 导致page table过大, 所以为了减小PT的大小, VAX/VMS采用了以下的机制: 使用段机制 段机制在之前说过了, 为了减少页表大小...","head":[["meta",{"property":"og:url","content":"https://Dnullp.github.io/posts/operating-system/ostep/CH1-realVM.html"}],["meta",{"property":"og:site_name","content":"Dnull's Blog"}],["meta",{"property":"og:title","content":"两个OS中的真实虚拟化机制"}],["meta",{"property":"og:description","content":"这一章讲了在VAX/VMS和Linux中的真实虚拟化机制, 关于Linux的详细机制我们后续还有更多值得学习的东西, 我们在这里只记录其中使用的一些优化机制 VAX/VMS 由于VAX/VMS系统的页大小过小, 导致page table过大, 所以为了减小PT的大小, VAX/VMS采用了以下的机制: 使用段机制 段机制在之前说过了, 为了减少页表大小..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-14T13:35:40.000Z"}],["meta",{"property":"article:author","content":"Dnull"}],["meta",{"property":"article:tag","content":"operating-system"}],["meta",{"property":"article:tag","content":"Three-Easy-Pieces"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:tag","content":"VAX/VMS"}],["meta",{"property":"article:published_time","content":"2023-03-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-14T13:35:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"两个OS中的真实虚拟化机制\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-09T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-14T13:35:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dnull\\",\\"url\\":\\"https://Dnullp.github.io\\"}]}"]]},"headers":[{"level":2,"title":"使用段机制","slug":"使用段机制","link":"#使用段机制","children":[]},{"level":2,"title":"系统区域","slug":"系统区域","link":"#系统区域","children":[]},{"level":2,"title":"页表查询","slug":"页表查询","link":"#页表查询","children":[]},{"level":2,"title":"页置换策略","slug":"页置换策略","link":"#页置换策略","children":[]},{"level":2,"title":"懒惰机制","slug":"懒惰机制","link":"#懒惰机制","children":[]},{"level":2,"title":"AST和EFC机制","slug":"ast和efc机制","link":"#ast和efc机制","children":[]},{"level":2,"title":"地址空间","slug":"地址空间","link":"#地址空间","children":[]},{"level":2,"title":"地址结构","slug":"地址结构","link":"#地址结构","children":[]},{"level":2,"title":"大页","slug":"大页","link":"#大页","children":[]},{"level":2,"title":"页缓存(page cache)","slug":"页缓存-page-cache","link":"#页缓存-page-cache","children":[]},{"level":2,"title":"页交换","slug":"页交换","link":"#页交换","children":[]}],"git":{"createdTime":1712936892000,"updatedTime":1713101740000,"contributors":[{"name":"DnullP","email":"dnull123p@gmail.com","commits":2}]},"readingTime":{"minutes":6.13,"words":1840},"filePathRelative":"posts/operating-system/ostep/CH1-realVM.md","localizedDate":"2023年3月9日","excerpt":"<p>这一章讲了在VAX/VMS和Linux中的真实虚拟化机制, 关于Linux的详细机制我们后续还有更多值得学习的东西, 我们在这里只记录其中使用的一些优化机制</p>\\n<h1>VAX/VMS</h1>\\n<p>由于VAX/VMS系统的页大小过小, 导致page table过大, 所以为了减小PT的大小, VAX/VMS采用了以下的机制:</p>\\n<h2>使用段机制</h2>\\n<p>段机制在之前说过了, 为了减少页表大小, 通过段页式内存管理来实现</p>\\n<h2>系统区域</h2>\\n<p>每个进程有三个区域(段), 分别是<span v-pre=\\"\\" class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><msub><mi>P</mi><mn>0</mn></msub></mrow><annotation encoding=\\"application/x-tex\\">P_0</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:0.8333em;vertical-align:-0.15em;\\"></span><span class=\\"mord\\"><span class=\\"mord mathnormal\\" style=\\"margin-right:0.13889em;\\">P</span><span class=\\"msupsub\\"><span class=\\"vlist-t vlist-t2\\"><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height:0.3011em;\\"><span style=\\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\\"><span class=\\"pstrut\\" style=\\"height:2.7em;\\"></span><span class=\\"sizing reset-size6 size3 mtight\\"><span class=\\"mord mtight\\">0</span></span></span></span><span class=\\"vlist-s\\">​</span></span><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height:0.15em;\\"><span></span></span></span></span></span></span></span></span></span>, <span v-pre=\\"\\" class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><msub><mi>P</mi><mn>1</mn></msub></mrow><annotation encoding=\\"application/x-tex\\">P_1</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:0.8333em;vertical-align:-0.15em;\\"></span><span class=\\"mord\\"><span class=\\"mord mathnormal\\" style=\\"margin-right:0.13889em;\\">P</span><span class=\\"msupsub\\"><span class=\\"vlist-t vlist-t2\\"><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height:0.3011em;\\"><span style=\\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\\"><span class=\\"pstrut\\" style=\\"height:2.7em;\\"></span><span class=\\"sizing reset-size6 size3 mtight\\"><span class=\\"mord mtight\\">1</span></span></span></span><span class=\\"vlist-s\\">​</span></span><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height:0.15em;\\"><span></span></span></span></span></span></span></span></span></span>, <span v-pre=\\"\\" class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><msub><mi>S</mi><mn>0</mn></msub></mrow><annotation encoding=\\"application/x-tex\\">S_0</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:0.8333em;vertical-align:-0.15em;\\"></span><span class=\\"mord\\"><span class=\\"mord mathnormal\\" style=\\"margin-right:0.05764em;\\">S</span><span class=\\"msupsub\\"><span class=\\"vlist-t vlist-t2\\"><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height:0.3011em;\\"><span style=\\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\\"><span class=\\"pstrut\\" style=\\"height:2.7em;\\"></span><span class=\\"sizing reset-size6 size3 mtight\\"><span class=\\"mord mtight\\">0</span></span></span></span><span class=\\"vlist-s\\">​</span></span><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height:0.15em;\\"><span></span></span></span></span></span></span></span></span></span>, 前两个区域分别是代码段+栈和堆, PT映射到进程对应的物理内存区域, 而<span v-pre=\\"\\" class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><msub><mi>S</mi><mn>0</mn></msub></mrow><annotation encoding=\\"application/x-tex\\">S_0</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:0.8333em;vertical-align:-0.15em;\\"></span><span class=\\"mord\\"><span class=\\"mord mathnormal\\" style=\\"margin-right:0.05764em;\\">S</span><span class=\\"msupsub\\"><span class=\\"vlist-t vlist-t2\\"><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height:0.3011em;\\"><span style=\\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\\"><span class=\\"pstrut\\" style=\\"height:2.7em;\\"></span><span class=\\"sizing reset-size6 size3 mtight\\"><span class=\\"mord mtight\\">0</span></span></span></span><span class=\\"vlist-s\\">​</span></span><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height:0.15em;\\"><span></span></span></span></span></span></span></span></span></span>区域是系统区域, 存放了OS的代码和数据, 包括Trap Table等内核态需要的数据, 这个区域是所有进程共享的, 映射到同一片物理内存之中</p>","autoDesc":true}`);export{S as comp,M as data};
