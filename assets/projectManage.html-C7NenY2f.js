import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as n,e as o}from"./app-DCTCPPGQ.js";const l={},t=o(`<p>本文只是个人学习的知识整理和记录, 不含有教程性质, 仅供参考</p><h1 id="golang的项目管理基础" tabindex="-1"><a class="header-anchor" href="#golang的项目管理基础"><span>Golang的项目管理基础</span></a></h1><p>[toc]</p><p>这里要讨论的内容主要包括:</p><ul><li>golang的依赖管理</li><li>golang的模块</li><li>golang的package</li><li>golang的workspace</li></ul><p>我们层层递进介绍每一个级别的管理在做什么</p><h2 id="文件" tabindex="-1"><a class="header-anchor" href="#文件"><span>文件</span></a></h2><p>golang的源码文件格式为<code>xxx.go</code>, 每个文件都必须归属于一个package, 这个package我们在程序的第一行声明, 例如:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> calc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>文件是我们实现源代码的位置</p><h2 id="package" tabindex="-1"><a class="header-anchor" href="#package"><span>package</span></a></h2><p>package是golang组织和管理代码的基本单位, 每个文件都必须归属于一个package. 我们规定同一个目录下的所有文件都归属于同一个package, 除了<code>xxx_test</code>包可以和对应的被测试包在同一个目录下</p><ul><li>属于同一个package的文件可以互相访问对方的变量和函数</li><li>package的名字可以和目录名不同, 但是需要注意: <ul><li>import一个包时是通过目录名字引入的</li><li>使用一个包时是通过package name使用的</li></ul></li></ul><p>比如我存在以下目录:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>- tttt
    - walk.go
    - walk_test.go
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我在import walk时需要使用<code>import &quot;path_to_module/tttt&quot;</code>, 但是使用时需要根据<code>walk.go</code>设定的package name来使用: <code>walk.Walk()</code></p><p>package导出的变量和函数的规则和struct一样, 首字母大写的变量和函数可以被外部包访问, 小写的变量和函数只能在内部包内部访问</p><p>包之间可以进行相互嵌套, 此时如果你要导入一个嵌套的package, 我们使用的是目录来导入, 类似于以下结构<code>module/path/to/the/package</code>, 这个路径是相对于module而言的路径</p><h2 id="module" tabindex="-1"><a class="header-anchor" href="#module"><span>module</span></a></h2><p>模块是golang管理项目的基本单位, 一个项目需要的依赖和包的管理都在moddule中完成</p><p>为了建立一个module, 我们需要先在我们的目录之下执行<code>go mod init module_name</code>指令, 这个指令会创建一个<code>go.mod</code>文件, 这个文件记录了我们的module的名字和依赖</p><p>一个<code>go.mod</code>就声明了一个模块, 其对应目录下的所有文件和package都属于这个模块, 当我们想要引入一个package时, 需要通过对应的module路径来引入, 比如我们有以下目录:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>work
│   go.mod
│   go.sum
│
├───main
│       main.go
│
└───walk
        walk.go
        walk_test.go
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在main中导入walk时, 需要使用<code>import &quot;work/walk&quot;</code> 依赖通过<code>go.mod</code>来管理, 如果使用的是本地module, 则使用<code>import + 相对路径</code>或者在<code>go.mod</code>中添加<code>require + &quot;package name&quot;</code> 和 <code>replace + &quot;package name&quot; =&gt; &quot;path to package&quot;</code>来指定本地module的位置, 如下:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>module work

<span class="token keyword">go</span> <span class="token number">1.16</span>

require <span class="token punctuation">(</span>
    github<span class="token punctuation">.</span>com<span class="token operator">/</span>urfave<span class="token operator">/</span>cli<span class="token operator">/</span>v2 v2<span class="token punctuation">.</span><span class="token number">3.0</span>
<span class="token punctuation">)</span>

replace github<span class="token punctuation">.</span>com<span class="token operator">/</span>urfave<span class="token operator">/</span>cli<span class="token operator">/</span>v2 <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>cli<span class="token operator">/</span>v2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后就可以直接导入<code>import &quot;github.com/urfave/cli/v2&quot;</code>了</p><h2 id="workspace" tabindex="-1"><a class="header-anchor" href="#workspace"><span>workspace</span></a></h2><p>我们可以建立一个workspace, 通过<code>go.work</code>配置来让多个模块可以协同工作, 类似于使用replace的导入方式, 但是指定workspace可以让全部模块互相调用, 而不用在各自的<code>go.mod</code>中配置</p>`,28),s=[t];function c(p,i){return a(),n("div",null,s)}const g=e(l,[["render",c],["__file","projectManage.html.vue"]]),u=JSON.parse(`{"path":"/posts/program-language/golang-basic/projectManage.html","title":"Golang的项目管理基础","lang":"zh-CN","frontmatter":{"title":"Golang的项目管理基础","tag":["golang","编程语言"],"categories":["golang"],"mathjax":true,"mermaid":true,"date":"2023-07-27T00:00:00.000Z","description":"本文只是个人学习的知识整理和记录, 不含有教程性质, 仅供参考 Golang的项目管理基础 [toc] 这里要讨论的内容主要包括: golang的依赖管理 golang的模块 golang的package golang的workspace 我们层层递进介绍每一个级别的管理在做什么 文件 golang的源码文件格式为xxx.go, 每个文件都必须归属于一...","head":[["meta",{"property":"og:url","content":"https://Dnullp.github.io/posts/program-language/golang-basic/projectManage.html"}],["meta",{"property":"og:site_name","content":"Dnull's Blog"}],["meta",{"property":"og:title","content":"Golang的项目管理基础"}],["meta",{"property":"og:description","content":"本文只是个人学习的知识整理和记录, 不含有教程性质, 仅供参考 Golang的项目管理基础 [toc] 这里要讨论的内容主要包括: golang的依赖管理 golang的模块 golang的package golang的workspace 我们层层递进介绍每一个级别的管理在做什么 文件 golang的源码文件格式为xxx.go, 每个文件都必须归属于一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Dnull"}],["meta",{"property":"article:tag","content":"golang"}],["meta",{"property":"article:tag","content":"编程语言"}],["meta",{"property":"article:published_time","content":"2023-07-27T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Golang的项目管理基础\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-27T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dnull\\",\\"url\\":\\"https://Dnullp.github.io\\"}]}"]]},"headers":[{"level":2,"title":"文件","slug":"文件","link":"#文件","children":[]},{"level":2,"title":"package","slug":"package","link":"#package","children":[]},{"level":2,"title":"module","slug":"module","link":"#module","children":[]},{"level":2,"title":"workspace","slug":"workspace","link":"#workspace","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.6,"words":781},"filePathRelative":"posts/program-language/golang-basic/projectManage.md","localizedDate":"2023年7月27日","excerpt":"<p>本文只是个人学习的知识整理和记录, 不含有教程性质, 仅供参考</p>\\n<h1>Golang的项目管理基础</h1>\\n<p>[toc]</p>\\n<p>这里要讨论的内容主要包括:</p>\\n<ul>\\n<li>golang的依赖管理</li>\\n<li>golang的模块</li>\\n<li>golang的package</li>\\n<li>golang的workspace</li>\\n</ul>\\n<p>我们层层递进介绍每一个级别的管理在做什么</p>\\n<h2>文件</h2>\\n<p>golang的源码文件格式为<code>xxx.go</code>, 每个文件都必须归属于一个package, 这个package我们在程序的第一行声明, 例如:</p>","autoDesc":true}`);export{g as comp,u as data};
