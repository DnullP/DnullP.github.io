import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as t,e as l,a as s}from"./app-DCTCPPGQ.js";const e="/assets/1_1-BvwAPj8j.png",p="/assets/1_2-DZ-dQJmA.png",o="/assets/1_3-DUTZAp54.png",c="/assets/1_5-DvyD-Ctq.png",r={},i=l('<h1 id="基础二分" tabindex="-1"><a class="header-anchor" href="#基础二分"><span>基础二分</span></a></h1><h3 id="二分查找" tabindex="-1"><a class="header-anchor" href="#二分查找"><span>二分查找</span></a></h3><p>从有序序列中查找某个值的位置 <strong>STL</strong>：lower_bound()、upper_bound</p><hr><h3 id="二分答案" tabindex="-1"><a class="header-anchor" href="#二分答案"><span>二分答案</span></a></h3><p>通过判断某个条件是否满足，对一个范围内的答案进行二分</p><p><strong>最简单的实例</strong>： 给出一个1~100范围内的随机数，要求你用最少的次数猜中这个数字</p><hr><p><img src="'+e+`" alt="" loading="lazy">)</p><hr><h3 id="二分查找与二分答案的联系" tabindex="-1"><a class="header-anchor" href="#二分查找与二分答案的联系"><span>二分查找与二分答案的联系</span></a></h3><p><strong>二分答案</strong>是某个连续区间内的<strong>二分查找</strong></p><hr><h3 id="二分边界的判断" tabindex="-1"><a class="header-anchor" href="#二分边界的判断"><span>二分边界的判断</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>L <span class="token operator">&lt;</span> R<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>L <span class="token operator">+</span> R<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        L <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span><span class="token punctuation">{</span>
        R <span class="token operator">=</span> mid<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实数范围内的二分" tabindex="-1"><a class="header-anchor" href="#实数范围内的二分"><span>实数范围内的二分</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>L <span class="token operator">&lt;</span> R<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>L <span class="token operator">+</span> R<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        L <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">0.0001</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span><span class="token punctuation">{</span>
        R <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">0.0001</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><img src="`+p+'" alt="" loading="lazy">)</p><h1 id="二分题目的考法" tabindex="-1"><a class="header-anchor" href="#二分题目的考法"><span>二分题目的考法</span></a></h1><p>二分题目不会单独考二分，而是作为解题的一个关键思路：</p><p>关键词：<strong>最小值最大</strong>和<strong>最大值最小</strong></p><p><img src="'+o+'" alt="" loading="lazy">)</p><p><strong>二分思路</strong>：</p><ol><li>首先确定二分区间，这里最保守的答案范围是最小边的长度和所有边的总长度</li><li>然后检测mid是否满足条件，当mid作为最小长度的最大值时，无法修建出这样的赛道，说明答案应该大于mid，取右区间，如果可以修建，说明答案应该小于等于mid，取左区间</li><li>当<code>L&gt;=R</code>时，得到确定的答案</li></ol><hr><p><img src="'+c+'" alt="" loading="lazy">)</p><p><strong>二分思路</strong>：</p><ol><li>首先确定二分范围是最小的岩石距离和所有岩石的距离和</li><li>然后检测mid是否满足条件，如果通过某种方案移走石头可以使mid满足条件，则说明答案大于mid，反之则小于mid</li><li>当<code>L&gt;R</code>时，得到答案</li></ol><h3 id="上面的二分题目到底在求解什么" tabindex="-1"><a class="header-anchor" href="#上面的二分题目到底在求解什么"><span>上面的二分题目到底在求解什么？</span></a></h3><p>我们直观的看到，上面关于二分答案的题目都是在求<strong>最大值</strong>、<strong>最小值</strong></p><p>而最大值最小值都是一种<strong>边界</strong></p><h3 id="二分算法的概念" tabindex="-1"><a class="header-anchor" href="#二分算法的概念"><span>二分算法的概念</span></a></h3>',33),m=s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"对于一个命题"),s("mi",null,"p"),s("mo",{stretchy:"false"},"("),s("mi",null,"x"),s("mo",null,"="),s("mi",null,"k"),s("mo",{stretchy:"false"},")"),s("mtext",null,"，若存在"),s("mi",null,"k"),s("mn",null,"0"),s("mtext",null,"使得当"),s("mi",null,"k"),s("mo",null,"<"),s("mi",null,"k"),s("mn",null,"0"),s("mtext",null,"时命题为真，当"),s("mi",null,"k"),s("mo",null,">"),s("mi",null,"k"),s("mn",null,"0"),s("mtext",null,"时命题为假，当"),s("mi",null,"k"),s("mo",null,"="),s("mi",null,"k"),s("mn",null,"0"),s("mtext",null,"时命题为真或为假，则称命题"),s("mi",null,"p"),s("mo",{stretchy:"false"},"("),s("mi",null,"x"),s("mo",null,"="),s("mi",null,"k"),s("mo",{stretchy:"false"},")"),s("mtext",null,"满足二分单调性")]),s("annotation",{encoding:"application/x-tex"},"对于一个命题p(x=k)，若存在k0使得当k<k0时命题为真，当k>k0时命题为假，当k=k0时命题为真或为假，则称命题p(x=k)满足二分单调性")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord cjk_fallback"},"对于一个命题"),s("span",{class:"mord mathnormal"},"p"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),s("span",{class:"mclose"},")"),s("span",{class:"mord cjk_fallback"},"，若存在"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),s("span",{class:"mord"},"0"),s("span",{class:"mord cjk_fallback"},"使得当"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"<"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7335em","vertical-align":"-0.0391em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),s("span",{class:"mord"},"0"),s("span",{class:"mord cjk_fallback"},"时命题为真，当"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},">"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),s("span",{class:"mord"},"0"),s("span",{class:"mord cjk_fallback"},"时命题为假，当"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),s("span",{class:"mord"},"0"),s("span",{class:"mord cjk_fallback"},"时命题为真或为假，则称命题"),s("span",{class:"mord mathnormal"},"p"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),s("span",{class:"mclose"},")"),s("span",{class:"mord cjk_fallback"},"满足二分单调性")])])])],-1),d=s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"二分算法则是在对于任意"),s("mi",null,"x"),s("mo",null,"="),s("mi",null,"k"),s("mtext",null,"’都能判断"),s("mi",null,"p"),s("mo",{stretchy:"false"},"("),s("mi",null,"x"),s("mo",null,"="),s("mi",null,"k"),s("mtext",null,"’"),s("mo",{stretchy:"false"},")"),s("mtext",null,"真假的情况下，快速找到分界线"),s("mi",null,"K"),s("mn",null,"0"),s("mtext",null,"的算法")]),s("annotation",{encoding:"application/x-tex"},"二分算法则是在对于任意x=k’都能判断p(x=k’)真假的情况下，快速找到分界线K0的算法")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord cjk_fallback"},"二分算法则是在对于任意"),s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),s("span",{class:"mord"},"’"),s("span",{class:"mord cjk_fallback"},"都能判断"),s("span",{class:"mord mathnormal"},"p"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),s("span",{class:"mord"},"’"),s("span",{class:"mclose"},")"),s("span",{class:"mord cjk_fallback"},"真假的情况下，快速找到分界线"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"K"),s("span",{class:"mord"},"0"),s("span",{class:"mord cjk_fallback"},"的算法")])])])],-1),u=[i,m,d];function h(g,k){return n(),t("div",null,u)}const v=a(r,[["render",h],["__file","Dichotomy-OR.html.vue"]]),_=JSON.parse(`{"path":"/posts/algorithm/oi/learning-note/Dichotomy-OR.html","title":"二分相关算法题","lang":"zh-CN","frontmatter":{"date":"2021-01-01T00:00:00.000Z","title":"二分相关算法题","tag":["二分"],"categories":["OI算法和数据结构"],"mathjax":true,"description":"基础二分 二分查找 从有序序列中查找某个值的位置 STL：lower_bound()、upper_bound 二分答案 通过判断某个条件是否满足，对一个范围内的答案进行二分 最简单的实例： 给出一个1~100范围内的随机数，要求你用最少的次数猜中这个数字 ) 二分查找与二分答案的联系 二分答案是某个连续区间内的二分查找 二分边界的判断 实数范围内的二分...","head":[["meta",{"property":"og:url","content":"https://Dnullp.github.io/posts/algorithm/oi/learning-note/Dichotomy-OR.html"}],["meta",{"property":"og:site_name","content":"Dnull's Blog"}],["meta",{"property":"og:title","content":"二分相关算法题"}],["meta",{"property":"og:description","content":"基础二分 二分查找 从有序序列中查找某个值的位置 STL：lower_bound()、upper_bound 二分答案 通过判断某个条件是否满足，对一个范围内的答案进行二分 最简单的实例： 给出一个1~100范围内的随机数，要求你用最少的次数猜中这个数字 ) 二分查找与二分答案的联系 二分答案是某个连续区间内的二分查找 二分边界的判断 实数范围内的二分..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-14T13:35:40.000Z"}],["meta",{"property":"article:author","content":"Dnull"}],["meta",{"property":"article:tag","content":"二分"}],["meta",{"property":"article:published_time","content":"2021-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-14T13:35:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"二分相关算法题\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-14T13:35:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dnull\\",\\"url\\":\\"https://Dnullp.github.io\\"}]}"]]},"headers":[{"level":3,"title":"二分查找","slug":"二分查找","link":"#二分查找","children":[]},{"level":3,"title":"二分答案","slug":"二分答案","link":"#二分答案","children":[]},{"level":3,"title":"二分查找与二分答案的联系","slug":"二分查找与二分答案的联系","link":"#二分查找与二分答案的联系","children":[]},{"level":3,"title":"二分边界的判断","slug":"二分边界的判断","link":"#二分边界的判断","children":[]},{"level":3,"title":"实数范围内的二分","slug":"实数范围内的二分","link":"#实数范围内的二分","children":[]},{"level":3,"title":"上面的二分题目到底在求解什么？","slug":"上面的二分题目到底在求解什么","link":"#上面的二分题目到底在求解什么","children":[]},{"level":3,"title":"二分算法的概念","slug":"二分算法的概念","link":"#二分算法的概念","children":[]}],"git":{"createdTime":1712936892000,"updatedTime":1713101740000,"contributors":[{"name":"DnullP","email":"dnull123p@gmail.com","commits":2}]},"readingTime":{"minutes":2.01,"words":603},"filePathRelative":"posts/algorithm/oi/learning-note/Dichotomy-OR.md","localizedDate":"2021年1月1日","excerpt":"\\n<h3>二分查找</h3>\\n<p>从有序序列中查找某个值的位置\\n<strong>STL</strong>：lower_bound()、upper_bound</p>\\n<hr>\\n<h3>二分答案</h3>\\n<p>通过判断某个条件是否满足，对一个范围内的答案进行二分</p>\\n<p><strong>最简单的实例</strong>：\\n给出一个1~100范围内的随机数，要求你用最少的次数猜中这个数字</p>\\n<hr>\\n<p>)</p>\\n<hr>\\n<h3>二分查找与二分答案的联系</h3>\\n<p><strong>二分答案</strong>是某个连续区间内的<strong>二分查找</strong></p>","autoDesc":true}`);export{v as comp,_ as data};
