import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,e as t}from"./app-DCTCPPGQ.js";const e={},p=t(`<h3 id="template" tabindex="-1"><a class="header-anchor" href="#template"><span>Template</span></a></h3><p>模板模式和我们平时用的template也有思想相似之处</p><p>现在假设我们有一个处理文档的程序，需要先读取文档，然后将其进行处理，最后输出结果。我们读取的文档可能是不同的格式，比如PDF、DOC、TXT等，那么我们的程序在读取文档和输出阶段就会有不同方法，但是对内容的处理是相同的行为</p><p>我们可以将这个程序的算法拆为几个部分：读取文档、内容处理、结果输出，既然内容处理都是相同的，就把内容处理的方法实现，作为父类，派生出多个实现了不同文档读取和输出的类，实现了对单个步骤不同的程序的代码复用</p><p>下面是来自refactoring的UML图：</p><figure><img src="https://refactoring.guru/images/patterns/diagrams/template-method/structure.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上图有三个要素：</p><ul><li>AbstractClass 这个抽象类包含了模板方法的执行（按照一定的顺序） 然后实现了一部分需要共用的方法，其余方法则作为抽象函数</li><li>ConcreteClass 这里派生的子类实现了其余的方法，需要的话也可以重写父类的方法 这样的派生同样可以派生很多层，实现不同情况的多种业务逻辑</li></ul><p>下面是来自noob note的代码</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span>
   <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">startPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">endPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
   <span class="token comment">//模板</span>
   <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 
      <span class="token comment">//初始化游戏</span>
      <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
      <span class="token comment">//开始游戏</span>
      <span class="token function">startPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
      <span class="token comment">//结束游戏</span>
      <span class="token function">endPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里定义了最初的父类，<code>play()</code>是业务逻辑函数，所以加上了 <code>final</code>的关键字，使得其不可被子类重写</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cricket</span> <span class="token keyword">extends</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span>
 
   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">void</span> <span class="token function">endPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Cricket Game Finished!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
 
   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Cricket Game Initialized! Start playing.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
 
   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">void</span> <span class="token function">startPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Cricket Game Started. Enjoy the game!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Football</span> <span class="token keyword">extends</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span>
 
   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">void</span> <span class="token function">endPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Football Game Finished!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
 
   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Football Game Initialized! Start playing.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
 
   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">void</span> <span class="token function">startPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Football Game Started. Enjoy the game!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的两个派生类分别实现了不同的两种业务逻辑</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TemplatePatternDemo</span> <span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 
      <span class="token class-name">Game</span> game <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cricket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      game<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      game <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Football</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      game<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在使用模板时，也是将尖括号中的类型直接替换成另一种，这里的模板方法则是将类型换成了方法，我们可以把不同的方法放进一个固定的业务逻辑中</p><p>由此我们也可以区别模板（template）和泛型（generic），模板是一个固定的业务逻辑中，固定替换某些类型或者方法，而泛型是你可以通过一个方法对任意一个满足条件的类型做处理（比如接口做参数）</p>`,17),o=[p];function c(i,l){return a(),s("div",null,o)}const r=n(e,[["render",c],["__file","template.html.vue"]]),k=JSON.parse(`{"path":"/posts/SE/design-pattern/template.html","title":"Template","lang":"zh-CN","frontmatter":{"date":"2021-01-01T00:00:00.000Z","title":"Template","tag":["design-pattern","面向对象"],"categories":["设计模式"],"mathjax":true,"description":"Template 模板模式和我们平时用的template也有思想相似之处 现在假设我们有一个处理文档的程序，需要先读取文档，然后将其进行处理，最后输出结果。我们读取的文档可能是不同的格式，比如PDF、DOC、TXT等，那么我们的程序在读取文档和输出阶段就会有不同方法，但是对内容的处理是相同的行为 我们可以将这个程序的算法拆为几个部分：读取文档、内容处理...","head":[["meta",{"property":"og:url","content":"https://Dnullp.github.io/posts/SE/design-pattern/template.html"}],["meta",{"property":"og:site_name","content":"Dnull's Blog"}],["meta",{"property":"og:title","content":"Template"}],["meta",{"property":"og:description","content":"Template 模板模式和我们平时用的template也有思想相似之处 现在假设我们有一个处理文档的程序，需要先读取文档，然后将其进行处理，最后输出结果。我们读取的文档可能是不同的格式，比如PDF、DOC、TXT等，那么我们的程序在读取文档和输出阶段就会有不同方法，但是对内容的处理是相同的行为 我们可以将这个程序的算法拆为几个部分：读取文档、内容处理..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://refactoring.guru/images/patterns/diagrams/template-method/structure.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"Template"}],["meta",{"property":"article:author","content":"Dnull"}],["meta",{"property":"article:tag","content":"design-pattern"}],["meta",{"property":"article:tag","content":"面向对象"}],["meta",{"property":"article:published_time","content":"2021-01-01T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Template\\",\\"image\\":[\\"https://refactoring.guru/images/patterns/diagrams/template-method/structure.png\\"],\\"datePublished\\":\\"2021-01-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dnull\\",\\"url\\":\\"https://Dnullp.github.io\\"}]}"]]},"headers":[{"level":3,"title":"Template","slug":"template","link":"#template","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.3,"words":690},"filePathRelative":"posts/SE/design-pattern/template.md","localizedDate":"2021年1月1日","excerpt":"<h3>Template</h3>\\n<p>模板模式和我们平时用的template也有思想相似之处</p>\\n<p>现在假设我们有一个处理文档的程序，需要先读取文档，然后将其进行处理，最后输出结果。我们读取的文档可能是不同的格式，比如PDF、DOC、TXT等，那么我们的程序在读取文档和输出阶段就会有不同方法，但是对内容的处理是相同的行为</p>\\n<p>我们可以将这个程序的算法拆为几个部分：读取文档、内容处理、结果输出，既然内容处理都是相同的，就把内容处理的方法实现，作为父类，派生出多个实现了不同文档读取和输出的类，实现了对单个步骤不同的程序的代码复用</p>\\n<p>下面是来自refactoring的UML图：</p>","autoDesc":true}`);export{r as comp,k as data};
