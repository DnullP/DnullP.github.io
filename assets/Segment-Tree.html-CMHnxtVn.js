import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as o,f as e,a as n,e as a,b as s}from"./app-DCTCPPGQ.js";const c={},l=n("p",null,"综合了多种思想于一体的一种基础数据结构，适用于区间维护问题。",-1),u=a(`<p>对于线段树而言，在实现的思想方面不必多谈，无非就是二分区间，再进行合并。以下仅针对代码的具体实现进行一定的记录。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">Segment</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> L<span class="token punctuation">;</span>
    <span class="token keyword">int</span> R<span class="token punctuation">;</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> data<span class="token punctuation">;</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> lazy_tag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> node<span class="token punctuation">[</span><span class="token number">400005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> origin<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        node<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">=</span> origin<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>
        node<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span>L <span class="token operator">=</span> l<span class="token punctuation">;</span>
        node<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span>R <span class="token operator">=</span> r<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pos <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pos <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>

    node<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span>L <span class="token operator">=</span> l<span class="token punctuation">;</span>
    node<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span>R <span class="token operator">=</span> r<span class="token punctuation">;</span>
    node<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">=</span> node<span class="token punctuation">[</span><span class="token punctuation">(</span>pos <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">+</span> node<span class="token punctuation">[</span><span class="token punctuation">(</span>pos <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">spread</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    node<span class="token punctuation">[</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">+=</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_tag <span class="token operator">*</span> <span class="token punctuation">(</span>node<span class="token punctuation">[</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>R <span class="token operator">-</span> node<span class="token punctuation">[</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>L <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    node<span class="token punctuation">[</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">+=</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_tag <span class="token operator">*</span> <span class="token punctuation">(</span>node<span class="token punctuation">[</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>R <span class="token operator">-</span> node<span class="token punctuation">[</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>L <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    node<span class="token punctuation">[</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_tag <span class="token operator">+=</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_tag<span class="token punctuation">;</span>
    node<span class="token punctuation">[</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_tag <span class="token operator">+=</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_tag<span class="token punctuation">;</span>
    node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_tag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>L <span class="token operator">&amp;&amp;</span> r <span class="token operator">&gt;=</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>R<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">+=</span> <span class="token punctuation">(</span>node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>R <span class="token operator">-</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>L <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> val<span class="token punctuation">;</span>
        node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_tag <span class="token operator">+=</span> val<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">spread</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>L <span class="token operator">+</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>R<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&gt;=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">=</span> node<span class="token punctuation">[</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">+</span> node<span class="token punctuation">[</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>L <span class="token operator">&amp;&amp;</span> r <span class="token operator">&gt;=</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>R<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">spread</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>L <span class="token operator">+</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>R<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        sum <span class="token operator">+=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&gt;=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        sum <span class="token operator">+=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cin <span class="token operator">&gt;&gt;</span> origin<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> op<span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> op<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> val<span class="token punctuation">;</span>
            cin <span class="token operator">&gt;&gt;</span> l <span class="token operator">&gt;&gt;</span> r <span class="token operator">&gt;&gt;</span> val<span class="token punctuation">;</span>
            <span class="token function">change</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span>
            cin <span class="token operator">&gt;&gt;</span> l <span class="token operator">&gt;&gt;</span> r<span class="token punctuation">;</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这段代码没有使用重定义的方式减少代码量，避免产生误解接。<br> 接下来分别对各个操作的实现中，需要注意的细节进行记录。</p><h3 id="建树操作" tabindex="-1"><a class="header-anchor" href="#建树操作"><span>建树操作</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        node<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">=</span> origin<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>
        node<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span>L <span class="token operator">=</span> l<span class="token punctuation">;</span>
        node<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span>R <span class="token operator">=</span> r<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pos <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pos <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>

    node<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span>L <span class="token operator">=</span> l<span class="token punctuation">;</span>
    node<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span>R <span class="token operator">=</span> r<span class="token punctuation">;</span>

    node<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">=</span> node<span class="token punctuation">[</span><span class="token punctuation">(</span>pos <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">+</span> node<span class="token punctuation">[</span><span class="token punctuation">(</span>pos <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>需注意在每个区间的子区间完成建立后，更新当前区间的数据</li></ul><h3 id="延迟标记操作" tabindex="-1"><a class="header-anchor" href="#延迟标记操作"><span>延迟标记操作</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">spread</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    node<span class="token punctuation">[</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">+=</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_tag <span class="token operator">*</span> <span class="token punctuation">(</span>node<span class="token punctuation">[</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>R <span class="token operator">-</span> node<span class="token punctuation">[</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>L <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    node<span class="token punctuation">[</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">+=</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_tag <span class="token operator">*</span> <span class="token punctuation">(</span>node<span class="token punctuation">[</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>R <span class="token operator">-</span> node<span class="token punctuation">[</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>L <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    node<span class="token punctuation">[</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_tag <span class="token operator">+=</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_tag<span class="token punctuation">;</span>
    node<span class="token punctuation">[</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_tag <span class="token operator">+=</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_tag<span class="token punctuation">;</span>
    node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_tag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>延迟标记是数据结构设计中一种重要的设计方式，在维护某个数据结构时，对于链锁式地对数据进行的修改更新可以在有需要时再进行，在此之前可以通过打标记的方式表示：这个数据需要被更新。</p></li><li><p>上面的标记是记录该区间的加值，对于标记的传递，需要对其子区间加上对应长度的加和。</p></li></ul><h3 id="区间修改操作" tabindex="-1"><a class="header-anchor" href="#区间修改操作"><span>区间修改操作</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>L <span class="token operator">&amp;&amp;</span> r <span class="token operator">&gt;=</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>R<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">+=</span> <span class="token punctuation">(</span>node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>R <span class="token operator">-</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>L <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> val<span class="token punctuation">;</span>
        node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_tag <span class="token operator">+=</span> val<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">spread</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>L <span class="token operator">+</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>R<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&gt;=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">=</span> node<span class="token punctuation">[</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">+</span> node<span class="token punctuation">[</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),i=n("ul",null,[n("li",null,[n("p",null,[s("对于区间修改，需要着重理解找到需要修改区间的过程。首先我们引入一个根节点1，然后对于"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"l"),n("mo",null,"≤"),n("mi",null,"m"),n("mi",null,"i"),n("mi",null,"d")]),n("annotation",{encoding:"application/x-tex"},"l\\leq mid")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8304em","vertical-align":"-0.136em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"≤"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6944em"}}),n("span",{class:"mord mathnormal"},"mi"),n("span",{class:"mord mathnormal"},"d")])])]),s("时，我们递归查询其左区间，对应的如果"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"r"),n("mo",null,"≥"),n("mi",null,"m"),n("mi",null,"i"),n("mi",null,"d"),n("mo",null,"+"),n("mn",null,"1")]),n("annotation",{encoding:"application/x-tex"},"r\\geq mid+1")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7719em","vertical-align":"-0.136em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"≥"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7778em","vertical-align":"-0.0833em"}}),n("span",{class:"mord mathnormal"},"mi"),n("span",{class:"mord mathnormal"},"d"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"1")])])]),s("则递归查询右区间。")]),n("p",null,"如此这样查询下去的话，总会查询到至少一个区间完全覆盖在修改区间中，此时再对整个区间进行修改"),n("p",null,"注意修改后需要对父区间进行更新"),n("p",null,"而查询操作与之类似，就不再赘述")])],-1),k=a(`<h3 id="关于区间乘的延迟标记写法" tabindex="-1"><a class="header-anchor" href="#关于区间乘的延迟标记写法"><span>关于区间乘的延迟标记写法</span></a></h3><p>没什么好说的其实，打两个标记，然后先乘再加就好了。</p><p><strong>标记传递</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">spread</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    node<span class="token punctuation">[</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">*=</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_tag_mult<span class="token punctuation">;</span>
    node<span class="token punctuation">[</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">*=</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_tag_mult<span class="token punctuation">;</span>

    node<span class="token punctuation">[</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">+=</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_tag_plus <span class="token operator">*</span> <span class="token punctuation">(</span>node<span class="token punctuation">[</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>R <span class="token operator">-</span> node<span class="token punctuation">[</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>L <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    node<span class="token punctuation">[</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">+=</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_tag_plus <span class="token operator">*</span> <span class="token punctuation">(</span>node<span class="token punctuation">[</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>R <span class="token operator">-</span> node<span class="token punctuation">[</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>L <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    node<span class="token punctuation">[</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_tag_mult <span class="token operator">*=</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_tag_mult<span class="token punctuation">;</span>
    node<span class="token punctuation">[</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_tag_mult <span class="token operator">*=</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_tag_mult<span class="token punctuation">;</span>

    node<span class="token punctuation">[</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_tag_plus <span class="token operator">*=</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_tag_mult<span class="token punctuation">;</span>
    node<span class="token punctuation">[</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_tag_plus <span class="token operator">*=</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_tag_mult<span class="token punctuation">;</span>
    node<span class="token punctuation">[</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_tag_plus <span class="token operator">+=</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_tag_plus<span class="token punctuation">;</span>
    node<span class="token punctuation">[</span><span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_tag_plus <span class="token operator">+=</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_tag_plus<span class="token punctuation">;</span>
    
    node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_tag_plus <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy_tag_mult <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function r(d,m){return t(),o("div",null,[l,e(" more -"),u,i,k])}const g=p(c,[["render",r],["__file","Segment-Tree.html.vue"]]),y=JSON.parse(`{"path":"/posts/algorithm/oi/learning-note/Segment-Tree.html","title":"线段树","lang":"zh-CN","frontmatter":{"date":"2021-01-01T00:00:00.000Z","title":"线段树","tag":["线段树","数据结构","区间维护"],"categories":["OI算法和数据结构"],"mathjax":true,"description":"综合了多种思想于一体的一种基础数据结构，适用于区间维护问题。 对于线段树而言，在实现的思想方面不必多谈，无非就是二分区间，再进行合并。以下仅针对代码的具体实现进行一定的记录。 上面这段代码没有使用重定义的方式减少代码量，避免产生误解接。 接下来分别对各个操作的实现中，需要注意的细节进行记录。 建树操作 需注意在每个区间的子区间完成建立后，更新当前区间的...","head":[["meta",{"property":"og:url","content":"https://Dnullp.github.io/posts/algorithm/oi/learning-note/Segment-Tree.html"}],["meta",{"property":"og:site_name","content":"Dnull's Blog"}],["meta",{"property":"og:title","content":"线段树"}],["meta",{"property":"og:description","content":"综合了多种思想于一体的一种基础数据结构，适用于区间维护问题。 对于线段树而言，在实现的思想方面不必多谈，无非就是二分区间，再进行合并。以下仅针对代码的具体实现进行一定的记录。 上面这段代码没有使用重定义的方式减少代码量，避免产生误解接。 接下来分别对各个操作的实现中，需要注意的细节进行记录。 建树操作 需注意在每个区间的子区间完成建立后，更新当前区间的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-14T13:35:40.000Z"}],["meta",{"property":"article:author","content":"Dnull"}],["meta",{"property":"article:tag","content":"线段树"}],["meta",{"property":"article:tag","content":"数据结构"}],["meta",{"property":"article:tag","content":"区间维护"}],["meta",{"property":"article:published_time","content":"2021-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-14T13:35:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"线段树\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-14T13:35:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dnull\\",\\"url\\":\\"https://Dnullp.github.io\\"}]}"]]},"headers":[{"level":3,"title":"建树操作","slug":"建树操作","link":"#建树操作","children":[]},{"level":3,"title":"延迟标记操作","slug":"延迟标记操作","link":"#延迟标记操作","children":[]},{"level":3,"title":"区间修改操作","slug":"区间修改操作","link":"#区间修改操作","children":[]},{"level":3,"title":"关于区间乘的延迟标记写法","slug":"关于区间乘的延迟标记写法","link":"#关于区间乘的延迟标记写法","children":[]}],"git":{"createdTime":1712936892000,"updatedTime":1713101740000,"contributors":[{"name":"DnullP","email":"dnull123p@gmail.com","commits":2}]},"readingTime":{"minutes":3.87,"words":1161},"filePathRelative":"posts/algorithm/oi/learning-note/Segment-Tree.md","localizedDate":"2021年1月1日","excerpt":"<p>综合了多种思想于一体的一种基础数据结构，适用于区间维护问题。</p>\\n<!-- more --->\\n<p>对于线段树而言，在实现的思想方面不必多谈，无非就是二分区间，再进行合并。以下仅针对代码的具体实现进行一定的记录。</p>\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;cstdio&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n\\n<span class=\\"token keyword\\">using</span> <span class=\\"token keyword\\">namespace</span> std<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Segment</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> L<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">int</span> R<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">long</span> <span class=\\"token keyword\\">long</span> data<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">long</span> <span class=\\"token keyword\\">long</span> lazy_tag <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span> node<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">400005</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span> origin<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">100005</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span> n<span class=\\"token punctuation\\">,</span> m<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">build</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> pos<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> l<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> r<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>l <span class=\\"token operator\\">==</span> r<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        node<span class=\\"token punctuation\\">[</span>pos<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>data <span class=\\"token operator\\">=</span> origin<span class=\\"token punctuation\\">[</span>l<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n        node<span class=\\"token punctuation\\">[</span>pos<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>L <span class=\\"token operator\\">=</span> l<span class=\\"token punctuation\\">;</span>\\n        node<span class=\\"token punctuation\\">[</span>pos<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>R <span class=\\"token operator\\">=</span> r<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">int</span> mid <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>l <span class=\\"token operator\\">+</span> r<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&gt;&gt;</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">build</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>pos <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> l<span class=\\"token punctuation\\">,</span> mid<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">build</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>pos <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> mid <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> r<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    node<span class=\\"token punctuation\\">[</span>pos<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>L <span class=\\"token operator\\">=</span> l<span class=\\"token punctuation\\">;</span>\\n    node<span class=\\"token punctuation\\">[</span>pos<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>R <span class=\\"token operator\\">=</span> r<span class=\\"token punctuation\\">;</span>\\n    node<span class=\\"token punctuation\\">[</span>pos<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>data <span class=\\"token operator\\">=</span> node<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">(</span>pos <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>data <span class=\\"token operator\\">+</span> node<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">(</span>pos <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>data<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">spread</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> p<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    node<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">(</span>p <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>data <span class=\\"token operator\\">+=</span> node<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>lazy_tag <span class=\\"token operator\\">*</span> <span class=\\"token punctuation\\">(</span>node<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">(</span>p <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>R <span class=\\"token operator\\">-</span> node<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">(</span>p <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>L <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    node<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">(</span>p <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>data <span class=\\"token operator\\">+=</span> node<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>lazy_tag <span class=\\"token operator\\">*</span> <span class=\\"token punctuation\\">(</span>node<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">(</span>p <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>R <span class=\\"token operator\\">-</span> node<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">(</span>p <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>L <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    node<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">(</span>p <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>lazy_tag <span class=\\"token operator\\">+=</span> node<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>lazy_tag<span class=\\"token punctuation\\">;</span>\\n    node<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">(</span>p <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>lazy_tag <span class=\\"token operator\\">+=</span> node<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>lazy_tag<span class=\\"token punctuation\\">;</span>\\n    node<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>lazy_tag <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">change</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> p<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> l<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> r<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> val<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>l <span class=\\"token operator\\">&lt;=</span> node<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>L <span class=\\"token operator\\">&amp;&amp;</span> r <span class=\\"token operator\\">&gt;=</span> node<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>R<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        node<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>data <span class=\\"token operator\\">+=</span> <span class=\\"token punctuation\\">(</span>node<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>R <span class=\\"token operator\\">-</span> node<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>L <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">*</span> val<span class=\\"token punctuation\\">;</span>\\n        node<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>lazy_tag <span class=\\"token operator\\">+=</span> val<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token function\\">spread</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">int</span> mid <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>node<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>L <span class=\\"token operator\\">+</span> node<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>R<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&gt;&gt;</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>l <span class=\\"token operator\\">&lt;=</span> mid<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">change</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>p <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> l<span class=\\"token punctuation\\">,</span> r<span class=\\"token punctuation\\">,</span> val<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>r <span class=\\"token operator\\">&gt;=</span> mid <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">change</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>p <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> l<span class=\\"token punctuation\\">,</span> r<span class=\\"token punctuation\\">,</span> val<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    node<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>data <span class=\\"token operator\\">=</span> node<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">(</span>p <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>data <span class=\\"token operator\\">+</span> node<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">(</span>p <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>data<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">long</span> <span class=\\"token keyword\\">long</span> <span class=\\"token function\\">query</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> p<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> l<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> r<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>l <span class=\\"token operator\\">&lt;=</span> node<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>L <span class=\\"token operator\\">&amp;&amp;</span> r <span class=\\"token operator\\">&gt;=</span> node<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>R<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> node<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>data<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token function\\">spread</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">int</span> mid <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>node<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>L <span class=\\"token operator\\">+</span> node<span class=\\"token punctuation\\">[</span>p<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>R<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&gt;&gt;</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">long</span> <span class=\\"token keyword\\">long</span> sum <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>l <span class=\\"token operator\\">&lt;=</span> mid<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        sum <span class=\\"token operator\\">+=</span> <span class=\\"token function\\">query</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>p <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> l<span class=\\"token punctuation\\">,</span> r<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>r <span class=\\"token operator\\">&gt;=</span> mid <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        sum <span class=\\"token operator\\">+=</span> <span class=\\"token function\\">query</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>p <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> l<span class=\\"token punctuation\\">,</span> r<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">return</span> sum<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    cin <span class=\\"token operator\\">&gt;&gt;</span> n <span class=\\"token operator\\">&gt;&gt;</span> m<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;=</span> n<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        cin <span class=\\"token operator\\">&gt;&gt;</span> origin<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token function\\">build</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> n<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;=</span> m<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">int</span> op<span class=\\"token punctuation\\">;</span>\\n        cin <span class=\\"token operator\\">&gt;&gt;</span> op<span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>op <span class=\\"token operator\\">==</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">int</span> l<span class=\\"token punctuation\\">,</span> r<span class=\\"token punctuation\\">,</span> val<span class=\\"token punctuation\\">;</span>\\n            cin <span class=\\"token operator\\">&gt;&gt;</span> l <span class=\\"token operator\\">&gt;&gt;</span> r <span class=\\"token operator\\">&gt;&gt;</span> val<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token function\\">change</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> l<span class=\\"token punctuation\\">,</span> r<span class=\\"token punctuation\\">,</span> val<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>op <span class=\\"token operator\\">==</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">int</span> l<span class=\\"token punctuation\\">,</span> r<span class=\\"token punctuation\\">;</span>\\n            cin <span class=\\"token operator\\">&gt;&gt;</span> l <span class=\\"token operator\\">&gt;&gt;</span> r<span class=\\"token punctuation\\">;</span>\\n            cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token function\\">query</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> l<span class=\\"token punctuation\\">,</span> r<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}`);export{g as comp,y as data};
