import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as p,c as i,a as s,b as a,d as c,e as n}from"./app-DCTCPPGQ.js";const m={},o={href:"https://github.com/jlu-xiurui/csapp-labs",target:"_blank",rel:"noopener noreferrer"},r=n(`<h3 id="bitxor" tabindex="-1"><a class="header-anchor" href="#bitxor"><span>BitXor</span></a></h3><p>只是自己进行学习的记录，不提供任何保证</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* bitXor - x^y using only ~ and &amp; 
*   Example: bitXor(4, 5) = 1
*   Legal ops: ~ &amp;
*   Max ops: 14
*   Rating: 1
*/</span>
<span class="token keyword">int</span> <span class="token function">bitXor</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token operator">~</span>a<span class="token operator">&amp;</span><span class="token operator">~</span>b<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span>a<span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),u=s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mtable",{rowspacing:"0.25em",columnalign:"right left",columnspacing:"0em"},[s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mi",null,"a"),s("mo",null,"⊕"),s("mi",null,"b")])])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mrow"),s("mo",null,"="),s("mo",{stretchy:"false"},"("),s("mi",null,"a"),s("mo",null,"∣"),s("mi",null,"b"),s("mo",{stretchy:"false"},")"),s("mi",{mathvariant:"normal"},"&"),s("mo",{stretchy:"false"},"("),s("mo",null,"∼"),s("mo",{stretchy:"false"},"("),s("mi",null,"a"),s("mi",{mathvariant:"normal"},"&"),s("mi",null,"b"),s("mo",{stretchy:"false"},")"),s("mo",{stretchy:"false"},")")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mrow"),s("mo",null,"="),s("mo",{stretchy:"false"},"("),s("mi",null,"A"),s("mo",null,"∨"),s("mi",null,"B"),s("mo",{stretchy:"false"},")"),s("mo",null,"∧"),s("mo",{stretchy:"false"},"("),s("mi",{mathvariant:"normal"},"¬"),s("mo",{stretchy:"false"},"("),s("mi",null,"A"),s("mo",null,"∧"),s("mi",null,"B"),s("mo",{stretchy:"false"},")"),s("mo",{stretchy:"false"},")")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mrow"),s("mo",null,"="),s("mi",{mathvariant:"normal"},"¬"),s("mo",{stretchy:"false"},"("),s("mi",{mathvariant:"normal"},"¬"),s("mi",null,"A"),s("mo",null,"∧"),s("mi",{mathvariant:"normal"},"¬"),s("mi",null,"B"),s("mo",{stretchy:"false"},")"),s("mo",null,"∧"),s("mo",{stretchy:"false"},"("),s("mi",{mathvariant:"normal"},"¬"),s("mo",{stretchy:"false"},"("),s("mi",null,"A"),s("mo",null,"∧"),s("mi",null,"B"),s("mo",{stretchy:"false"},")"),s("mo",{stretchy:"false"},")")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mrow"),s("mo",null,"="),s("mo",null,"∼"),s("mo",{stretchy:"false"},"("),s("mo",null,"∼"),s("mi",null,"a"),s("mi",{mathvariant:"normal"},"&"),s("mo",null,"∽"),s("mi",null,"b"),s("mo",{stretchy:"false"},")"),s("mi",{mathvariant:"normal"},"&"),s("mo",{stretchy:"false"},"("),s("mo",null,"∼"),s("mo",{stretchy:"false"},"("),s("mi",null,"a"),s("mi",{mathvariant:"normal"},"&"),s("mi",null,"b"),s("mo",{stretchy:"false"},")"),s("mo",{stretchy:"false"},")")])])])])]),s("annotation",{encoding:"application/x-tex"},"\\begin{aligned} a \\oplus b &=(a \\mid b) \\&(\\sim(a \\& b)) \\\\ &=(A \\vee B) \\wedge(\\neg( A \\wedge B)) \\\\ &=\\neg(\\neg A\\wedge \\neg B) \\wedge(\\neg(A \\wedge B)) \\\\ &=\\sim(\\sim a \\& \\backsim b) \\&(\\sim(a \\& b)) \\end{aligned}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"6em","vertical-align":"-2.75em"}}),s("span",{class:"mord"},[s("span",{class:"mtable"},[s("span",{class:"col-align-r"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"3.25em"}},[s("span",{style:{top:"-5.41em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"⊕"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord mathnormal"},"b")])]),s("span",{style:{top:"-3.91em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"})]),s("span",{style:{top:"-2.41em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"})]),s("span",{style:{top:"-0.91em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"})])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.75em"}},[s("span")])])])]),s("span",{class:"col-align-l"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"3.25em"}},[s("span",{style:{top:"-5.41em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"}),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"∣"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord mathnormal"},"b"),s("span",{class:"mclose"},")"),s("span",{class:"mord"},"&"),s("span",{class:"mopen"},"("),s("span",{class:"mrel"},"∼"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mord"},"&"),s("span",{class:"mord mathnormal"},"b"),s("span",{class:"mclose"},"))")])]),s("span",{style:{top:"-3.91em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"}),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"A"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∨"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∧"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"¬"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"A"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∧"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),s("span",{class:"mclose"},"))")])]),s("span",{style:{top:"-2.41em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"}),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord"},"¬"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"¬"),s("span",{class:"mord mathnormal"},"A"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∧"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"¬"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∧"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"¬"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"A"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∧"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),s("span",{class:"mclose"},"))")])]),s("span",{style:{top:"-0.91em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"}),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"=∼"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mrel"},"∼"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mord"},"&"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel amsrm"},"∽"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord mathnormal"},"b"),s("span",{class:"mclose"},")"),s("span",{class:"mord"},"&"),s("span",{class:"mopen"},"("),s("span",{class:"mrel"},"∼"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mord"},"&"),s("span",{class:"mord mathnormal"},"b"),s("span",{class:"mclose"},"))")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.75em"}},[s("span")])])])])])])])])])],-1),d=n(`<p>德摩根律改变合取（析取）</p><h3 id="tmin" tabindex="-1"><a class="header-anchor" href="#tmin"><span>Tmin</span></a></h3><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* tmin - return minimum two&#39;s complement integer 
*   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;
*   Max ops: 4
*   Rating: 1
*/</span>
<span class="token keyword">int</span> <span class="token function">Tmin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">0x80000000</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),h=s("p",null,[a("返回值的大小为："),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"("),s("mn",null,"100...000"),s("msub",null,[s("mo",{stretchy:"false"},")"),s("mn",null,"2")]),s("mo",null,"="),s("mn",null,"0"),s("mi",null,"x"),s("mn",null,"80000000"),s("mo",null,"="),s("mo",null,"−"),s("msup",null,[s("mn",null,"2"),s("mn",null,"63")])]),s("annotation",{encoding:"application/x-tex"},"(100...000)_2 = 0x80000000 = -2^{63}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"100...000"),s("span",{class:"mclose"},[s("span",{class:"mclose"},")"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0"),s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mord"},"80000000"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"−"),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"63")])])])])])])])])])])])],-1),g=n(`<h3 id="istmax" tabindex="-1"><a class="header-anchor" href="#istmax"><span>isTMax</span></a></h3><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* isTmax - returns 1 if x is the maximum, two&#39;s complement number,
*     and 0 otherwise 
*   Legal ops: ! ~ &amp; ^ | +
*   Max ops: 10
*   Rating: 1
*/</span>
<span class="token keyword">_Bool</span> <span class="token function">isTMax</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">0x80000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最大数加上最小数一定是-1，取反后得到0，通过这个“0”来判断是否为最大值</p><h3 id="alloddbits" tabindex="-1"><a class="header-anchor" href="#alloddbits"><span>allOddBits</span></a></h3><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* allOddBits - return 1 if all odd-numbered bits in word set to 1
*   where bits are numbered from 0 (least significant) to 31 (most significant)
*   Examples allOddBits(0xFFFFFFFD) = 0, allOddBits(0xAAAAAAAA) = 1
*   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;
*   Max ops: 12
*   Rating: 2
*/</span>
<span class="token keyword">_Bool</span> <span class="token function">allOddBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">&amp;</span> <span class="token number">0xAAAAAAAA</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0xAAAAAAAA</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我傻了，在有限位数内比较所有奇数位就行了，我还考虑左移和右移的对位这些</p><p>这里的异或可以化简，但是会比较复杂，允许使用异或就直接使用了</p><h3 id="negate" tabindex="-1"><a class="header-anchor" href="#negate"><span>negate</span></a></h3><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* 
* negate - return -x 
*   Example: negate(1) = -1.
*   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;
*   Max ops: 5
*   Rating: 2
*/</span>
<span class="token keyword">int</span> <span class="token function">negete</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">~</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>补码特性</p>`,10);function v(b,y){const e=l("ExternalLinkIcon");return p(),i("div",null,[s("p",null,[a("以下所有做的题目都来源于Github项目中的实验题目： "),s("a",o,[a("https://github.com/jlu-xiurui/csapp-labs"),c(e)])]),r,u,d,h,g])}const f=t(m,[["render",v],["__file","Practice-1.html.vue"]]),A=JSON.parse(`{"path":"/posts/CS/CSAPP-notes/Practice-1.html","title":"CSAPP练习一——位运算的各类实现","lang":"zh-CN","frontmatter":{"date":"2021-01-01T00:00:00.000Z","title":"CSAPP练习一——位运算的各类实现","tag":["二进制","编码","计算机系统"],"categories":["CSAPP学习笔记"],"mathjax":true,"description":"以下所有做的题目都来源于Github项目中的实验题目： https://github.com/jlu-xiurui/csapp-labs BitXor 只是自己进行学习的记录，不提供任何保证 a⊕b​=(a∣b)&(∼(a&b))=(A∨B)∧(¬(A∧B))=¬(¬A∧¬B)∧(¬(A∧B))=∼(∼a&∽b)&(∼(a&b))​ 德摩根律改变合取（...","head":[["meta",{"property":"og:url","content":"https://Dnullp.github.io/posts/CS/CSAPP-notes/Practice-1.html"}],["meta",{"property":"og:site_name","content":"Dnull's Blog"}],["meta",{"property":"og:title","content":"CSAPP练习一——位运算的各类实现"}],["meta",{"property":"og:description","content":"以下所有做的题目都来源于Github项目中的实验题目： https://github.com/jlu-xiurui/csapp-labs BitXor 只是自己进行学习的记录，不提供任何保证 a⊕b​=(a∣b)&(∼(a&b))=(A∨B)∧(¬(A∧B))=¬(¬A∧¬B)∧(¬(A∧B))=∼(∼a&∽b)&(∼(a&b))​ 德摩根律改变合取（..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Dnull"}],["meta",{"property":"article:tag","content":"二进制"}],["meta",{"property":"article:tag","content":"编码"}],["meta",{"property":"article:tag","content":"计算机系统"}],["meta",{"property":"article:published_time","content":"2021-01-01T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CSAPP练习一——位运算的各类实现\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-01-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dnull\\",\\"url\\":\\"https://Dnullp.github.io\\"}]}"]]},"headers":[{"level":3,"title":"BitXor","slug":"bitxor","link":"#bitxor","children":[]},{"level":3,"title":"Tmin","slug":"tmin","link":"#tmin","children":[]},{"level":3,"title":"isTMax","slug":"istmax","link":"#istmax","children":[]},{"level":3,"title":"allOddBits","slug":"alloddbits","link":"#alloddbits","children":[]},{"level":3,"title":"negate","slug":"negate","link":"#negate","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.34,"words":402},"filePathRelative":"posts/CS/CSAPP-notes/Practice-1.md","localizedDate":"2021年1月1日","excerpt":"<p>以下所有做的题目都来源于Github项目中的实验题目：\\n<a href=\\"https://github.com/jlu-xiurui/csapp-labs\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/jlu-xiurui/csapp-labs</a></p>\\n<h3>BitXor</h3>\\n<p>只是自己进行学习的记录，不提供任何保证</p>\\n<div class=\\"language-c\\" data-ext=\\"c\\" data-title=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token comment\\">/* bitXor - x^y using only ~ and &amp; \\n*   Example: bitXor(4, 5) = 1\\n*   Legal ops: ~ &amp;\\n*   Max ops: 14\\n*   Rating: 1\\n*/</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">bitXor</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> a<span class=\\"token punctuation\\">,</span><span class=\\"token keyword\\">int</span> b<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">~</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">~</span>a<span class=\\"token operator\\">&amp;</span><span class=\\"token operator\\">~</span>b<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">&amp;</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">~</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token operator\\">&amp;</span>b<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}`);export{f as comp,A as data};
