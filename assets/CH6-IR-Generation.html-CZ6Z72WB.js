import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as n,e as a,a as s,b as t}from"./app-DCTCPPGQ.js";const i={},r=a(`<h2 id="three-address-code" tabindex="-1"><a class="header-anchor" href="#three-address-code"><span>Three-Address Code</span></a></h2><p>三地址码, 包含若干种形式:</p><ul><li><code>x = y op z</code></li><li><code>x = y</code></li><li><code>x = op y</code></li><li><code>x = *y</code></li><li><code>*x = y</code></li><li><code>x = &amp;y</code></li><li><code>goto L</code></li><li><code>if x goto L</code></li><li><code>ifFalse x goto L</code></li><li><code>param x</code></li><li><code>x = call y</code></li><li><code>x = y [z]</code></li></ul><h2 id="dag" tabindex="-1"><a class="header-anchor" href="#dag"><span>DAG</span></a></h2><p>Directed Acyclic Graph, 有向无环图, 可以表示表示三地址码:</p><p><code>a + a * c + (b - c) - (b - c)</code></p><p>以此为例构建三地址码:</p><div class="language-C line-numbers-mode" data-ext="C" data-title="C"><pre class="language-C"><code>t1 = a * c
t2 = a + t1
t3 = b - c
t4 = t2 + t3
t5 = t4 - t3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时构造DAG:</p><div class="language-Mermaid line-numbers-mode" data-ext="Mermaid" data-title="Mermaid"><pre class="language-Mermaid"><code>graph TD
    -_2 --&gt; +_1
    -_2 --&gt; -_1
    +_1 --&gt; +_2
    +_1 --&gt; -_1
    +_2 --&gt; a
    +_2 --&gt; *
    * --&gt; a
    * --&gt; c
    -_1 --&gt; b
    -_1 --&gt; c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要理念就是相同的三地址码, 可以能够重复用来表示代码</p><h2 id="quadruples" tabindex="-1"><a class="header-anchor" href="#quadruples"><span>quadruples</span></a></h2><p>四元式, 用来直接表示三地址码</p><table><thead><tr><th style="text-align:center;">op</th><th style="text-align:center;">arg1</th><th style="text-align:center;">arg2</th><th style="text-align:center;">result</th></tr></thead><tbody><tr><td style="text-align:center;">+</td><td style="text-align:center;">a</td><td style="text-align:center;">c</td><td style="text-align:center;">t1</td></tr><tr><td style="text-align:center;">*</td><td style="text-align:center;">a</td><td style="text-align:center;">t1</td><td style="text-align:center;">t2</td></tr><tr><td style="text-align:center;">-</td><td style="text-align:center;">b</td><td style="text-align:center;">c</td><td style="text-align:center;">t3</td></tr></tbody></table><p>类似以上结构, 直接储存三地址码</p><h2 id="triples" tabindex="-1"><a class="header-anchor" href="#triples"><span>Triples</span></a></h2><p>三元式, 用类似于DAG的变量复用模式来构建表</p><table><thead><tr><th style="text-align:center;">line</th><th style="text-align:center;">op</th><th style="text-align:center;">arg1</th><th style="text-align:center;">arg2</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">*</td><td style="text-align:center;">a</td><td style="text-align:center;">c</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">+</td><td style="text-align:center;">a</td><td style="text-align:center;">1</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">-</td><td style="text-align:center;">b</td><td style="text-align:center;">c</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:center;">+</td><td style="text-align:center;">2</td><td style="text-align:center;">3</td></tr></tbody></table><p>类似以上结构, 数字表示行号, 进行变量的引用 使用行号在进行编译器优化时有明显的不便: 当移动修改代码时, 行号就改变了, 所以通过建立映射表的方式来解决</p><h2 id="indirect-triples" tabindex="-1"><a class="header-anchor" href="#indirect-triples"><span>Indirect Triples</span></a></h2><p>间接三元式</p><table><th><table><thead><tr><th style="text-align:center;">line</th><th style="text-align:center;">pointer</th></tr></thead><tbody><tr><td style="text-align:center;">66</td><td style="text-align:center;">1</td></tr><tr><td style="text-align:center;">67</td><td style="text-align:center;">2</td></tr><tr><td style="text-align:center;">78</td><td style="text-align:center;">3</td></tr></tbody></table></th><th><table><thead><tr><th style="text-align:center;">op</th><th style="text-align:center;">arg1</th><th style="text-align:center;">arg2</th></tr></thead><tbody><tr><td style="text-align:center;">*</td><td style="text-align:center;">a</td><td style="text-align:center;">c</td></tr><tr><td style="text-align:center;">+</td><td style="text-align:center;">a</td><td style="text-align:center;">1</td></tr><tr><td style="text-align:center;">-</td><td style="text-align:center;">b</td><td style="text-align:center;">c</td></tr><tr><td style="text-align:center;">+</td><td style="text-align:center;">2</td><td style="text-align:center;">3</td></tr></tbody></table></th></table><h2 id="static-single-assignment" tabindex="-1"><a class="header-anchor" href="#static-single-assignment"><span>static single assignment</span></a></h2><p>静态单赋值, 简而言之就是三地址码中的每个变量都表示为单独的变量, 以便于编译器的某些优化</p><hr><h2 id="incremental-code-generation" tabindex="-1"><a class="header-anchor" href="#incremental-code-generation"><span>Incremental Code Generation</span></a></h2><p>增量代码生成: 通过生成新的三地址码, 来避免使用很长的字符串属性</p><h2 id="type-checking" tabindex="-1"><a class="header-anchor" href="#type-checking"><span>type checking</span></a></h2><ul><li>sound type system: 这里的sound表示健全的意思</li><li>strongly typed language: 强类型语言</li></ul><h3 id="synthesis-inference" tabindex="-1"><a class="header-anchor" href="#synthesis-inference"><span>synthesis, inference</span></a></h3><p>两者是类型检查的方式:</p><ul><li>类型综合: 通过在翻译方案中制定规则, 使得不同的类型之间的组合得到指定的类型: <code>int = int + int</code>, <code>float = int + float</code>, 像这样的规则就是综合产生的</li><li>类型推断: 通过上下文来推断一个位置的类型: <code>if(C) S</code>这里的<code>C</code>一定是<code>bool</code>类型, <code>S</code>是代码块, 没有类型, 为<code>void</code></li></ul><h3 id="type-conversion" tabindex="-1"><a class="header-anchor" href="#type-conversion"><span>type conversion</span></a></h3><p>类型转换</p><ul><li><p>widening: 拓宽转换, 从信息少的类型到信息多的类型</p></li><li><p>narrowing: 窄化转换, 从信息多的类型到信息少的类型</p></li><li><p>coercion: 隐式类型转换, 由编译器自动进行, 我们称之为implicit的</p></li><li><p>cast: 显式类型转换, 由程序员自己进行, 我们称之为explicit的</p></li></ul><h3 id="overloaded" tabindex="-1"><a class="header-anchor" href="#overloaded"><span>overloaded</span></a></h3><p>重载</p><h3 id="substution-instance-unification" tabindex="-1"><a class="header-anchor" href="#substution-instance-unification"><span>substution, instance, unification</span></a></h3><p>这里首先区别类型变量和类型表达式:</p><ul><li>类型变量: 一般用α, β, γ等表示, 表示未知类型<code>list(α)</code>就算是一个类型变量</li><li>类型表达式: 具有具体值得变量类型</li></ul>`,40),m=s("p",null,[t("如果我们用某个类型替换类型变量中的变量, 记为"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"S"),s("mo",{stretchy:"false"},"("),s("mi",null,"l"),s("mi",null,"i"),s("mi",null,"s"),s("mi",null,"t"),s("mo",{stretchy:"false"},"("),s("mi",null,"α"),s("mo",{stretchy:"false"},")"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mi",null,"l"),s("mi",null,"i"),s("mi",null,"s"),s("mi",null,"t"),s("mo",{stretchy:"false"},"("),s("mi",null,"i"),s("mi",null,"n"),s("mi",null,"t"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"S(list(α)) = list(int)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),s("span",{class:"mclose"},"))"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"in"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mclose"},")")])])]),t(", 我们称之为替换, 也就是substitution")],-1),c=s("p",null,[t("其中得"),s("code",null,"list(int)"),t("我们称之为类型变量"),s("code",null,"list(α)"),t("的实例(instance)")],-1),p=s("p",null,[t("如果通过某个替换, 可以使得两个类型变量相等, 即"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"S"),s("mo",{stretchy:"false"},"("),s("mi",null,"l"),s("mi",null,"i"),s("mi",null,"s"),s("mi",null,"t"),s("mo",{stretchy:"false"},"("),s("mi",null,"α"),s("mo",{stretchy:"false"},")"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mi",null,"S"),s("mo",{stretchy:"false"},"("),s("mi",null,"l"),s("mi",null,"i"),s("mi",null,"s"),s("mi",null,"t"),s("mo",{stretchy:"false"},"("),s("mi",null,"β"),s("mo",{stretchy:"false"},")"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"S(list(α)) = S(list(β))")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),s("span",{class:"mclose"},"))"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05278em"}},"β"),s("span",{class:"mclose"},"))")])])]),t(", 我们称之为"),s("strong",null,"合一替换")],-1),o=s("p",null,[t("如果替换后的类型表达式是另一个替换后的类型变量的实例, 即"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"S"),s("mo",{stretchy:"false"},"("),s("mi",null,"l"),s("mi",null,"i"),s("mi",null,"s"),s("mi",null,"t"),s("mo",{stretchy:"false"},"("),s("mi",null,"α"),s("mo",{stretchy:"false"},")"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"S(list(α))")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),s("span",{class:"mclose"},"))")])])]),t("是"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"S"),s("mo",{stretchy:"false"},"("),s("mi",null,"l"),s("mi",null,"i"),s("mi",null,"s"),s("mi",null,"t"),s("mo",{stretchy:"false"},"("),s("mi",null,"β"),s("mo",{stretchy:"false"},")"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"S(list(β))")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05278em"}},"β"),s("span",{class:"mclose"},"))")])])]),t("的实例, 我们称之为"),s("strong",null,"最一般合一替换")],-1),h=s("p",null,"使用合一的方法可以实现检测和类型推断",-1),d=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"("),s("mo",{stretchy:"false"},"("),s("msub",null,[s("mi",null,"α"),s("mn",null,"1")]),s("mo",null,"→"),s("msub",null,[s("mi",null,"α"),s("mn",null,"2")]),s("mo",{stretchy:"false"},")"),s("mo",null,"×"),s("mi",null,"l"),s("mi",null,"i"),s("mi",null,"s"),s("mi",null,"t"),s("mo",{stretchy:"false"},"("),s("msub",null,[s("mi",null,"α"),s("mn",null,"3")]),s("mo",{stretchy:"false"},")"),s("mo",{stretchy:"false"},")"),s("mo",null,"→"),s("mi",null,"l"),s("mi",null,"i"),s("mi",null,"s"),s("mi",null,"t"),s("mo",{stretchy:"false"},"("),s("msub",null,[s("mi",null,"α"),s("mn",null,"2")]),s("mo",{stretchy:"false"},")"),s("mspace",{linebreak:"newline"}),s("mo",{stretchy:"false"},"("),s("mo",{stretchy:"false"},"("),s("msub",null,[s("mi",null,"α"),s("mn",null,"3")]),s("mo",null,"→"),s("msub",null,[s("mi",null,"α"),s("mn",null,"4")]),s("mo",{stretchy:"false"},")"),s("mo",null,"×"),s("mi",null,"l"),s("mi",null,"i"),s("mi",null,"s"),s("mi",null,"t"),s("mo",{stretchy:"false"},"("),s("msub",null,[s("mi",null,"α"),s("mn",null,"3")]),s("mo",{stretchy:"false"},")"),s("mo",{stretchy:"false"},")"),s("mo",null,"→"),s("msub",null,[s("mi",null,"α"),s("mn",null,"5")])]),s("annotation",{encoding:"application/x-tex"}," ((\\alpha_1 \\rightarrow \\alpha_2) \\times list(\\alpha_3)) \\rightarrow list(\\alpha_2) \\\\ ((\\alpha_3 \\rightarrow \\alpha_4) \\times list(\\alpha_3)) \\rightarrow \\alpha_5 ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"(("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0037em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"1")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"→"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0037em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0037em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"3")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mclose"},"))"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"→"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0037em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mclose"},")")]),s("span",{class:"mspace newline"}),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"(("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0037em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"3")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"→"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0037em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"4")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0037em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"3")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mclose"},"))"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"→"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.5806em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0037em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"5")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])])])],-1),g=s("p",null,"以上的两个函数类型, 通过合一替换, 可以得到:",-1),u=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"("),s("mo",{stretchy:"false"},"("),s("msub",null,[s("mi",null,"α"),s("mn",null,"1")]),s("mo",null,"→"),s("msub",null,[s("mi",null,"α"),s("mn",null,"2")]),s("mo",{stretchy:"false"},")"),s("mo",null,"×"),s("mi",null,"l"),s("mi",null,"i"),s("mi",null,"s"),s("mi",null,"t"),s("mo",{stretchy:"false"},"("),s("msub",null,[s("mi",null,"α"),s("mn",null,"1")]),s("mo",{stretchy:"false"},")"),s("mo",{stretchy:"false"},")"),s("mo",null,"→"),s("mi",null,"l"),s("mi",null,"i"),s("mi",null,"s"),s("mi",null,"t"),s("mo",{stretchy:"false"},"("),s("msub",null,[s("mi",null,"α"),s("mn",null,"2")]),s("mo",{stretchy:"false"},")"),s("mspace",{linebreak:"newline"})]),s("annotation",{encoding:"application/x-tex"}," ((\\alpha_1 \\rightarrow \\alpha_2) \\times list(\\alpha_1)) \\rightarrow list(\\alpha_2) \\\\ ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"(("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0037em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"1")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"→"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0037em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0037em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"1")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mclose"},"))"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"→"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0037em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mclose"},")")]),s("span",{class:"mspace newline"})])])])],-1),y=a('<p>也就是说我可以用一个函数的多态来同时接受其他两个函数, 因为两者的类型其实可以认为是等价的</p><h3 id="control-flow" tabindex="-1"><a class="header-anchor" href="#control-flow"><span>control flow</span></a></h3><p>控制流包括if, while, for, switch等等影响程序流程的语句</p><h4 id="fall" tabindex="-1"><a class="header-anchor" href="#fall"><span>fall</span></a></h4><p>当条件满足时直接下一句就是对应的执行语句, 而不用使用<code>goto</code>进行跳转, 我们称之为<strong>fall(穿透)</strong></p><h4 id="backpatching" tabindex="-1"><a class="header-anchor" href="#backpatching"><span>backpatching</span></a></h4><p>回填技术, 简单来说就是一些控制流在生成跳转语句时并不知道需要跳转的代码在哪一行, 所以使用一个临时符号来表示跳转的位置</p><p>同时, 我们使用一个集合来表示这个跳转的位置, 将control flow中全部需要跳转到这个位置的代码都加入其中, 在这个位置确定后, 在返回去把这些跳转补全, 此称为回填技术</p>',8),v=[r,m,c,p,o,h,d,g,u,y];function x(b,f){return e(),n("div",null,v)}const w=l(i,[["render",x],["__file","CH6-IR-Generation.html.vue"]]),z=JSON.parse(`{"path":"/posts/CS/compiler/CH6-IR-Generation.html","title":"中间代码生成","lang":"zh-CN","frontmatter":{"title":"中间代码生成","tags":["compiler","词法分析","语法分析","语义分析","中间代码生成"],"categories":["compiler"],"math":true,"mermaid":true,"date":"2023-05-25T00:00:00.000Z","description":"Three-Address Code 三地址码, 包含若干种形式: x = y op z x = y x = op y x = *y *x = y x = &y goto L if x goto L ifFalse x goto L param x x = call y x = y [z] DAG Directed Acyclic Graph, 有向无...","head":[["meta",{"property":"og:url","content":"https://Dnullp.github.io/posts/CS/compiler/CH6-IR-Generation.html"}],["meta",{"property":"og:site_name","content":"Dnull's Blog"}],["meta",{"property":"og:title","content":"中间代码生成"}],["meta",{"property":"og:description","content":"Three-Address Code 三地址码, 包含若干种形式: x = y op z x = y x = op y x = *y *x = y x = &y goto L if x goto L ifFalse x goto L param x x = call y x = y [z] DAG Directed Acyclic Graph, 有向无..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Dnull"}],["meta",{"property":"article:tag","content":"compiler"}],["meta",{"property":"article:tag","content":"词法分析"}],["meta",{"property":"article:tag","content":"语法分析"}],["meta",{"property":"article:tag","content":"语义分析"}],["meta",{"property":"article:tag","content":"中间代码生成"}],["meta",{"property":"article:published_time","content":"2023-05-25T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"中间代码生成\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-05-25T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dnull\\",\\"url\\":\\"https://Dnullp.github.io\\"}]}"]]},"headers":[{"level":2,"title":"Three-Address Code","slug":"three-address-code","link":"#three-address-code","children":[]},{"level":2,"title":"DAG","slug":"dag","link":"#dag","children":[]},{"level":2,"title":"quadruples","slug":"quadruples","link":"#quadruples","children":[]},{"level":2,"title":"Triples","slug":"triples","link":"#triples","children":[]},{"level":2,"title":"Indirect Triples","slug":"indirect-triples","link":"#indirect-triples","children":[]},{"level":2,"title":"static single assignment","slug":"static-single-assignment","link":"#static-single-assignment","children":[]},{"level":2,"title":"Incremental Code Generation","slug":"incremental-code-generation","link":"#incremental-code-generation","children":[]},{"level":2,"title":"type checking","slug":"type-checking","link":"#type-checking","children":[{"level":3,"title":"synthesis, inference","slug":"synthesis-inference","link":"#synthesis-inference","children":[]},{"level":3,"title":"type conversion","slug":"type-conversion","link":"#type-conversion","children":[]},{"level":3,"title":"overloaded","slug":"overloaded","link":"#overloaded","children":[]},{"level":3,"title":"substution, instance, unification","slug":"substution-instance-unification","link":"#substution-instance-unification","children":[]},{"level":3,"title":"control flow","slug":"control-flow","link":"#control-flow","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.84,"words":1151},"filePathRelative":"posts/CS/compiler/CH6-IR-Generation.md","localizedDate":"2023年5月25日","excerpt":"<h2>Three-Address Code</h2>\\n<p>三地址码, 包含若干种形式:</p>\\n<ul>\\n<li><code>x = y op z</code></li>\\n<li><code>x = y</code></li>\\n<li><code>x = op y</code></li>\\n<li><code>x = *y</code></li>\\n<li><code>*x = y</code></li>\\n<li><code>x = &amp;y</code></li>\\n<li><code>goto L</code></li>\\n<li><code>if x goto L</code></li>\\n<li><code>ifFalse x goto L</code></li>\\n<li><code>param x</code></li>\\n<li><code>x = call y</code></li>\\n<li><code>x = y [z]</code></li>\\n</ul>","autoDesc":true}`);export{w as comp,z as data};
