import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as p,c as e,f as o,a as n,b as s,e as a}from"./app-DCTCPPGQ.js";const l={},c=n("p",null,"图论基础算法之割边割点，没想到为了调整各种细节还花了我不少时间",-1),i=n("h1",{id:"无向图中的tarjan",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#无向图中的tarjan"},[n("span",null,"无向图中的tarjan")])],-1),u=n("h2",{id:"算法说明",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#算法说明"},[n("span",null,"算法说明")])],-1),r=n("p",null,"图论算法没有图很难说明，在此只做最简单的叙述就好",-1),k=n("p",null,"首先对于一张图进行DFS，由DFS过程引入三个概念：",-1),d=n("ul",null,[n("li",null,"时间截：节点进行DFS的时间顺序编号"),n("li",null,"搜索树：深搜路径的生成树"),n("li",null,"追溯值：一个节点不通过父节点能够到达其他节点的最早时间截")],-1),m=n("p",null,[s("分别用"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"d"),n("mi",null,"f"),n("mi",null,"s"),n("mo",{stretchy:"false"},"["),n("mi",null,"n"),n("mo",{stretchy:"false"},"]")]),n("annotation",{encoding:"application/x-tex"},"dfs[n]")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"df"),n("span",{class:"mord mathnormal"},"s"),n("span",{class:"mopen"},"["),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},"]")])])]),s("、"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"l"),n("mi",null,"o"),n("mi",null,"w"),n("mo",{stretchy:"false"},"["),n("mi",null,"n"),n("mo",{stretchy:"false"},"]")]),n("annotation",{encoding:"application/x-tex"},"low[n]")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),n("span",{class:"mopen"},"["),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},"]")])])]),s("表示时间截和追溯值")],-1),v=n("p",null,"很容易可以想象出，如果：",-1),b=n("ul",null,[n("li",null,"存在一个节点的子节点满足:")],-1),h=n("p",{class:"katex-block"},[n("span",{class:"katex-display"},[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[n("semantics",null,[n("mrow",null,[n("mi",null,"d"),n("mi",null,"f"),n("mi",null,"s"),n("mo",{stretchy:"false"},"["),n("mi",null,"p"),n("mi",null,"o"),n("mi",null,"s"),n("mo",{stretchy:"false"},"]"),n("mo",null,"<"),n("mo",null,"="),n("mi",null,"l"),n("mi",null,"o"),n("mi",null,"w"),n("mo",{stretchy:"false"},"["),n("mi",null,"c"),n("mi",null,"h"),n("mi",null,"i"),n("mi",null,"l"),n("mi",null,"d"),n("mo",{stretchy:"false"},"]")]),n("annotation",{encoding:"application/x-tex"}," dfs[pos]<=low[child] ")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"df"),n("span",{class:"mord mathnormal"},"s"),n("span",{class:"mopen"},"["),n("span",{class:"mord mathnormal"},"p"),n("span",{class:"mord mathnormal"},"os"),n("span",{class:"mclose"},"]"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"<="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),n("span",{class:"mopen"},"["),n("span",{class:"mord mathnormal"},"c"),n("span",{class:"mord mathnormal"},"hi"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mord mathnormal"},"d"),n("span",{class:"mclose"},"]")])])])])],-1),y=n("p",null,[s("则说明有至少一个由子节点构成的连通块除了通过搜索树，没有其他路径回到树的根节点"),n("br"),s(" 所以该点删除后必然产生一个独立的连通块，此时该点为割点")],-1),g=n("p",null,[n("strong",null,"tips：当pos为根节点时，需要存在两个child节点满足条件才可判断根节点为割点")],-1),w=n("ul",null,[n("li",null,"存在一条边满足：")],-1),f=n("p",{class:"katex-block"},[n("span",{class:"katex-display"},[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[n("semantics",null,[n("mrow",null,[n("mi",null,"d"),n("mi",null,"f"),n("mi",null,"s"),n("mo",{stretchy:"false"},"["),n("mi",null,"p"),n("mi",null,"o"),n("mi",null,"s"),n("mo",{stretchy:"false"},"]"),n("mo",null,"<"),n("mi",null,"l"),n("mi",null,"o"),n("mi",null,"w"),n("mo",{stretchy:"false"},"["),n("mi",null,"c"),n("mi",null,"h"),n("mi",null,"i"),n("mi",null,"l"),n("mi",null,"d"),n("mo",{stretchy:"false"},"]")]),n("annotation",{encoding:"application/x-tex"}," dfs[pos]<low[child] ")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"df"),n("span",{class:"mord mathnormal"},"s"),n("span",{class:"mopen"},"["),n("span",{class:"mord mathnormal"},"p"),n("span",{class:"mord mathnormal"},"os"),n("span",{class:"mclose"},"]"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"<"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),n("span",{class:"mopen"},"["),n("span",{class:"mord mathnormal"},"c"),n("span",{class:"mord mathnormal"},"hi"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mord mathnormal"},"d"),n("span",{class:"mclose"},"]")])])])])],-1),_=a(`<p>则说明通过该边的子节点的子搜索树中没有其他能通往根节点的路径<br> 删掉该边后产生新的连通块，所以此边为割边</p><h2 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现"><span>代码实现</span></a></h2><p>原理很好理解，但是在代码实现和做题过程中，我遇到了不少的问题，接下来对犯过的错误和需要注意的点进行记录</p><p><strong>luogu模板题</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;utility&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">Edge</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> from<span class="token punctuation">;</span>
    <span class="token keyword">int</span> to<span class="token punctuation">;</span>
    <span class="token keyword">int</span> next<span class="token punctuation">;</span>
<span class="token punctuation">}</span> ed<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> head<span class="token punctuation">[</span><span class="token number">20005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> low<span class="token punctuation">[</span><span class="token number">20005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> dfs<span class="token punctuation">[</span><span class="token number">20005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> isAns<span class="token punctuation">[</span><span class="token number">20005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> num<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
<span class="token keyword">int</span> org <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> sum<span class="token punctuation">[</span><span class="token number">20005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> f<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    ed<span class="token punctuation">[</span><span class="token operator">++</span>num<span class="token punctuation">]</span><span class="token punctuation">.</span>from <span class="token operator">=</span> f<span class="token punctuation">;</span>
    ed<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">.</span>to <span class="token operator">=</span> t<span class="token punctuation">;</span>
    ed<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">;</span>
    head<span class="token punctuation">[</span>f<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> times <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> flag_1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">tarjan</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    dfs<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> low<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>times<span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token punctuation">;</span> i <span class="token operator">=</span> ed<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> y <span class="token operator">=</span> ed<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>dfs<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            low<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">,</span> dfs<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>          <span class="token comment">//当搜索树到达边界后，不能继续搜索下去，也不能</span>
                               <span class="token comment">//对叶节点进行统计</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token function">tarjan</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
            low<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>low<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> dfs<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">==</span> org<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>flag_1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    flag_1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>flag_1 <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> isAns<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//已经确认的点不能再统计一次答案</span>
                                             <span class="token comment">//否则会重复增加ans的数量</span>
                <span class="token punctuation">{</span>
                    isAns<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                    ans<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isAns<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                isAns<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                ans<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> u <span class="token operator">&gt;&gt;</span> v<span class="token punctuation">;</span>
        <span class="token function">add</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">add</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//题目中的图不一定联通，对于每个点都要检查</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>dfs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            flag_1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            times <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            org <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment">//每次确定了连通块后，需要修改根节点和flag</span>
            <span class="token function">tarjan</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isAns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注释中记录的四个关键点确实让我浪费了不少时间调试找错</p><h2 id="双连通分量" tabindex="-1"><a class="header-anchor" href="#双连通分量"><span>双连通分量</span></a></h2><p>当一个图中不存在割边或割点时，我们称其为边双连通图或点双连通图</p><p>满足条件的子图我们称之为分量</p><h3 id="边双连通分量求法" tabindex="-1"><a class="header-anchor" href="#边双连通分量求法"><span>边双连通分量求法</span></a></h3><p>只需要求出所有割边，删去割边后剩下的就是边双连通分量</p><h4 id="e-dcc缩点" tabindex="-1"><a class="header-anchor" href="#e-dcc缩点"><span>e-DCC缩点</span></a></h4><p>把所有e-DCC作为节点，割边作为边，可以产生一棵树</p><h3 id="点双连通分量的求法" tabindex="-1"><a class="header-anchor" href="#点双连通分量的求法"><span>点双连通分量的求法</span></a></h3><p>维护一个栈，每遇到一个新的节点就入栈<br> 最后判断节点是否为割点时，如果是割点，则出栈直到该节点出栈，所有出栈节点构成点双连通分量</p><p>然后可以进行缩点：</p><h4 id="v-ddc缩点" tabindex="-1"><a class="header-anchor" href="#v-ddc缩点"><span>v-DDC缩点</span></a></h4><p>割点可能同时被多个点双连通分量包括，所以v-DDC缩点的策略是把割点作为一个节点，然后每个点双连通分量作为一个节点和割点相连</p><h1 id="有向图中的tarjan" tabindex="-1"><a class="header-anchor" href="#有向图中的tarjan"><span>有向图中的Tarjan</span></a></h1><p>有向图中选取一个根节点可以到达其他所有点，，我们称之为<strong>流图</strong></p><p>在有向图中讨论割边割点是一个很别扭的事情，我鲜有看见相关的文章<br> 相对应的，在有向图中更常见到的是<strong>强连通分量</strong>——任意两个点可以自由通达的最大强连通子图（分量包括的含义就是最大连通的子图）</p>`,21),x=n("p",null,[s("有向图中的Tarjan类似于无向图，也是一个最小追溯值的一个计算"),n("br"),s(" dfs的过程中维护一个栈"),n("br"),s(" 计算出最小追溯值后，如果"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"l"),n("mi",null,"o"),n("mi",null,"w"),n("mo",{stretchy:"false"},"["),n("mi",null,"p"),n("mi",null,"o"),n("mi",null,"s"),n("mo",{stretchy:"false"},"]"),n("mo",null,"="),n("mo",null,"="),n("mi",null,"d"),n("mi",null,"f"),n("mi",null,"n"),n("mo",{stretchy:"false"},"["),n("mi",null,"p"),n("mi",null,"o"),n("mi",null,"s"),n("mo",{stretchy:"false"},"]")]),n("annotation",{encoding:"application/x-tex"},"low[pos]==dfn[pos]")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),n("span",{class:"mopen"},"["),n("span",{class:"mord mathnormal"},"p"),n("span",{class:"mord mathnormal"},"os"),n("span",{class:"mclose"},"]"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"=="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"df"),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mopen"},"["),n("span",{class:"mord mathnormal"},"p"),n("span",{class:"mord mathnormal"},"os"),n("span",{class:"mclose"},"]")])])]),s("，则一直出栈直到pos出栈为止，所有出栈的节点构成一个环，即为一个强连通分量")],-1),D=a(`<h3 id="luogu-p3387-缩点" tabindex="-1"><a class="header-anchor" href="#luogu-p3387-缩点"><span>Luogu P3387 缩点</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stack&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">Edge</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> from<span class="token punctuation">;</span>
    <span class="token keyword">int</span> to<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

deque<span class="token operator">&lt;</span>Edge<span class="token operator">&gt;</span> head<span class="token punctuation">[</span><span class="token number">10001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> degree<span class="token punctuation">[</span><span class="token number">10001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
deque<span class="token operator">&lt;</span>Edge<span class="token operator">&gt;</span> head_new<span class="token punctuation">[</span><span class="token number">10001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> node_w_new<span class="token punctuation">[</span><span class="token number">10001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> map<span class="token punctuation">[</span><span class="token number">10001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> f<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    head<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>Edge<span class="token punctuation">{</span>f<span class="token punctuation">,</span> t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> node<span class="token punctuation">;</span>
<span class="token keyword">int</span> node_w<span class="token punctuation">[</span><span class="token number">10001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> dfn<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> low<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> inTheStack<span class="token punctuation">[</span><span class="token number">10001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">tarjan</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    count<span class="token operator">++</span><span class="token punctuation">;</span>
    node<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    dfn<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token punctuation">;</span>
    low<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token punctuation">;</span>
    inTheStack<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span>el <span class="token operator">:</span> head<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> y <span class="token operator">=</span> el<span class="token punctuation">.</span>to<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> inTheStack<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//y must be in the stack</span>
        <span class="token punctuation">{</span>
            low<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">tarjan</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
            low<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>low<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">==</span> dfn<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token operator">++</span>cnt<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> p<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> temp <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            node<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            inTheStack<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

            node_w_new<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">+=</span> node_w<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//add up the weight</span>
            map<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">=</span> cnt<span class="token punctuation">;</span><span class="token comment">//map to its belonging</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> temp <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        node<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        inTheStack<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        node_w_new<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">+=</span> node_w<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">;</span>
        map<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">=</span> cnt<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span>el <span class="token operator">:</span> head_new<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>

        ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token function">cal</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>to<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans <span class="token operator">+</span> node_w_new<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        map<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cin <span class="token operator">&gt;&gt;</span> node_w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> f<span class="token punctuation">,</span> t<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cin <span class="token operator">&gt;&gt;</span> f <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">;</span>
        <span class="token function">add</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token function">tarjan</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// cout &lt;&lt; inTheStack[2]&lt;&lt; endl;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span>el <span class="token operator">:</span> head<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>el<span class="token punctuation">.</span>from<span class="token punctuation">]</span> <span class="token operator">==</span> map<span class="token punctuation">[</span>el<span class="token punctuation">.</span>to<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            head_new<span class="token punctuation">[</span>map<span class="token punctuation">[</span>el<span class="token punctuation">.</span>from<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>Edge<span class="token punctuation">{</span>map<span class="token punctuation">[</span>el<span class="token punctuation">.</span>from<span class="token punctuation">]</span><span class="token punctuation">,</span> map<span class="token punctuation">[</span>el<span class="token punctuation">.</span>to<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//this is such an amazing way to deal with each edge</span>

            degree<span class="token punctuation">[</span>map<span class="token punctuation">[</span>el<span class="token punctuation">.</span>to<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>degree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token function">cal</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>将每个节点在缩点后的新图中建立映射关系，然后就可以直接更新每一条边在新图中的对应链接，非常巧妙的方式</li></ul>`,3);function M(j,S){return p(),e("div",null,[c,o(" more -"),i,u,r,k,d,m,v,b,h,y,g,w,f,_,x,D])}const A=t(l,[["render",M],["__file","CutPointAndEdge.html.vue"]]),E=JSON.parse(`{"path":"/posts/algorithm/oi/learning-note/CutPointAndEdge.html","title":"割边和割点","lang":"zh-CN","frontmatter":{"date":"2021-01-01T00:00:00.000Z","title":"割边和割点","tag":["割点","Tarjan","图论"],"categories":["OI算法和数据结构"],"mathjax":true,"description":"图论基础算法之割边割点，没想到为了调整各种细节还花了我不少时间 无向图中的tarjan 算法说明 图论算法没有图很难说明，在此只做最简单的叙述就好 首先对于一张图进行DFS，由DFS过程引入三个概念： 时间截：节点进行DFS的时间顺序编号 搜索树：深搜路径的生成树 追溯值：一个节点不通过父节点能够到达其他节点的最早时间截 分别用dfs[n]、low[n...","head":[["meta",{"property":"og:url","content":"https://Dnullp.github.io/posts/algorithm/oi/learning-note/CutPointAndEdge.html"}],["meta",{"property":"og:site_name","content":"Dnull's Blog"}],["meta",{"property":"og:title","content":"割边和割点"}],["meta",{"property":"og:description","content":"图论基础算法之割边割点，没想到为了调整各种细节还花了我不少时间 无向图中的tarjan 算法说明 图论算法没有图很难说明，在此只做最简单的叙述就好 首先对于一张图进行DFS，由DFS过程引入三个概念： 时间截：节点进行DFS的时间顺序编号 搜索树：深搜路径的生成树 追溯值：一个节点不通过父节点能够到达其他节点的最早时间截 分别用dfs[n]、low[n..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-14T13:35:40.000Z"}],["meta",{"property":"article:author","content":"Dnull"}],["meta",{"property":"article:tag","content":"割点"}],["meta",{"property":"article:tag","content":"Tarjan"}],["meta",{"property":"article:tag","content":"图论"}],["meta",{"property":"article:published_time","content":"2021-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-14T13:35:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"割边和割点\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-14T13:35:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dnull\\",\\"url\\":\\"https://Dnullp.github.io\\"}]}"]]},"headers":[{"level":2,"title":"算法说明","slug":"算法说明","link":"#算法说明","children":[]},{"level":2,"title":"代码实现","slug":"代码实现","link":"#代码实现","children":[]},{"level":2,"title":"双连通分量","slug":"双连通分量","link":"#双连通分量","children":[{"level":3,"title":"边双连通分量求法","slug":"边双连通分量求法","link":"#边双连通分量求法","children":[]},{"level":3,"title":"点双连通分量的求法","slug":"点双连通分量的求法","link":"#点双连通分量的求法","children":[]},{"level":3,"title":"Luogu P3387 缩点","slug":"luogu-p3387-缩点","link":"#luogu-p3387-缩点","children":[]}]}],"git":{"createdTime":1712936892000,"updatedTime":1713101740000,"contributors":[{"name":"DnullP","email":"dnull123p@gmail.com","commits":2}]},"readingTime":{"minutes":5.23,"words":1570},"filePathRelative":"posts/algorithm/oi/learning-note/CutPointAndEdge.md","localizedDate":"2021年1月1日","excerpt":"<p>图论基础算法之割边割点，没想到为了调整各种细节还花了我不少时间</p>\\n<!-- more --->\\n<h1>无向图中的tarjan</h1>\\n<h2>算法说明</h2>\\n<p>图论算法没有图很难说明，在此只做最简单的叙述就好</p>\\n<p>首先对于一张图进行DFS，由DFS过程引入三个概念：</p>\\n<ul>\\n<li>时间截：节点进行DFS的时间顺序编号</li>\\n<li>搜索树：深搜路径的生成树</li>\\n<li>追溯值：一个节点不通过父节点能够到达其他节点的最早时间截</li>\\n</ul>\\n<p>分别用<span v-pre=\\"\\" class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><mi>d</mi><mi>f</mi><mi>s</mi><mo stretchy=\\"false\\">[</mo><mi>n</mi><mo stretchy=\\"false\\">]</mo></mrow><annotation encoding=\\"application/x-tex\\">dfs[n]</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:1em;vertical-align:-0.25em;\\"></span><span class=\\"mord mathnormal\\" style=\\"margin-right:0.10764em;\\">df</span><span class=\\"mord mathnormal\\">s</span><span class=\\"mopen\\">[</span><span class=\\"mord mathnormal\\">n</span><span class=\\"mclose\\">]</span></span></span></span>、<span v-pre=\\"\\" class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy=\\"false\\">[</mo><mi>n</mi><mo stretchy=\\"false\\">]</mo></mrow><annotation encoding=\\"application/x-tex\\">low[n]</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:1em;vertical-align:-0.25em;\\"></span><span class=\\"mord mathnormal\\" style=\\"margin-right:0.01968em;\\">l</span><span class=\\"mord mathnormal\\">o</span><span class=\\"mord mathnormal\\" style=\\"margin-right:0.02691em;\\">w</span><span class=\\"mopen\\">[</span><span class=\\"mord mathnormal\\">n</span><span class=\\"mclose\\">]</span></span></span></span>表示时间截和追溯值</p>","autoDesc":true}`);export{A as comp,E as data};
