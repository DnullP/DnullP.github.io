import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-DCTCPPGQ.js";const e={},p=t(`<p>这一部分主要分为两个主题：</p><ul><li>如何限制进程对设备的访问更改，又能让进程一定程度上调用设备</li><li>如何在多个进程之间切换</li></ul><h3 id="restricted-operations" tabindex="-1"><a class="header-anchor" href="#restricted-operations"><span>Restricted Operations</span></a></h3><h4 id="引入权限分层" tabindex="-1"><a class="header-anchor" href="#引入权限分层"><span>引入权限分层</span></a></h4><p>为了限制进程对内存或者其他设备的访问、更改等，OS引入了两个不同的模式：</p><ul><li>user mode</li><li>kernel mode</li></ul><p>在user mode中，程序只能执行有限的指令、访问有限的空间，如果程序试图访问一个非法的内存位置，那么OS将会中断程序</p><p>在kernel mode中，程序能够访问任何地方，执行任何指令</p><p>通过引入一个权限的分层，使得进程无法随意访问其他位置，那么现在的问题是如何让进程执行一些允许的内存访问与操作，比如我们的程序需要从硬盘读取数据，或者需要知道现在的内存剩余量为多少等等</p><h4 id="设置api" tabindex="-1"><a class="header-anchor" href="#设置api"><span>设置API</span></a></h4><p>为了让用户模式的进程能够在OS的管理下访问内存和设备，OS为kernel mode制定了一系列的操作和面向user mode开放的API</p><p>比如我们之前就提到过的<code>exec</code>、<code>kill</code>等都属于系统调用（API of system）</p><p>用户模式下，通过把指定的参数写入规定的寄存器（register）中，然后使用 <code>int</code>指令（一条汇编指令），搭配中断码<code>0x80</code>表示系统调用，OS会转入内核态，设备控制由进程交给OS，OS从寄存器中读取响应的参数，包括对应系统调用的代码，然后执行相应的系统调用，完成之后将返回值写入对应的寄存器，然后将context从栈中重新读取出</p><p>切换到内核态时，进程的context会被存入kernel stack中，类似于用户调用函数的原理一样，但是kernel stack相比user space stack需要在内核态才能使用</p><h4 id="trap机制" tabindex="-1"><a class="header-anchor" href="#trap机制"><span>trap机制</span></a></h4><p>系统的中断是通过trap机制实现的 来自硬件的错误、异常，来自进程的系统调用，来自用户输入的指令，都会向OS发送trap信号，接收到信号后如果没有特别设定中断处理程序，trap机制会根据信号的类型，依据trap table找到默认的中断处理程序的位置，并进行调用</p><p>trap table在OS启动时就已经读取完毕，一般在OS的源码内部就以及编写好了</p><h3 id="switching-between-processes" tabindex="-1"><a class="header-anchor" href="#switching-between-processes"><span>Switching Between Processes</span></a></h3><p>上下文切换已经相对熟悉，不用做太多介绍，但是有一个问题是： 如果在一次中断中，正在进行上下文切换，此时另一个中断发生了，那么OS会如何操作呢？ 这一部分将在并发（concurrency）中讲述，将关系到锁的一系列问题</p><p>此外，CPU在同一时间只能运行一个程序，当一般进程占用了CPU时，OS无法直接获得设备的操作权，所以OS一般有两种途径获得一个正在运行其他进程的CPU的操作权：</p><ul><li>当进程触发了中断或者系统调用时，OS可以获得CPU操作权，并判断是否继续运行该进程</li><li>系统启动时会启动一个timer interrupter，每隔一定的时间就触发一次中断，强制将操作递给OS，并进行相应的管理</li></ul><h3 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>summary</span></a></h3><p>重点关键词：</p><ul><li>kernel mode和user mode</li><li>system call和trap机制</li><li>context Switching</li></ul><h3 id="homework" tabindex="-1"><a class="header-anchor" href="#homework"><span>homework</span></a></h3><p>课后要求估计上下文切换的时间和系统调用的时间</p><p>系统调用的时间比较好测量，在一次系统调用前后加上一个时间获取函数，然后相减即可，为提高精度还需要再减去两次连续使用的时间函数（去掉时间函数调用本身花耗的时间），并且提高测量次数</p><p>上线文切换相对比较麻烦，为了完成上下文切换的性能评估需要关注几点：</p><ul><li>保证两个进程在同一个CPU上运行</li><li>排除时间函数本身的函数调用时间</li></ul><p>为此我们需要写两个进程，一个运行无限循环，并在每次循环中放弃进程（通过<code>sched_yield()</code>方法），然后再写一个进程进行有限次数的循环，在每次循环中放弃进程，这样有限次循环花费的时间就大约是进程间上下文切换的总和，除以进程次数就是一轮切换的平均时间</p><p>代码如下： 固定次数部分：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_GNU_SOURCE</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sched.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/time.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> pid <span class="token operator">=</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> pid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">timeval</span> tv<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">timeval</span> tv_2<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">timezone</span> tz<span class="token punctuation">;</span>
    <span class="token class-name">cpu_set_t</span> cst<span class="token punctuation">;</span>
    <span class="token function">CPU_SET</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>cst<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> t_0 <span class="token operator">=</span> <span class="token function">sched_setaffinity</span><span class="token punctuation">(</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>cst<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>cst<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">double</span> t_1 <span class="token operator">=</span> <span class="token function">gettimeofday</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tv<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tz<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%ld.%ld\\n&quot;</span><span class="token punctuation">,</span> tv<span class="token punctuation">.</span>tv_sec<span class="token punctuation">,</span> tv<span class="token punctuation">.</span>tv_usec<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> times <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    t_1 <span class="token operator">=</span> <span class="token function">gettimeofday</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tv<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tz<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">2000000</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">sched_yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    t_1 <span class="token operator">=</span> <span class="token function">gettimeofday</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tv_2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tz<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%ld.%ld\\n&quot;</span><span class="token punctuation">,</span> tv_2<span class="token punctuation">.</span>tv_sec <span class="token operator">-</span> tv<span class="token punctuation">.</span>tv_sec<span class="token punctuation">,</span> tv_2<span class="token punctuation">.</span>tv_usec <span class="token operator">-</span> tv<span class="token punctuation">.</span>tv_usec<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先<code>sched_setaffinity()</code>设置了一个进程只能运行的cpu集合，把该进程固定在一个CPU上 然后 <code>gettimeofday()</code>获得当前的时间，固定循环记录上下文切换的总时间，但是上面的代码并没有考虑 <code>gettimeofday()</code>本身函数调用花耗的时间</p><p>无限循环部分：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_GNU_SOURCE</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sched.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/time.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> pid <span class="token operator">=</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> pid<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">cpu_set_t</span> cst<span class="token punctuation">;</span>
    <span class="token function">CPU_SET</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>cst<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sched_setaffinity</span><span class="token punctuation">(</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>cst<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>cst<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">sched_yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和上面类似，但是是无限循环，所以需要先启动这个进程</p><p>最后计算结果一轮上下文切换为1600ns左右，一次则为800ns左右，由于我使用的是虚拟机，所以和实际机器的上下文切换可能有所不同，另外，由于OS的进程调度机制，所以上下文切换的次数可能会比循环次数多许多，难以验证这样的计算结果</p>`,37),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","CH1-directExecution.html.vue"]]),k=JSON.parse(`{"path":"/posts/operating-system/ostep/CH1-directExecution.html","title":"直接运行程序","lang":"zh-CN","frontmatter":{"date":"2021-01-01T00:00:00.000Z","title":"直接运行程序","tag":["operating-system","计算机系统","直接运行程序","进程","内存"],"categories":["操作系统","Three-Easy-Pieces"],"mathjax":true,"description":"这一部分主要分为两个主题： 如何限制进程对设备的访问更改，又能让进程一定程度上调用设备 如何在多个进程之间切换 Restricted Operations 引入权限分层 为了限制进程对内存或者其他设备的访问、更改等，OS引入了两个不同的模式： user mode kernel mode 在user mode中，程序只能执行有限的指令、访问有限的空间，如...","head":[["meta",{"property":"og:url","content":"https://Dnullp.github.io/posts/operating-system/ostep/CH1-directExecution.html"}],["meta",{"property":"og:site_name","content":"Dnull's Blog"}],["meta",{"property":"og:title","content":"直接运行程序"}],["meta",{"property":"og:description","content":"这一部分主要分为两个主题： 如何限制进程对设备的访问更改，又能让进程一定程度上调用设备 如何在多个进程之间切换 Restricted Operations 引入权限分层 为了限制进程对内存或者其他设备的访问、更改等，OS引入了两个不同的模式： user mode kernel mode 在user mode中，程序只能执行有限的指令、访问有限的空间，如..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-14T13:35:40.000Z"}],["meta",{"property":"article:author","content":"Dnull"}],["meta",{"property":"article:tag","content":"operating-system"}],["meta",{"property":"article:tag","content":"计算机系统"}],["meta",{"property":"article:tag","content":"直接运行程序"}],["meta",{"property":"article:tag","content":"进程"}],["meta",{"property":"article:tag","content":"内存"}],["meta",{"property":"article:published_time","content":"2021-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-14T13:35:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"直接运行程序\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-14T13:35:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dnull\\",\\"url\\":\\"https://Dnullp.github.io\\"}]}"]]},"headers":[{"level":3,"title":"Restricted Operations","slug":"restricted-operations","link":"#restricted-operations","children":[]},{"level":3,"title":"Switching Between Processes","slug":"switching-between-processes","link":"#switching-between-processes","children":[]},{"level":3,"title":"summary","slug":"summary","link":"#summary","children":[]},{"level":3,"title":"homework","slug":"homework","link":"#homework","children":[]}],"git":{"createdTime":1712936892000,"updatedTime":1713101740000,"contributors":[{"name":"DnullP","email":"dnull123p@gmail.com","commits":2}]},"readingTime":{"minutes":5.11,"words":1534},"filePathRelative":"posts/operating-system/ostep/CH1-directExecution.md","localizedDate":"2021年1月1日","excerpt":"<p>这一部分主要分为两个主题：</p>\\n<ul>\\n<li>如何限制进程对设备的访问更改，又能让进程一定程度上调用设备</li>\\n<li>如何在多个进程之间切换</li>\\n</ul>\\n<h3>Restricted Operations</h3>\\n<h4>引入权限分层</h4>\\n<p>为了限制进程对内存或者其他设备的访问、更改等，OS引入了两个不同的模式：</p>\\n<ul>\\n<li>user mode</li>\\n<li>kernel mode</li>\\n</ul>\\n<p>在user mode中，程序只能执行有限的指令、访问有限的空间，如果程序试图访问一个非法的内存位置，那么OS将会中断程序</p>","autoDesc":true}`);export{d as comp,k as data};
