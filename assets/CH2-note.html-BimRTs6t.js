import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as r,c as i,a as t,b as e,d as s,e as l}from"./app-DCTCPPGQ.js";const c={},p=l(`<h2 id="一些关键词及含义的记录" tabindex="-1"><a class="header-anchor" href="#一些关键词及含义的记录"><span>一些关键词及含义的记录</span></a></h2><h3 id="left-associative-right-associative" tabindex="-1"><a class="header-anchor" href="#left-associative-right-associative"><span>left-associative, right-associative</span></a></h3><ul><li><p>left-associative 如果一个运算符的结果是从左到右结合的, 则为left-associative, 比如加减乘除都是left-associative的</p></li><li><p>right-associative 如果一个运算符的结果是从右到左结合的, 则为right-associative, 比如幂运算和赋值就是right-associative的</p></li></ul><h3 id="ambiguity" tabindex="-1"><a class="header-anchor" href="#ambiguity"><span>ambiguity</span></a></h3><p>如果一个语言可以通过文法产生多个不同的语法树, 则称该文法是ambiguous的</p><p>可以通过给运算加上优先级来消除ambiguity, 比如可以写出四则运算的文法如下:</p><div class="language-ebnf line-numbers-mode" data-ext="ebnf" data-title="ebnf"><pre class="language-ebnf"><code>&lt;<span class="token rule">expr</span>&gt; ::<span class="token operator">=</span> &lt;<span class="token rule">expr</span>&gt; + &lt;<span class="token rule">term</span>&gt; <span class="token operator">|</span> &lt;<span class="token rule">expr</span>&gt; <span class="token operator">-</span> &lt;<span class="token rule">term</span>&gt; <span class="token operator">|</span> &lt;<span class="token rule">term</span>&gt;
&lt;<span class="token rule">term</span>&gt; ::<span class="token operator">=</span> &lt;<span class="token rule">term</span>&gt; <span class="token operator">*</span> &lt;<span class="token rule">factor</span>&gt; <span class="token operator">|</span> &lt;<span class="token rule">term</span>&gt; <span class="token operator">/</span> &lt;<span class="token rule">factor</span>&gt; <span class="token operator">|</span> &lt;<span class="token rule">factor</span>&gt;
&lt;<span class="token rule">factor</span>&gt; ::<span class="token operator">=</span> <span class="token punctuation">(</span> &lt;<span class="token rule">expr</span>&gt; <span class="token punctuation">)</span> <span class="token operator">|</span> &lt;<span class="token rule">number</span>&gt;
&lt;<span class="token rule">number</span>&gt; ::<span class="token operator">=</span> 0 <span class="token operator">|</span> 1 <span class="token operator">|</span> 2 <span class="token operator">|</span> 3 <span class="token operator">|</span> 4 <span class="token operator">|</span> 5 <span class="token operator">|</span> 6 <span class="token operator">|</span> 7 <span class="token operator">|</span> 8 <span class="token operator">|</span> 9
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="abstract-syntax-tree-concrete-syntax-tree" tabindex="-1"><a class="header-anchor" href="#abstract-syntax-tree-concrete-syntax-tree"><span>abstract syntax tree, concrete syntax tree</span></a></h3>`,8),d=t("code",null,"a + b + c",-1),u=t("code",null,"a + b + c",-1);function m(h,g){const a=o("Mermaid");return r(),i("div",null,[p,t("ul",null,[t("li",null,[e("abstract syntax tree 语法树, 用来表示语法结构, 一般用来表示语法分析的结果 使用程序中的结构来作为节点, 比如"),d,e("的语法树如下:"),s(a,{id:"mermaid-36",code:"eJxLL0osyFAIceEqMIzWjlXQ1bVTSASywYwCI6AQV4ERmJMEYyRzAQBnKwxx"})]),t("li",null,[e("concrete syntax tree 解析树(parse tree), 用非终结符作为节点, 用来表示语法结构 使用文法中的符号来作为节点, 比如"),u,e("的解析树如下:"),s(a,{id:"mermaid-42",code:"eJxLL0osyFAIceEqMIxOrSgoilXQ1bVTKDCCcICiEL5xtDaCYxJdklqUC+QbQfimMMVQvhlYMZRjDlNsCuFbwPgmEL5ldDKQYw7hGBpEJwF5FlCeYXRiLBcAtKYsog=="})])])])}const b=n(c,[["render",m],["__file","CH2-note.html.vue"]]),f=JSON.parse(`{"path":"/posts/CS/compiler/CH2-note.html","title":"编译原理-A-Simple-directed-translator","lang":"zh-CN","frontmatter":{"title":"编译原理-A-Simple-directed-translator","tags":["compiler","词法分析","语法分析","语义分析","中间代码生成"],"categories":["compiler"],"math":true,"date":"2023-04-10T00:00:00.000Z","description":"一些关键词及含义的记录 left-associative, right-associative left-associative 如果一个运算符的结果是从左到右结合的, 则为left-associative, 比如加减乘除都是left-associative的 right-associative 如果一个运算符的结果是从右到左结合的, 则为right-...","head":[["meta",{"property":"og:url","content":"https://Dnullp.github.io/posts/CS/compiler/CH2-note.html"}],["meta",{"property":"og:site_name","content":"Dnull's Blog"}],["meta",{"property":"og:title","content":"编译原理-A-Simple-directed-translator"}],["meta",{"property":"og:description","content":"一些关键词及含义的记录 left-associative, right-associative left-associative 如果一个运算符的结果是从左到右结合的, 则为left-associative, 比如加减乘除都是left-associative的 right-associative 如果一个运算符的结果是从右到左结合的, 则为right-..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Dnull"}],["meta",{"property":"article:tag","content":"compiler"}],["meta",{"property":"article:tag","content":"词法分析"}],["meta",{"property":"article:tag","content":"语法分析"}],["meta",{"property":"article:tag","content":"语义分析"}],["meta",{"property":"article:tag","content":"中间代码生成"}],["meta",{"property":"article:published_time","content":"2023-04-10T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"编译原理-A-Simple-directed-translator\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-04-10T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dnull\\",\\"url\\":\\"https://Dnullp.github.io\\"}]}"]]},"headers":[{"level":2,"title":"一些关键词及含义的记录","slug":"一些关键词及含义的记录","link":"#一些关键词及含义的记录","children":[{"level":3,"title":"left-associative, right-associative","slug":"left-associative-right-associative","link":"#left-associative-right-associative","children":[]},{"level":3,"title":"ambiguity","slug":"ambiguity","link":"#ambiguity","children":[]},{"level":3,"title":"abstract syntax tree, concrete syntax tree","slug":"abstract-syntax-tree-concrete-syntax-tree","link":"#abstract-syntax-tree-concrete-syntax-tree","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.21,"words":363},"filePathRelative":"posts/CS/compiler/CH2-note.md","localizedDate":"2023年4月10日","excerpt":"<h2>一些关键词及含义的记录</h2>\\n<h3>left-associative, right-associative</h3>\\n<ul>\\n<li>\\n<p>left-associative\\n如果一个运算符的结果是从左到右结合的, 则为left-associative, 比如加减乘除都是left-associative的</p>\\n</li>\\n<li>\\n<p>right-associative\\n如果一个运算符的结果是从右到左结合的, 则为right-associative, 比如幂运算和赋值就是right-associative的</p>\\n</li>\\n</ul>\\n<h3>ambiguity</h3>","autoDesc":true}`);export{b as comp,f as data};
