import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as p,c as e,e as a,a as n,b as s}from"./app-DCTCPPGQ.js";const o="/assets/2_1-CTDIlMFd.png",l="/assets/2_2-DkEtKdSO.png",c="/assets/2_3-CcZ82C3p.png",i="/assets/2_4-BB5nAEqj.png",r={},u=a(`<p><strong>信息学竞赛 = 算法 + 数据结构</strong></p><h3 id="什么是数据结构" tabindex="-1"><a class="header-anchor" href="#什么是数据结构"><span>什么是数据结构？</span></a></h3><p>数据结构是储存数据的方式</p><h3 id="数据结构和算法之间的关系" tabindex="-1"><a class="header-anchor" href="#数据结构和算法之间的关系"><span>数据结构和算法之间的关系</span></a></h3><p>按照某种方式储存的数据可以更加方便快速地执行某些算法</p><h3 id="数据结构的简单分类" tabindex="-1"><a class="header-anchor" href="#数据结构的简单分类"><span>数据结构的简单分类</span></a></h3><p>线性数据结构</p><p>图</p><p>树型结构</p><h3 id="一个简单的例子" tabindex="-1"><a class="header-anchor" href="#一个简单的例子"><span>一个简单的例子</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">Student</span>
<span class="token punctuation">{</span>
    string name<span class="token punctuation">;</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">bool</span> gender<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这也可以算作一种数据结构，通过这种结构方式，我们可以很容易的通过排序算法来把一堆学生按照年龄或者姓名进行排序</p><h2 id="线性数据结构" tabindex="-1"><a class="header-anchor" href="#线性数据结构"><span>线性数据结构</span></a></h2><p>线性数据结构像是数组这样的，每个数据都有明确的“上一个数据”和“下一个数据”，这样的数据组成形式</p><h3 id="栈" tabindex="-1"><a class="header-anchor" href="#栈"><span>栈</span></a></h3><p>设定一个数组，所有的数据都只能从其中一个方向进入和移出，满足先进先出规则</p><p><img src="`+o+`" alt="" loading="lazy">)</p><h4 id="stl模板中的栈" tabindex="-1"><a class="header-anchor" href="#stl模板中的栈"><span>STL模板中的栈</span></a></h4><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> test<span class="token punctuation">;</span>
    test<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> test<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    test<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>STL模板中的栈是<strong>容器适配器</strong>，不是容器</p><h4 id="计算机中的栈" tabindex="-1"><a class="header-anchor" href="#计算机中的栈"><span>计算机中的栈</span></a></h4><p>栈空间：计算机在编译阶段就完成的空间分配，一般有大小限制</p><p><strong>递归调用栈的原理</strong>：</p><p>C++程序在编译的过程中是先翻译成<strong>汇编语言</strong>，再编译成可直接执行的二进制程序（exe）</p><p>汇编语言和C++一样<strong>从上到下执行</strong>指令，执行指令时会把整个程序拷贝到内存<strong>栈空间</strong>中，但是每个函数在栈空间中的<strong>地址</strong>不一样，所以在<strong>调用函数</strong>时需要从内存的一个位置跳转到另一个位置，并记录下原来的地址，在执行完调用的函数后跳回原本的函数</p><p>这个记录下的<strong>原地址</strong>就储存在提前分配好大小的栈空间中，所以如果<strong>递归函数</strong>调用自身的次数过多，就会使数据超出规定的栈空间大小，造成<strong>内存泄漏</strong></p><p>此时如果你使用的是dev，那么程序就会<strong>默不作声</strong>地结束掉，就像是自己的程序没有输出结果一样</p><h4 id="练习" tabindex="-1"><a class="header-anchor" href="#练习"><span>练习：</span></a></h4><p>不做具体题目了，用数组自行实现一个栈结构，要求功能：</p><ol><li>push()</li><li>pop()</li><li>top()</li><li>正确处理空栈时执行pop()的错误</li></ol><p>考虑一下栈和计算表达式中的括号匹配的关系</p><h3 id="队列" tabindex="-1"><a class="header-anchor" href="#队列"><span>队列</span></a></h3><p>队列和栈比较相似，其满足的性质是：<strong>数据从一边进入，从另一边移出</strong></p><p>相比栈在计算机中的基本应用，队列更多的是在算法层面提供帮助</p><p>通过一边进一边出并且不改变数据的顺序，我们可以通过队列实现对某些非线性数据结构的线性处理</p><p>比如之后要说的：BFS算法</p><p>单独考队列也不太可能，所以如果没有特别需求同样可以使用STL模板中的queue满足基本使用</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> test<span class="token punctuation">;</span>
    test<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> test<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> test<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    test<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="练习-1" tabindex="-1"><a class="header-anchor" href="#练习-1"><span>练习：</span></a></h4><p>如果使用数组实现队列，在数组装满后，移出了一些数据，使得数组的前半部分有空余空间，此时再插入数据的话，数据将从数组的头部进入队列，实现一个<strong>头尾相接</strong>，这样的数组称为<strong>循环队列</strong></p><p>尝试使用数组实现循环队列，要求功能：</p><ol><li>push()</li><li>pop()</li><li>front()</li><li>back()</li></ol><h3 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h3><p>数组本质不是指针，而是包含了一段<strong>连续内存空间</strong>的<strong>基址指针</strong>，和数组大小的一种数据结构</p><p>直接使用数组名，数组会返回该数组的<strong>基址指针</strong></p><p><code>*(a+10) == a[10]</code></p><p>因为数组在内存空间中是连续的，所以可以使用下标进行<strong>随机访问</strong></p><p><strong>动态数组</strong>：要学就连上STL中的基础容器一起学</p><h3 id="链表" tabindex="-1"><a class="header-anchor" href="#链表"><span>链表</span></a></h3>`,49),d=n("p",null,[s("数组在内存中是连续的，所以可以通过"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",null,"∗"),n("mo",{stretchy:"false"},"("),n("mi",null,"a"),n("mo",null,"+"),n("mn",null,"10"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"*(a+10)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord"},"∗"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"a"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord"},"10"),n("span",{class:"mclose"},")")])])]),s("这样的指针计算直接得到某个位置的数据，而链表在内存中是"),n("strong",null,"碎片化"),s("储存的，通过指针将其链接起来")],-1),h=a('<p><img src="'+l+`" alt="" loading="lazy">)</p><p>这种结构使得链表不能像数组一样通过计算定位某个元素的位置，所以要得到任何元素都必须通过<strong>遍历</strong>的方式</p><p>相对应的，其优点是进行批量的<strong>数据删除、添加</strong>可以比数组更快、更方便，并且链表数据容量是不固定的，可以随时加入更多的元素，而数组在编译阶段就固定了数据容量</p><h4 id="计算机中的链表" tabindex="-1"><a class="header-anchor" href="#计算机中的链表"><span>计算机中的链表</span></a></h4><p>我们知道（至少你现在知道了），数据在内存中是<strong>碎片化储存</strong>的，当我们需要分配一块新的内存时，需要从碎片化的<strong>空闲内存</strong>中找出一片合适的内存，并从中分割内存</p><p>当一块占用内存使用完毕需要释放后，我们需要把他和相邻的空闲内存合并</p><p>管理这样<strong>分散</strong>的内存块很明显使用链表会更加方便，这样在计算机系统中用于管理内存的链表我们称为<strong>空闲链表</strong>，是计算机内存管理的重要组成</p><h4 id="链表的使用" tabindex="-1"><a class="header-anchor" href="#链表的使用"><span>链表的使用</span></a></h4><p>链表同样一般不会出单独的题目进行考察，如果没有特殊需要推荐使用STL中的<strong>List</strong>容器</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> test<span class="token punctuation">;</span>
   test<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   test<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   test<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   test<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   test<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>链表的实现可以使用<strong>指针</strong>和<strong>类</strong>，进行比较标准的实现，如果不熟悉面向对象编程和指针，也可以使用数组进行实现</p><p>在oi竞赛里用数组模拟链表、树这类需要指针的情况非常常见，一般说法是：用数组模拟可以比用指针更快，空间占用更多，但是如果按照更规范的写法，仍然使用指针和类实现</p><h4 id="练习-2" tabindex="-1"><a class="header-anchor" href="#练习-2"><span>练习</span></a></h4><p>按照你的习惯，编写一个链表的基本实现，功能要求：</p><ol><li>insert()//从中间插入数据</li><li>remove()//从中间删除数据</li></ol><h4 id="线性结构相关题" tabindex="-1"><a class="header-anchor" href="#线性结构相关题"><span>线性结构相关题</span></a></h4><p>简单题： P1449 后缀表达式 P1996 约瑟夫问题</p><h2 id="图" tabindex="-1"><a class="header-anchor" href="#图"><span>图</span></a></h2><h3 id="什么是图" tabindex="-1"><a class="header-anchor" href="#什么是图"><span>什么是图？</span></a></h3><p>一种用节点和边链接而成的非线性结构</p><p><img src="`+c+'" alt="" loading="lazy">)</p><p><strong>连通块</strong>：节点之间满足两两联通的部分</p><h3 id="什么是树" tabindex="-1"><a class="header-anchor" href="#什么是树"><span>什么是树？</span></a></h3><p>满足<strong>边的数量=节点数量 - 1</strong>的联通图</p><h3 id="图的储存方式" tabindex="-1"><a class="header-anchor" href="#图的储存方式"><span>图的储存方式</span></a></h3><h5 id="邻接矩阵" tabindex="-1"><a class="header-anchor" href="#邻接矩阵"><span>邻接矩阵：</span></a></h5><p><img src="'+i+'" alt="" loading="lazy">)</p><p>实现方式：二位数组</p><h5 id="邻接表" tabindex="-1"><a class="header-anchor" href="#邻接表"><span>邻接表：</span></a></h5><p>每个节点建立一个数组（链表），储存以该节点为起点，通往相邻节点的边</p><h3 id="树的储存方式" tabindex="-1"><a class="header-anchor" href="#树的储存方式"><span>树的储存方式</span></a></h3><p>和图一样</p><h4 id="练习-3" tabindex="-1"><a class="header-anchor" href="#练习-3"><span>练习</span></a></h4><p>尝试上面的建图方法，并且输出每个节点所连接的边的数量</p><h2 id="二叉树" tabindex="-1"><a class="header-anchor" href="#二叉树"><span>二叉树</span></a></h2><p>每个节点都最多只有两个儿子的树</p><p>二叉树可以用数组的方式储存</p>',37),k=[u,d,h];function g(m,v){return p(),e("div",null,k)}const x=t(r,[["render",g],["__file","dataStruct-S.html.vue"]]),_=JSON.parse(`{"path":"/posts/algorithm/oi/learning-note/dataStruct-S.html","title":"简单数据结构","lang":"zh-CN","frontmatter":{"date":"2021-01-01T00:00:00.000Z","title":"简单数据结构","tag":["数据结构","教学资料"],"categories":["OI算法和数据结构"],"mathjax":true,"description":"信息学竞赛 = 算法 + 数据结构 什么是数据结构？ 数据结构是储存数据的方式 数据结构和算法之间的关系 按照某种方式储存的数据可以更加方便快速地执行某些算法 数据结构的简单分类 线性数据结构 图 树型结构 一个简单的例子 这也可以算作一种数据结构，通过这种结构方式，我们可以很容易的通过排序算法来把一堆学生按照年龄或者姓名进行排序 线性数据结构 线性数...","head":[["meta",{"property":"og:url","content":"https://Dnullp.github.io/posts/algorithm/oi/learning-note/dataStruct-S.html"}],["meta",{"property":"og:site_name","content":"Dnull's Blog"}],["meta",{"property":"og:title","content":"简单数据结构"}],["meta",{"property":"og:description","content":"信息学竞赛 = 算法 + 数据结构 什么是数据结构？ 数据结构是储存数据的方式 数据结构和算法之间的关系 按照某种方式储存的数据可以更加方便快速地执行某些算法 数据结构的简单分类 线性数据结构 图 树型结构 一个简单的例子 这也可以算作一种数据结构，通过这种结构方式，我们可以很容易的通过排序算法来把一堆学生按照年龄或者姓名进行排序 线性数据结构 线性数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-14T13:35:40.000Z"}],["meta",{"property":"article:author","content":"Dnull"}],["meta",{"property":"article:tag","content":"数据结构"}],["meta",{"property":"article:tag","content":"教学资料"}],["meta",{"property":"article:published_time","content":"2021-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-14T13:35:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"简单数据结构\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-14T13:35:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dnull\\",\\"url\\":\\"https://Dnullp.github.io\\"}]}"]]},"headers":[{"level":3,"title":"什么是数据结构？","slug":"什么是数据结构","link":"#什么是数据结构","children":[]},{"level":3,"title":"数据结构和算法之间的关系","slug":"数据结构和算法之间的关系","link":"#数据结构和算法之间的关系","children":[]},{"level":3,"title":"数据结构的简单分类","slug":"数据结构的简单分类","link":"#数据结构的简单分类","children":[]},{"level":3,"title":"一个简单的例子","slug":"一个简单的例子","link":"#一个简单的例子","children":[]},{"level":2,"title":"线性数据结构","slug":"线性数据结构","link":"#线性数据结构","children":[{"level":3,"title":"栈","slug":"栈","link":"#栈","children":[]},{"level":3,"title":"队列","slug":"队列","link":"#队列","children":[]},{"level":3,"title":"数组","slug":"数组","link":"#数组","children":[]},{"level":3,"title":"链表","slug":"链表","link":"#链表","children":[]}]},{"level":2,"title":"图","slug":"图","link":"#图","children":[{"level":3,"title":"什么是图？","slug":"什么是图","link":"#什么是图","children":[]},{"level":3,"title":"什么是树？","slug":"什么是树","link":"#什么是树","children":[]},{"level":3,"title":"图的储存方式","slug":"图的储存方式","link":"#图的储存方式","children":[]},{"level":3,"title":"树的储存方式","slug":"树的储存方式","link":"#树的储存方式","children":[]}]},{"level":2,"title":"二叉树","slug":"二叉树","link":"#二叉树","children":[]}],"git":{"createdTime":1712936892000,"updatedTime":1713101740000,"contributors":[{"name":"DnullP","email":"dnull123p@gmail.com","commits":2}]},"readingTime":{"minutes":5.97,"words":1792},"filePathRelative":"posts/algorithm/oi/learning-note/dataStruct-S.md","localizedDate":"2021年1月1日","excerpt":"<p><strong>信息学竞赛 = 算法 + 数据结构</strong></p>\\n<h3>什么是数据结构？</h3>\\n<p>数据结构是储存数据的方式</p>\\n<h3>数据结构和算法之间的关系</h3>\\n<p>按照某种方式储存的数据可以更加方便快速地执行某些算法</p>\\n<h3>数据结构的简单分类</h3>\\n<p>线性数据结构</p>\\n<p>图</p>\\n<p>树型结构</p>\\n<h3>一个简单的例子</h3>\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Student</span>\\n<span class=\\"token punctuation\\">{</span>\\n    string name<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">int</span> age<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">bool</span> gender<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}`);export{x as comp,_ as data};
