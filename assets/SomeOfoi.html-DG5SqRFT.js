import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as n,f as o,a as e,b as a,e as i}from"./app-DCTCPPGQ.js";const r={},l=e("p",null,[a("关于标准库，大概远不止我们常用的那些容器，C++中还有很多的类值得深究"),e("br"),a(" 本文只是记录学习（复习）过程中的碎片化知识，不是系统性知识整理")],-1),c=i(`<h2 id="wchar-t" tabindex="-1"><a class="header-anchor" href="#wchar-t"><span>wchar_t</span></a></h2><p>字符类型，一种扩展储存方式，一般用于储存Unicode字符</p><h2 id="istream-ostream-iostream" tabindex="-1"><a class="header-anchor" href="#istream-ostream-iostream"><span>istream,ostream,iostream</span></a></h2><p>三种流的控制类，<code>cin</code>，<code>cout</code>，<code>cerr</code>等都是其对象</p><h2 id="ifstream-ofstream-fstream" tabindex="-1"><a class="header-anchor" href="#ifstream-ofstream-fstream"><span>ifstream,ofstream,fstream</span></a></h2><p>文件的读写流</p><h2 id="宽字符流输入输出" tabindex="-1"><a class="header-anchor" href="#宽字符流输入输出"><span>宽字符流输入输出</span></a></h2><ul><li>wistream,wostream,wiostream</li><li>wifstream,wofstream,wfstream</li></ul><h2 id="流对象的状态" tabindex="-1"><a class="header-anchor" href="#流对象的状态"><span>流对象的状态</span></a></h2><p>根据Primer和reference上的说明，返回值可以判定当前流对象是否有效，而通过<code>rdstate()</code>函数可以得到流对象更具体的状态情况，返回值是一个<code>ios::iostate</code>的类型，其储存了状态的位掩码信息</p><p>我无需知道每种状态对应的位，在<code>ios</code>域中已经定义几种常量表达式：</p><ul><li>eofbit——文件结束的状态（读到了文件结束符</li><li>badbit——流崩溃状态</li><li>goodbit——无错误状态</li><li>failbit——IO失败状态</li></ul><p>用当前状态与对应的状态位掩码做与运算即可得到是否处于某种状态</p><ul><li><code>setstate()</code>：设置当前流的状态</li><li><code>clear()</code>：修复当前流的状态为有效状态</li></ul><h2 id="输出缓冲" tabindex="-1"><a class="header-anchor" href="#输出缓冲"><span>输出缓冲</span></a></h2><p>C++的<code>cout</code>中有一个输出缓冲区，其中储存了插入的内容，并把这些内容整合成一个整体，再输出，以节省输出操作的成本</p><p>刷新缓冲区的原因很多，<strong>但是程序崩溃时是不会刷新缓冲区的</strong></p><ul><li><code>flush</code>函数可以手动刷新缓冲区</li><li>通过查看endl的实现部分：</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>basic_ostream<span class="token operator">&lt;</span>_Elem<span class="token punctuation">,</span> _Traits<span class="token operator">&gt;</span><span class="token operator">&amp;</span> __CLRCALL_OR_CDECL <span class="token function">endl</span><span class="token punctuation">(</span>
    basic_ostream<span class="token operator">&lt;</span>_Elem<span class="token punctuation">,</span> _Traits<span class="token operator">&gt;</span><span class="token operator">&amp;</span> _Ostr<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// insert newline and flush stream</span>
    _Ostr<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>_Ostr<span class="token punctuation">.</span><span class="token function">widen</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    _Ostr<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> _Ostr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现，endl内部使用了<code>flush</code>函数，刷新了缓冲区</p><h3 id="关联输入和输出流" tabindex="-1"><a class="header-anchor" href="#关联输入和输出流"><span>关联输入和输出流</span></a></h3><p>输入流和输出流都可以和另一个输出流关联，一旦这个输入流（输出流）执行操作，在此之前都会先刷新一遍关联的输出流</p><ul><li><code>tie()</code>函数返回该流对象的关联流</li><li><code>tie(ostream)</code>将流对象关联到一个输出流</li></ul><h2 id="文件输入输出流" tabindex="-1"><a class="header-anchor" href="#文件输入输出流"><span>文件输入输出流</span></a></h2><p>文件操作流继承自输入输出流，所以可用于输入输出流的操作都可适用于文件流 除此之外，可使用<code>open(string,mode)</code>函数把流对象和文件绑定在一起</p><h3 id="文件模式" tabindex="-1"><a class="header-anchor" href="#文件模式"><span>文件模式</span></a></h3><ul><li>in——读模式</li><li>out——写模式</li><li>app——写操作前定位到文件末尾</li><li>ate——打开文件定位到文件末尾</li><li>trunc——截断模式</li><li>binary——以二进制进行IO</li></ul><p>文件模式的使用有一套复杂的使用规则，暂且先不讨论每一种模式的使用和叠加</p><p>使用<code>out</code>模式时，文件的内容会被自动舍弃，加上<code>app</code>模式后可以自动定位到文件末尾追加内容</p><h2 id="string流" tabindex="-1"><a class="header-anchor" href="#string流"><span>string流</span></a></h2><p><code>stringstream</code>类包含在<code>sstream</code>头文件中</p><p>string流使用了一个字符串缓冲区，加入一个字符串在其中，进行析取操作<br> 但是加入其缓冲区的字符串仅作为储存，不会像<code>iostream</code>一样打印内容</p><p><code>stringstream</code>类继承自<code>iostream</code>类，所以可以用于流对象的操作，都可用于字符串流对象</p>`,33);function p(d,m){return s(),n("div",null,[l,o(" more -"),c])}const f=t(r,[["render",p],["__file","SomeOfoi.html.vue"]]),g=JSON.parse(`{"path":"/posts/program-language/CPP-notes/SomeOfoi.html","title":"C++的OI对象的碎片知识","lang":"zh-CN","frontmatter":{"date":"2021-01-01T00:00:00.000Z","title":"C++的OI对象的碎片知识","tag":["C++","OI"],"categories":["C++学习记录"],"mathjax":true,"description":"关于标准库，大概远不止我们常用的那些容器，C++中还有很多的类值得深究 本文只是记录学习（复习）过程中的碎片化知识，不是系统性知识整理 wchar_t 字符类型，一种扩展储存方式，一般用于储存Unicode字符 istream,ostream,iostream 三种流的控制类，cin，cout，cerr等都是其对象 ifstream,ofstream,...","head":[["meta",{"property":"og:url","content":"https://Dnullp.github.io/posts/program-language/CPP-notes/SomeOfoi.html"}],["meta",{"property":"og:site_name","content":"Dnull's Blog"}],["meta",{"property":"og:title","content":"C++的OI对象的碎片知识"}],["meta",{"property":"og:description","content":"关于标准库，大概远不止我们常用的那些容器，C++中还有很多的类值得深究 本文只是记录学习（复习）过程中的碎片化知识，不是系统性知识整理 wchar_t 字符类型，一种扩展储存方式，一般用于储存Unicode字符 istream,ostream,iostream 三种流的控制类，cin，cout，cerr等都是其对象 ifstream,ofstream,..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Dnull"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:tag","content":"OI"}],["meta",{"property":"article:published_time","content":"2021-01-01T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C++的OI对象的碎片知识\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-01-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dnull\\",\\"url\\":\\"https://Dnullp.github.io\\"}]}"]]},"headers":[{"level":2,"title":"wchar_t","slug":"wchar-t","link":"#wchar-t","children":[]},{"level":2,"title":"istream,ostream,iostream","slug":"istream-ostream-iostream","link":"#istream-ostream-iostream","children":[]},{"level":2,"title":"ifstream,ofstream,fstream","slug":"ifstream-ofstream-fstream","link":"#ifstream-ofstream-fstream","children":[]},{"level":2,"title":"宽字符流输入输出","slug":"宽字符流输入输出","link":"#宽字符流输入输出","children":[]},{"level":2,"title":"流对象的状态","slug":"流对象的状态","link":"#流对象的状态","children":[]},{"level":2,"title":"输出缓冲","slug":"输出缓冲","link":"#输出缓冲","children":[{"level":3,"title":"关联输入和输出流","slug":"关联输入和输出流","link":"#关联输入和输出流","children":[]}]},{"level":2,"title":"文件输入输出流","slug":"文件输入输出流","link":"#文件输入输出流","children":[{"level":3,"title":"文件模式","slug":"文件模式","link":"#文件模式","children":[]}]},{"level":2,"title":"string流","slug":"string流","link":"#string流","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.83,"words":849},"filePathRelative":"posts/program-language/CPP-notes/SomeOfoi.md","localizedDate":"2021年1月1日","excerpt":"<p>关于标准库，大概远不止我们常用的那些容器，C++中还有很多的类值得深究<br>\\n本文只是记录学习（复习）过程中的碎片化知识，不是系统性知识整理</p>\\n<!-- more --->\\n<h2>wchar_t</h2>\\n<p>字符类型，一种扩展储存方式，一般用于储存Unicode字符</p>\\n<h2>istream,ostream,iostream</h2>\\n<p>三种流的控制类，<code>cin</code>，<code>cout</code>，<code>cerr</code>等都是其对象</p>\\n<h2>ifstream,ofstream,fstream</h2>\\n<p>文件的读写流</p>","autoDesc":true}`);export{f as comp,g as data};
