import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e}from"./app-DCTCPPGQ.js";const p={},t=e(`<h1 id="环境准备" tabindex="-1"><a class="header-anchor" href="#环境准备"><span>环境准备</span></a></h1><p>环境没有变化, 通过git更新了项目的依赖文件</p><h1 id="编写前准备" tabindex="-1"><a class="header-anchor" href="#编写前准备"><span>编写前准备</span></a></h1><p>这一节没有详尽的指导了, 我们需要自己去阅读源码中的注释来查明需要完成的任务</p><p>首先我们重新看一下内核代码的section:</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>Sections<span class="token operator">:</span>
Idx Name          Size      VMA       LMA       File off  Algn
  <span class="token number">0</span> <span class="token punctuation">.</span>text         <span class="token number">00002091</span>  f0100000  <span class="token number">00100000</span>  <span class="token number">00001000</span>  <span class="token number">2</span><span class="token operator">*</span><span class="token operator">*</span><span class="token number">4</span>
                  CONTENTS<span class="token punctuation">,</span> ALLOC<span class="token punctuation">,</span> LOAD<span class="token punctuation">,</span> READONLY<span class="token punctuation">,</span> CODE
  <span class="token number">1</span> <span class="token punctuation">.</span>rodata       <span class="token number">0000093</span>c  f01020a0  <span class="token number">001020</span>a0  <span class="token number">000030</span>a0  <span class="token number">2</span><span class="token operator">*</span><span class="token operator">*</span><span class="token number">5</span>
                  CONTENTS<span class="token punctuation">,</span> ALLOC<span class="token punctuation">,</span> LOAD<span class="token punctuation">,</span> READONLY<span class="token punctuation">,</span> DATA
  <span class="token number">2</span> <span class="token punctuation">.</span>stab         <span class="token number">000045e5</span>  f01029dc  <span class="token number">001029</span>dc  <span class="token number">000039</span>dc  <span class="token number">2</span><span class="token operator">*</span><span class="token operator">*</span><span class="token number">2</span>
                  CONTENTS<span class="token punctuation">,</span> ALLOC<span class="token punctuation">,</span> LOAD<span class="token punctuation">,</span> READONLY<span class="token punctuation">,</span> DATA
  <span class="token number">3</span> <span class="token punctuation">.</span>stabstr      <span class="token number">00001</span>ad3  f0106fc1  <span class="token number">00106f</span>c1  <span class="token number">00007f</span>c1  <span class="token number">2</span><span class="token operator">*</span><span class="token operator">*</span><span class="token number">0</span>
                  CONTENTS<span class="token punctuation">,</span> ALLOC<span class="token punctuation">,</span> LOAD<span class="token punctuation">,</span> READONLY<span class="token punctuation">,</span> DATA
  <span class="token number">4</span> <span class="token punctuation">.</span>data         <span class="token number">00009300</span>  f0109000  <span class="token number">00109000</span>  <span class="token number">0000</span>a000  <span class="token number">2</span><span class="token operator">*</span><span class="token operator">*</span><span class="token number">12</span>
                  CONTENTS<span class="token punctuation">,</span> ALLOC<span class="token punctuation">,</span> LOAD<span class="token punctuation">,</span> DATA
  <span class="token number">5</span> <span class="token punctuation">.</span>got          <span class="token number">00000008</span>  f0112300  <span class="token number">00112300</span>  <span class="token number">00013300</span>  <span class="token number">2</span><span class="token operator">*</span><span class="token operator">*</span><span class="token number">2</span>
                  CONTENTS<span class="token punctuation">,</span> ALLOC<span class="token punctuation">,</span> LOAD<span class="token punctuation">,</span> DATA
  <span class="token number">6</span> <span class="token punctuation">.</span>got<span class="token punctuation">.</span>plt      <span class="token number">0000000</span>c  f0112308  <span class="token number">00112308</span>  <span class="token number">00013308</span>  <span class="token number">2</span><span class="token operator">*</span><span class="token operator">*</span><span class="token number">2</span>
                  CONTENTS<span class="token punctuation">,</span> ALLOC<span class="token punctuation">,</span> LOAD<span class="token punctuation">,</span> DATA
  <span class="token number">7</span> <span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>local <span class="token number">00001000</span>  f0113000  <span class="token number">00113000</span>  <span class="token number">00014000</span>  <span class="token number">2</span><span class="token operator">*</span><span class="token operator">*</span><span class="token number">12</span>
                  CONTENTS<span class="token punctuation">,</span> ALLOC<span class="token punctuation">,</span> LOAD<span class="token punctuation">,</span> DATA
  <span class="token number">8</span> <span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token punctuation">.</span>local <span class="token number">00000060</span>  f0114000  <span class="token number">00114000</span>  <span class="token number">00015000</span>  <span class="token number">2</span><span class="token operator">*</span><span class="token operator">*</span><span class="token number">5</span>
                  CONTENTS<span class="token punctuation">,</span> ALLOC<span class="token punctuation">,</span> LOAD<span class="token punctuation">,</span> DATA
  <span class="token number">9</span> <span class="token punctuation">.</span>bss          <span class="token number">00000681</span>  f0114060  <span class="token number">00114060</span>  <span class="token number">00015060</span>  <span class="token number">2</span><span class="token operator">*</span><span class="token operator">*</span><span class="token number">5</span>
                  CONTENTS<span class="token punctuation">,</span> ALLOC<span class="token punctuation">,</span> LOAD<span class="token punctuation">,</span> DATA
 <span class="token number">10</span> <span class="token punctuation">.</span>comment      <span class="token number">0000002</span>b  <span class="token number">00000000</span>  <span class="token number">00000000</span>  <span class="token number">000156e1</span>  <span class="token number">2</span><span class="token operator">*</span><span class="token operator">*</span><span class="token number">0</span>
                  CONTENTS<span class="token punctuation">,</span> READONLY
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以很清楚地看到每一个代码段映射到虚拟内存上的地址, 这有利于后续我们进行相应的代码分析和编写</p><h1 id="part-1" tabindex="-1"><a class="header-anchor" href="#part-1"><span>Part 1</span></a></h1><h2 id="boot-alloc" tabindex="-1"><a class="header-anchor" href="#boot-alloc"><span>boot_alloc()</span></a></h2><p>然后我们可以开始准备第一个函数的编写: <code>boot_alloc()</code></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>	<span class="token comment">// Initialize nextfree if this is the first time.</span>
	<span class="token comment">// &#39;end&#39; is a magic symbol automatically generated by the linker,</span>
	<span class="token comment">// which points to the end of the kernel&#39;s bss segment:</span>
	<span class="token comment">// the first virtual address that the linker did *not* assign</span>
	<span class="token comment">// to any kernel code or global variables.</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>nextfree<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">extern</span> <span class="token keyword">char</span> end<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		nextfree <span class="token operator">=</span> <span class="token function">ROUNDUP</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>end<span class="token punctuation">,</span> PGSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数中的这一段代码中的end是通过链接器生成的符号, 指向的是bss的结束位置, 如果查看<code>kernel.sym</code>文件, 可以看到:<code>f01146e0 D end</code>的值确实和内核的bss段的结束位置相近.</p><p>按照实验要求, 我们需要在<code>bss</code>段后面的区域申请新的内存空间, 所以编写对应的代码如下:</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">return</span> nextfree<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">else</span>
	<span class="token punctuation">{</span>
		result <span class="token operator">=</span> nextfree<span class="token punctuation">;</span>
		nextfree <span class="token operator">+=</span> <span class="token function">ROUNDUP</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> PGSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>nextfree <span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">uintptr_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>npages <span class="token operator">*</span> PGSIZE <span class="token operator">+</span> KERNBASE<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;boot_alloc: out of memory\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> result<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当申请的内存空间超出了内存的设备限制后, 则会触发panic 其中的<code>npages</code>是根据内存设备的IO交互计算得到的数据</p><h2 id="mem-init-和-page-init" tabindex="-1"><a class="header-anchor" href="#mem-init-和-page-init"><span>mem_init() 和 page_init()</span></a></h2><p><code>mem_init</code>函数需要实现的部分较多, 在物理内存部分我们只需要给储存<code>PageInfo</code>链表的部分申请空间即可:</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>pages <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">PageInfo</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">boot_alloc</span><span class="token punctuation">(</span>npages <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">PageInfo</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>pages<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> npages <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">PageInfo</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们需要实现并调用<code>page_init()</code>函数, 这个函数负责将<code>PageInfo</code>链表初始化, 将操作系统和其他设备占用的内存地址标记出来, 具体实现如下:</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>	<span class="token class-name">size_t</span> i<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> npages<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			pages<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pp_ref <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> npages_basemem<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			pages<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pp_ref <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
			pages<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pp_link <span class="token operator">=</span> page_free_list<span class="token punctuation">;</span>
			page_free_list <span class="token operator">=</span> <span class="token operator">&amp;</span>pages<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> IOPHYSMEM <span class="token operator">/</span> PGSIZE <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> EXTPHYSMEM <span class="token operator">/</span> PGSIZE<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			pages<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pp_ref <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> EXTPHYSMEM <span class="token operator">/</span> PGSIZE <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> <span class="token function">PADDR</span><span class="token punctuation">(</span><span class="token function">boot_alloc</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> PGSIZE<span class="token punctuation">)</span>
		<span class="token comment">// care: boot_alloc(0) is a virtual address</span>
		<span class="token punctuation">{</span>
			pages<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pp_ref <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span>
		<span class="token punctuation">{</span>
			pages<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pp_ref <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
			pages<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pp_link <span class="token operator">=</span> page_free_list<span class="token punctuation">;</span>
			page_free_list <span class="token operator">=</span> <span class="token operator">&amp;</span>pages<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实没有很麻烦的地方, 只要按照题目中给定的区域, 把占用区域标记为使用, 把未占用区域加入<code>page_list_free</code>中即可. 对于最后一项, 我们需要把已经为<code>page_list_free</code>分配的空间鵺考虑进去, 使用<code>boot_alloc(0)</code>可以获得已经分配空间的end地址.</p><h2 id="page-alloc-和-page-free" tabindex="-1"><a class="header-anchor" href="#page-alloc-和-page-free"><span>page_alloc() 和 page_free()</span></a></h2><p>这两个函数实现也比较简单, 对于前者, 我们只需要从空闲链表中取出一份内存页, 将其从链表中删除返回即可(需要按照要求处理一下清零条件).</p><p>对于后者, 判定一下是否需要回收后, 直接加入空闲链表即可</p><h2 id="exercise-1" tabindex="-1"><a class="header-anchor" href="#exercise-1"><span>exercise 1</span></a></h2><p>该练习需要完成以上函数, 已经完成.</p><h1 id="part-2" tabindex="-1"><a class="header-anchor" href="#part-2"><span>Part 2</span></a></h1><p>对于第二部分, 我们需要建立虚拟内存和物理内存的映射关系, 主要需要实现的函数如下:</p><ul><li>pgdir_walk()</li><li>boot_map_region()</li><li>page_lookup()</li><li>page_remove()</li><li>page_insert()</li></ul><h2 id="exercise-2" tabindex="-1"><a class="header-anchor" href="#exercise-2"><span>exercise 2</span></a></h2><p>完成对X86架构下的段页式内存管理的基本认识</p><p>较为常见的做法是, 每一个段对应一个页表, 通过分段找到段以后, 再找到其对应页表进行翻译</p><h2 id="exercise-3" tabindex="-1"><a class="header-anchor" href="#exercise-3"><span>exercise 3</span></a></h2><p>由于使用的原版的qemu, 并没有练习中提到的<code>info pg</code>, 但是能够使用<code>info mem</code>查看到被映射的内存:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>qemu<span class="token punctuation">)</span> info mem
0000000000000000-0000000000400000 0000000000400000 -r-
00000000f0000000-00000000f0400000 0000000000400000 <span class="token parameter variable">-rw</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在qemu中能看到物理地址, 并且无法通过虚拟地址访问:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>qemu<span class="token punctuation">)</span> xp 0x01
0000000000000001: 0x53f000ff
<span class="token punctuation">(</span>qemu<span class="token punctuation">)</span> xp 0xf0000001
00000000f0000001: Cannot access memory
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在gdb中能通过虚拟地址访问:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> x/x 0x01
0x1:    0x53f000ff
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> x/x 0xf0000001
0xf0000001:     0x53f000ff
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="question" tabindex="-1"><a class="header-anchor" href="#question"><span>question</span></a></h2><p>通过函数返回的指针, 我个人认为此刻应该都使用虚拟地址, 物理地址应该只有涉及到内存管理的部分才会直接使用. 所以应该是<code>uint_t</code></p><h2 id="pgdir-walk" tabindex="-1"><a class="header-anchor" href="#pgdir-walk"><span>pgdir_walk()</span></a></h2><p>这个函数接受一个页表目录指针和一个虚拟地址和一个create的flag, 我们只需要找到pgdir中对应的虚拟地址代表的页表所在, 然后返回页表中对应的页表项即可.</p><p>我们通过阅读mmu.h可以知道虚拟地址的结构, 很容易就能得知我们在这一步需要进行的工作, 再结合注释的提示, 我们可以很容易地完成这一步的编写.</p><h2 id="boot-map-region" tabindex="-1"><a class="header-anchor" href="#boot-map-region"><span>boot_map_region()</span></a></h2><p>这个函数将一段虚拟地址映射到一段物理地址上, 由于地址是以page为单位分配的, 所以我们只需要以page为单位循环值执行pgdir_walk即可:</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span>
<span class="token function">boot_map_region</span><span class="token punctuation">(</span><span class="token class-name">pde_t</span> <span class="token operator">*</span>pgdir<span class="token punctuation">,</span> <span class="token class-name">uintptr_t</span> va<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">,</span> <span class="token class-name">physaddr_t</span> pa<span class="token punctuation">,</span> <span class="token keyword">int</span> perm<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">// Fill this function in</span>
	<span class="token class-name">size_t</span> i<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size <span class="token operator">/</span> PGSIZE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token class-name">pte_t</span> <span class="token operator">*</span>pte <span class="token operator">=</span> <span class="token function">pgdir_walk</span><span class="token punctuation">(</span>pgdir<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>va<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token operator">*</span>pte <span class="token operator">=</span> pa <span class="token operator">|</span> perm <span class="token operator">|</span> PTE_P<span class="token punctuation">;</span>
		va <span class="token operator">+=</span> PGSIZE<span class="token punctuation">;</span>
		pa <span class="token operator">+=</span> PGSIZE<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>个人思考: 我们对虚拟地址进行了分段, 第一段是表示段号, 第二段是页表目录号, 然后是页表号, 最后是页内偏移, 但是我们在分配虚拟地址时还是连续分配的, 这样的分段并不会影响虚拟地址的连续性, 分段只是导致了内存的&quot;进制&quot;不一样, 但是在概念上还是连续的</p><h2 id="page-lookup" tabindex="-1"><a class="header-anchor" href="#page-lookup"><span>page_lookup()</span></a></h2><p>这个函数作用类似于<code>pgdir_walk()</code>, 但是我们需要返回的是一个具体的PageInfo, 简单对pgdir_walk()封装一下即可.</p><h2 id="page-remove" tabindex="-1"><a class="header-anchor" href="#page-remove"><span>page_remove()</span></a></h2><p>函数本身没有值得多介绍的地方, 但是这里涉及到关于页表引用的一个函数, 所以我想就页表的引用计数做一下说明和反思:</p><p>首先我们记录引用是为了在没有代码在使用一个物理页时, 对应的内存页能够被回收进空闲链表, 但是在需要我们实现的函数中, 有些函数专门强调了让我们不要对新申请的内存进行计数, 像是boot_map_region函数:</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">//This function is only intended to set up the \`\`static&#39;&#39; mappings</span>
<span class="token comment">// above UTOP. As such, it should *not* change the pp_ref field on the</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里其实说得很明白, 我们只是在建立内存的静态映射, 并不是真的有内存需要用到这篇内存, 于是在这个函数中我们并不需要对这些PageInfo进行修改, 这些都只是对于内存本身的metadata的管理, 但是储存这些metadata本身是需要消耗内存的, 所以在pgdir_walk函数中, 我们需要对新建立的页表使用的page进行引用计数</p><h2 id="page-insert" tabindex="-1"><a class="header-anchor" href="#page-insert"><span>page_insert()</span></a></h2><p>这个函数映射将一个物理页pp映射到va, 这个函数和之前的boot_map_region()函数不同, 这里是将一个已经分配的物理页映射到虚拟地址上, 具体做法就是在页表对应的虚拟地址的位置上写上物理页PageInfo的地址即可</p><h1 id="part-3" tabindex="-1"><a class="header-anchor" href="#part-3"><span>Part 3</span></a></h1><p>这一部分主要是使用之前完成的函数对内核使用的内存进行虚拟化的映射, 尤其是关于这部分内存权限的限制.</p><p>我们需要完成三个部分的代码补全, 其中我出现明显问题的是第一段, 同时我觉得在此处我需要调整一下之前对page_insert和boot_map_region的理解:</p><div class="language-C line-numbers-mode" data-ext="C" data-title="C"><pre class="language-C"><code>//////////////////////////////////////////////////////////////////////
	// Map &#39;pages&#39; read-only by the user at linear address UPAGES
	// Permissions:
	//    - the new image at UPAGES -- kernel R, user R
	//      (ie. perm = PTE_U | PTE_P)
	//    - pages itself -- kernel RW, user NONE
	// Your code goes here:

	for (size_t i = 0; i &lt; npages; i++)
	{
		page_insert(kern_pgdir, &amp;pages[i], (void *)(UPAGES + i * PGSIZE), PTE_U | PTE_P);
	}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我误将pages指向的全部page当成了我应该映射的pages本身所在的页面, 我实际应该做的是映射pages本身:</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> npages <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">PageInfo</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> PGSIZE<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">page_insert</span><span class="token punctuation">(</span>kern_pgdir<span class="token punctuation">,</span> <span class="token function">pa2page</span><span class="token punctuation">(</span><span class="token function">PADDR</span><span class="token punctuation">(</span>pages<span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>UPAGES <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> PTE_U <span class="token operator">|</span> PTE_P<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上通过boot_map_region()可以更方便实现, 但是这里我选择使用page_insert来加深对各个函数返回虚拟地址的转化问题</p><p>其余两处按照要求可以很容易补全.</p><h2 id="question-1" tabindex="-1"><a class="header-anchor" href="#question-1"><span>question</span></a></h2><ol start="2"><li>由于我们向虚拟内存中映射的部分都有自己在kern_pgdir中对应的页表, 所以我们的代码中有三个映射区域和一个kern_pgdir自己对自己的指针, 所以我们应该可以至少列出4个pde:</li></ol><ul><li><p><code>kern_pgdir[PDX(UVPT)] = PADDR(kern_pgdir) | PTE_U | PTE_P;</code>: PDX通过UVPT计算得到, 虚拟基址为UVPT</p></li><li><p><code>pages</code>通过UPAGES进行映射, 可以得到<code>0x3bc</code>项值为<code>0xef000000</code></p></li><li><p><code>bootstack</code>通过<code>KSTACKTOP - KSTKSIZE</code>映射, 可以计算得到</p></li><li><p><code>KERNBASE</code>用来映射了高于<code>0xf0000000</code>的地址到0地址, 对应PDX为0xec0</p></li></ul><ol start="3"><li><p>我们使用给页表中设置对应的flag来控制不同内存的访问权限, 使用PTE_U能够赋予用户的权限, 否则user不能访问该page</p></li><li><p>理论上来说, 只有高于0xf0000000的地址被重映射到低地址, 其他低地址都是OS可以用来做物理内存的, 如果这些地址全部用上, 我们可以最多使用 4Gb - 256Mb 的内存. 进一步考虑还要加上pages的上限, 由于分配给pages的虚拟内存只有0x400000 = 4Mb, 所以可以分配的PageInfo为 4Mb / 8B = 512k, 也就是说我们最多可以使用 512k * 4kb = 2Gb 的物理内存</p></li><li><p>如果用满了这些内存, 除了4Mb的pages内存, 我们还需要512 * 1000 * 4B = 2Mb的内存来存储PageInfo的信息, 然后需要 1024 * 4B = 4Kb 的内存储存页表目录</p></li><li><div class="language-asm line-numbers-mode" data-ext="asm" data-title="asm"><pre class="language-asm"><code> # Load the physical address of entry_pgdir into cr3.  entry_pgdir
 # is defined in entrypgdir.c.
 movl	$(RELOC(entry_pgdir)), %eax
 movl	%eax, %cr3
 # Turn on paging.
 movl	%cr0, %eax
 orl	$(CR0_PE|CR0_PG|CR0_WP), %eax
 movl	%eax, %cr0

 # Now paging is enabled, but we&#39;re still running at a low EIP
 # (why is this okay?).  Jump up above KERNBASE before entering
 # C code.
 mov	$relocated, %eax
 jmp	*%eax
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由上代码可以看见, 我们在开启分页后马上使用了一个跳转到高地址, 但是此时我们还处在低地址运行, 因为映射时我们把低地址和高地址重复映射到了相同的低地址, 所以程序此时其实可以在高低两处运行:</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// Map VA&#39;s [0, 4MB) to PA&#39;s [0, 4MB)</span>
<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
	<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uintptr_t</span><span class="token punctuation">)</span>entry_pgtable <span class="token operator">-</span> KERNBASE<span class="token punctuation">)</span> <span class="token operator">+</span> PTE_P<span class="token punctuation">,</span>
<span class="token comment">// Map VA&#39;s [KERNBASE, KERNBASE+4MB) to PA&#39;s [0, 4MB)</span>
<span class="token punctuation">[</span>KERNBASE<span class="token operator">&gt;&gt;</span>PDXSHIFT<span class="token punctuation">]</span>
	<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uintptr_t</span><span class="token punctuation">)</span>entry_pgtable <span class="token operator">-</span> KERNBASE<span class="token punctuation">)</span> <span class="token operator">+</span> PTE_P <span class="token operator">+</span> PTE_W
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h1 id="challenge" tabindex="-1"><a class="header-anchor" href="#challenge"><span>challenge</span></a></h1><h2 id="使用pte-ps位来优化内存的使用" tabindex="-1"><a class="header-anchor" href="#使用pte-ps位来优化内存的使用"><span>使用PTE_PS位来优化内存的使用</span></a></h2><p>通过实验说明给的手册, 我们找到了对应的PS位的功能说明:</p><blockquote><p>Page size (PS) flag, bit 7 page-directory entries for 4-KByte pages Determines the page size. When this flag is clear, the page size is 4 KBytes and the page-directory entry points to a page table. When the flag is set, the page size is 4 MBytes for normal 32-bit addressing (and 2 MBytes if extended physical addressing is enabled) and the page- directory entry points to a page. If the page-directory entry points to a page table, all the pages associated with that page table will be 4-KByte pages.</p></blockquote><p>首先我们在<code>mmu.c</code>添加宏: <code>#define PGSIZE_PS PGSIZE * 1024</code></p><p>使用4mb大页面需要保证page对齐4mb, 这里我们只需要将KERNBASE往上的部分建立映射即可, 所以不用太考虑对齐问题, 因为地址从0x0开始, 所以本身就是对齐的, 我们只要按照PGSIZE_PS的大小向后递增即可:</p><p>为了启用PTE_PS位的功能, 我们需要先检察机器是否支持, 并修改相应的cr寄存器来开启功能. 检察支持使用<code>cpuid</code>指令, 我们需要修改的是<code>cr4</code>的第四位</p><p>完成了修改后, 我们为4mb的分页专门写一个映射函数<code>boot_map_region_4MB()</code>:</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span>
<span class="token function">boot_map_region_4MB</span><span class="token punctuation">(</span><span class="token class-name">pde_t</span> <span class="token operator">*</span>pgdir<span class="token punctuation">,</span> <span class="token class-name">uintptr_t</span> va<span class="token punctuation">,</span> <span class="token class-name">physaddr_t</span> pa<span class="token punctuation">,</span> <span class="token keyword">int</span> perm<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>pa <span class="token operator">%</span> PGSIZE_PS <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;boot_map_region_4MB: pa is not aligned\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token class-name">pde_t</span> <span class="token operator">*</span>pde <span class="token operator">=</span> <span class="token operator">&amp;</span>pgdir<span class="token punctuation">[</span><span class="token function">PDX</span><span class="token punctuation">(</span>va<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>pde <span class="token operator">=</span> <span class="token punctuation">(</span>pa <span class="token operator">&amp;</span> <span class="token number">0xffc00000</span><span class="token punctuation">)</span> <span class="token operator">|</span> perm <span class="token operator">|</span> PTE_PS <span class="token operator">|</span> PTE_P<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后对KERNBASE可以按照4mb分配的部分进行映射即可.</p><p>以下为阅读并查找到的相关内容</p><p>[图片暂时无法找回, 来自X86规范手册]</p><h2 id="扩展内核monitor指令" tabindex="-1"><a class="header-anchor" href="#扩展内核monitor指令"><span>扩展内核monitor指令</span></a></h2><p>一共扩展了三个指令, 分别是<code>showmappings</code>, <code>setmemperm</code>, <code>dumpmem</code></p><p><code>showmappings</code>只要输出页表中对应地址储存的物理地址即可</p><p><code>setmemperm</code>也只要修改页表中对应地址的权限即可</p><p><code>dumpmem</code>需要输出内存对应的内容, 此时已经开启分页, 所有内存访问通过虚拟内存访问即可</p>`,86),o=[t];function c(l,i){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","6.828-2018-lab2.html.vue"]]),k=JSON.parse(`{"path":"/posts/operating-system/oslab/6.828-2018-lab2.html","title":"6.828-2018 lab(2)","lang":"zh-CN","frontmatter":{"title":"6.828-2018 lab(2)","tag":["operating-system"],"category":["OS"],"math":true,"mermaid":true,"date":"2024-01-29T00:00:00.000Z","description":"环境准备 环境没有变化, 通过git更新了项目的依赖文件 编写前准备 这一节没有详尽的指导了, 我们需要自己去阅读源码中的注释来查明需要完成的任务 首先我们重新看一下内核代码的section: 我们可以很清楚地看到每一个代码段映射到虚拟内存上的地址, 这有利于后续我们进行相应的代码分析和编写 Part 1 boot_alloc() 然后我们可以开始准备...","head":[["meta",{"property":"og:url","content":"https://Dnullp.github.io/posts/operating-system/oslab/6.828-2018-lab2.html"}],["meta",{"property":"og:site_name","content":"Dnull's Blog"}],["meta",{"property":"og:title","content":"6.828-2018 lab(2)"}],["meta",{"property":"og:description","content":"环境准备 环境没有变化, 通过git更新了项目的依赖文件 编写前准备 这一节没有详尽的指导了, 我们需要自己去阅读源码中的注释来查明需要完成的任务 首先我们重新看一下内核代码的section: 我们可以很清楚地看到每一个代码段映射到虚拟内存上的地址, 这有利于后续我们进行相应的代码分析和编写 Part 1 boot_alloc() 然后我们可以开始准备..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Dnull"}],["meta",{"property":"article:tag","content":"operating-system"}],["meta",{"property":"article:published_time","content":"2024-01-29T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"6.828-2018 lab(2)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-29T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dnull\\",\\"url\\":\\"https://Dnullp.github.io\\"}]}"]]},"headers":[{"level":2,"title":"boot_alloc()","slug":"boot-alloc","link":"#boot-alloc","children":[]},{"level":2,"title":"mem_init() 和 page_init()","slug":"mem-init-和-page-init","link":"#mem-init-和-page-init","children":[]},{"level":2,"title":"page_alloc() 和 page_free()","slug":"page-alloc-和-page-free","link":"#page-alloc-和-page-free","children":[]},{"level":2,"title":"exercise 1","slug":"exercise-1","link":"#exercise-1","children":[]},{"level":2,"title":"exercise 2","slug":"exercise-2","link":"#exercise-2","children":[]},{"level":2,"title":"exercise 3","slug":"exercise-3","link":"#exercise-3","children":[]},{"level":2,"title":"question","slug":"question","link":"#question","children":[]},{"level":2,"title":"pgdir_walk()","slug":"pgdir-walk","link":"#pgdir-walk","children":[]},{"level":2,"title":"boot_map_region()","slug":"boot-map-region","link":"#boot-map-region","children":[]},{"level":2,"title":"page_lookup()","slug":"page-lookup","link":"#page-lookup","children":[]},{"level":2,"title":"page_remove()","slug":"page-remove","link":"#page-remove","children":[]},{"level":2,"title":"page_insert()","slug":"page-insert","link":"#page-insert","children":[]},{"level":2,"title":"question","slug":"question-1","link":"#question-1","children":[]},{"level":2,"title":"使用PTE_PS位来优化内存的使用","slug":"使用pte-ps位来优化内存的使用","link":"#使用pte-ps位来优化内存的使用","children":[]},{"level":2,"title":"扩展内核monitor指令","slug":"扩展内核monitor指令","link":"#扩展内核monitor指令","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":10.96,"words":3287},"filePathRelative":"posts/operating-system/oslab/6.828-2018-lab2.md","localizedDate":"2024年1月29日","excerpt":"\\n<p>环境没有变化, 通过git更新了项目的依赖文件</p>\\n<h1>编写前准备</h1>\\n<p>这一节没有详尽的指导了, 我们需要自己去阅读源码中的注释来查明需要完成的任务</p>\\n<p>首先我们重新看一下内核代码的section:</p>\\n<div class=\\"language-c\\" data-ext=\\"c\\" data-title=\\"c\\"><pre class=\\"language-c\\"><code>Sections<span class=\\"token operator\\">:</span>\\nIdx Name          Size      VMA       LMA       File off  Algn\\n  <span class=\\"token number\\">0</span> <span class=\\"token punctuation\\">.</span>text         <span class=\\"token number\\">00002091</span>  f0100000  <span class=\\"token number\\">00100000</span>  <span class=\\"token number\\">00001000</span>  <span class=\\"token number\\">2</span><span class=\\"token operator\\">*</span><span class=\\"token operator\\">*</span><span class=\\"token number\\">4</span>\\n                  CONTENTS<span class=\\"token punctuation\\">,</span> ALLOC<span class=\\"token punctuation\\">,</span> LOAD<span class=\\"token punctuation\\">,</span> READONLY<span class=\\"token punctuation\\">,</span> CODE\\n  <span class=\\"token number\\">1</span> <span class=\\"token punctuation\\">.</span>rodata       <span class=\\"token number\\">0000093</span>c  f01020a0  <span class=\\"token number\\">001020</span>a0  <span class=\\"token number\\">000030</span>a0  <span class=\\"token number\\">2</span><span class=\\"token operator\\">*</span><span class=\\"token operator\\">*</span><span class=\\"token number\\">5</span>\\n                  CONTENTS<span class=\\"token punctuation\\">,</span> ALLOC<span class=\\"token punctuation\\">,</span> LOAD<span class=\\"token punctuation\\">,</span> READONLY<span class=\\"token punctuation\\">,</span> DATA\\n  <span class=\\"token number\\">2</span> <span class=\\"token punctuation\\">.</span>stab         <span class=\\"token number\\">000045e5</span>  f01029dc  <span class=\\"token number\\">001029</span>dc  <span class=\\"token number\\">000039</span>dc  <span class=\\"token number\\">2</span><span class=\\"token operator\\">*</span><span class=\\"token operator\\">*</span><span class=\\"token number\\">2</span>\\n                  CONTENTS<span class=\\"token punctuation\\">,</span> ALLOC<span class=\\"token punctuation\\">,</span> LOAD<span class=\\"token punctuation\\">,</span> READONLY<span class=\\"token punctuation\\">,</span> DATA\\n  <span class=\\"token number\\">3</span> <span class=\\"token punctuation\\">.</span>stabstr      <span class=\\"token number\\">00001</span>ad3  f0106fc1  <span class=\\"token number\\">00106f</span>c1  <span class=\\"token number\\">00007f</span>c1  <span class=\\"token number\\">2</span><span class=\\"token operator\\">*</span><span class=\\"token operator\\">*</span><span class=\\"token number\\">0</span>\\n                  CONTENTS<span class=\\"token punctuation\\">,</span> ALLOC<span class=\\"token punctuation\\">,</span> LOAD<span class=\\"token punctuation\\">,</span> READONLY<span class=\\"token punctuation\\">,</span> DATA\\n  <span class=\\"token number\\">4</span> <span class=\\"token punctuation\\">.</span>data         <span class=\\"token number\\">00009300</span>  f0109000  <span class=\\"token number\\">00109000</span>  <span class=\\"token number\\">0000</span>a000  <span class=\\"token number\\">2</span><span class=\\"token operator\\">*</span><span class=\\"token operator\\">*</span><span class=\\"token number\\">12</span>\\n                  CONTENTS<span class=\\"token punctuation\\">,</span> ALLOC<span class=\\"token punctuation\\">,</span> LOAD<span class=\\"token punctuation\\">,</span> DATA\\n  <span class=\\"token number\\">5</span> <span class=\\"token punctuation\\">.</span>got          <span class=\\"token number\\">00000008</span>  f0112300  <span class=\\"token number\\">00112300</span>  <span class=\\"token number\\">00013300</span>  <span class=\\"token number\\">2</span><span class=\\"token operator\\">*</span><span class=\\"token operator\\">*</span><span class=\\"token number\\">2</span>\\n                  CONTENTS<span class=\\"token punctuation\\">,</span> ALLOC<span class=\\"token punctuation\\">,</span> LOAD<span class=\\"token punctuation\\">,</span> DATA\\n  <span class=\\"token number\\">6</span> <span class=\\"token punctuation\\">.</span>got<span class=\\"token punctuation\\">.</span>plt      <span class=\\"token number\\">0000000</span>c  f0112308  <span class=\\"token number\\">00112308</span>  <span class=\\"token number\\">00013308</span>  <span class=\\"token number\\">2</span><span class=\\"token operator\\">*</span><span class=\\"token operator\\">*</span><span class=\\"token number\\">2</span>\\n                  CONTENTS<span class=\\"token punctuation\\">,</span> ALLOC<span class=\\"token punctuation\\">,</span> LOAD<span class=\\"token punctuation\\">,</span> DATA\\n  <span class=\\"token number\\">7</span> <span class=\\"token punctuation\\">.</span>data<span class=\\"token punctuation\\">.</span>rel<span class=\\"token punctuation\\">.</span>local <span class=\\"token number\\">00001000</span>  f0113000  <span class=\\"token number\\">00113000</span>  <span class=\\"token number\\">00014000</span>  <span class=\\"token number\\">2</span><span class=\\"token operator\\">*</span><span class=\\"token operator\\">*</span><span class=\\"token number\\">12</span>\\n                  CONTENTS<span class=\\"token punctuation\\">,</span> ALLOC<span class=\\"token punctuation\\">,</span> LOAD<span class=\\"token punctuation\\">,</span> DATA\\n  <span class=\\"token number\\">8</span> <span class=\\"token punctuation\\">.</span>data<span class=\\"token punctuation\\">.</span>rel<span class=\\"token punctuation\\">.</span>ro<span class=\\"token punctuation\\">.</span>local <span class=\\"token number\\">00000060</span>  f0114000  <span class=\\"token number\\">00114000</span>  <span class=\\"token number\\">00015000</span>  <span class=\\"token number\\">2</span><span class=\\"token operator\\">*</span><span class=\\"token operator\\">*</span><span class=\\"token number\\">5</span>\\n                  CONTENTS<span class=\\"token punctuation\\">,</span> ALLOC<span class=\\"token punctuation\\">,</span> LOAD<span class=\\"token punctuation\\">,</span> DATA\\n  <span class=\\"token number\\">9</span> <span class=\\"token punctuation\\">.</span>bss          <span class=\\"token number\\">00000681</span>  f0114060  <span class=\\"token number\\">00114060</span>  <span class=\\"token number\\">00015060</span>  <span class=\\"token number\\">2</span><span class=\\"token operator\\">*</span><span class=\\"token operator\\">*</span><span class=\\"token number\\">5</span>\\n                  CONTENTS<span class=\\"token punctuation\\">,</span> ALLOC<span class=\\"token punctuation\\">,</span> LOAD<span class=\\"token punctuation\\">,</span> DATA\\n <span class=\\"token number\\">10</span> <span class=\\"token punctuation\\">.</span>comment      <span class=\\"token number\\">0000002</span>b  <span class=\\"token number\\">00000000</span>  <span class=\\"token number\\">00000000</span>  <span class=\\"token number\\">000156e1</span>  <span class=\\"token number\\">2</span><span class=\\"token operator\\">*</span><span class=\\"token operator\\">*</span><span class=\\"token number\\">0</span>\\n                  CONTENTS<span class=\\"token punctuation\\">,</span> READONLY\\n</code></pre></div>","autoDesc":true}`);export{d as comp,k as data};
