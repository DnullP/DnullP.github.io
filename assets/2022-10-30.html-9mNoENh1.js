import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as a,e as n}from"./app-DCTCPPGQ.js";const r="/assets/2022_10_30_pic_1-BZ2I-7cx.png",i="/assets/2022_10_30_pic_2-CbpZbMY1.png",o="/assets/2022_10_31_pic_1-4zpNsX-P.png",s={},d=n('<p>关于SNMP这一节的内容在第七版上的内容已经过时了，第八版采用的英文版原书，所以在此对原文进行中文的思路整理</p><h3 id="_5-7-1-network-management-framework" tabindex="-1"><a class="header-anchor" href="#_5-7-1-network-management-framework"><span>5.7.1 network management framework</span></a></h3><p>网络管理框架中包含以下要素：</p><ul><li><p>managing server 是一个应用，由网络管理员参与对整个网络的信息和指令进行收集、运行、分析、调度</p></li><li><p>managed device 被管理网络中的设备，包括host,router,middlebox,modern,switch</p></li><li><p>Date 包括configuration data and operational data 前者是人为配置的managed device的状态(state)，后者是其操作运行时才能获得的信息，比如运行OSPF时获得的邻居的信息等 device statistic 随着运行而更新的数据，比如设备接收的包的数量，丢弃的包的数量 managed device中的数据在manage server中也会有备份</p></li><li><p>network management agent 网络管理代理是运行在managed device中的应用，manage server通过与代理连接交流来控制managed device的本地行为</p></li><li><p>network management protocol 网络管理协议用于在managing server和managed device之间进行通信，中间通过agent代理</p></li></ul><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如图可以直观理解网络管理的框架</p><p>在这个框架中，一般使用三种方式进行管理：</p><ul><li><p>CLI(command line interface) 命令行接口. 直接通过输入指令或者编写脚本，在managed device上进行操作，或者远程(telnet,ssh)通过managing server对其他设备进行操作，但是这样难以应用到大型网络上</p></li><li><p>SNMP/MIB (simple network management protocol / management information base) MIB中储存了之前提到过的数据，并且管理员（运营商）可以使用SNMP协议查询和监控这些数据，然后使用CLI去主动配置设备</p></li><li><p>NETCONF/YANG 相比于SNMP/MIB更加抽象的模型，在之后再说吧</p></li></ul><h3 id="_5-7-2-snmp-mib" tabindex="-1"><a class="header-anchor" href="#_5-7-2-snmp-mib"><span>5.7.2 SNMP/MIB</span></a></h3><p>MIB对象由SMI (structure of management information)描述，使用正式的定义语言来确保网络管理数据的语法(syntax)和语义(semantics)的正确性</p><h4 id="pdu-protocol-data-unit" tabindex="-1"><a class="header-anchor" href="#pdu-protocol-data-unit"><span>PDU (protocol data unit)</span></a></h4><p>由SNMP定义的七种消息类型：</p><figure><img src="'+i+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code> The MIB objects whose values are being requested are specified in the variable binding portion of the PDU</code> 在PDU的变量部分中 指定了 被请求某个值的MIB对象</p><p><code>GetRequest, GetNextRequest, and GetBulkRequest differ in the granularity of their data requests.</code> 前三个类型的PDU在请求数据的粒度上不同（请求数据量不同）</p><p><code>GetRequest can request an arbitrary set of MIB values;</code> 第一个PDU可以请求任意一组MIB的值</p><p><code>multiple GetNextRequests can be used to sequence through a list or table of MIB objects;</code> 多个GetNextRequests指令可以用于顺序通过一个list表或者table表的MIB对象</p><p><code>GetBulkRequest allows a large block of data to be returned, avoiding the overhead incurred if multiple GetRequest or GetNextRequest messages were to be sent.</code> 允许一次返回一大块的数据，从而避免多次发送GetRequest或GetNextRequest产生的开销(incurred overhead)</p><p><code>In all three cases, the agent responds with a Response PDU containing the object identifiers and their associated values</code> 在三种情况中，代理会响应一个 包含了对象身份标识符 和 其对应数值 的PDU</p><p><code>The SetRequest PDU is used by a managing server to set the value of one or more MIB objects in a managed device. An agent replies with a Response PDU with the “noError” error status to confirm that the value has indeed been set</code> SetRequest是managing server使用的PDU，用于设置一个或多个managed device中描述的MIB对象 代理会返回一个PDU，来告诉managing server没有错误，并且目标值已经得到了设置</p><p><code>The InformRequest PDU is used by a managing server to notify another managing server of MIB information that is remote to the receiving server</code> InformRequest是用于在managing server之间转发MIB信息的，有些MIB远离目标服务器，所以需要通过InformRequest传递信息</p><p><code>The final type of SNMPv3 PDU is the trap message. Trap messages are generated asynchronously; that is, they are not generated in response to a received request but rather in response to an event for which the managing server requires notification. RFC 3418 defines well-known trap types that include a cold or warm start by a device, a link going up or down, the loss of a neighbor, or an authentication failure event. A received trap request has no required response from a managing server</code></p><p>最后一类是trap message，它是异步生成的，也就是说，它不会用来回应请求，而是用来告知managing server所需要知道的事件，比如设备的冷启动，热启动，一个连接的建立和关闭，邻居的缺失等。managing server接收到trap message后不需要回应</p><hr><p><code>Given the request-response nature of SNMP, it is worth noting here that although SNMP PDUs can be carried via many different transport protocols, the SNMP PDU is typically carried in the payload of a UDP datagram.</code></p><p>由于SNMP的“请求回应”特性，值得注意，尽管SNMP PDU可以被很多不同的运输协议携带，但是SNMP PDU通常作为UDP数据报的负载</p><p><code>Indeed, RFC 3417 states that UDP is “the preferred transport mapping.”However, since UDP is an unreli- able transport protocol, there is no guarantee that a request, or its response, will be received at the intended destination.</code></p><p>实际上在RFC3417中描述UDP是一种“首选的传输映射”，然而，由于UDP是一种不可靠传输协议，对于UDP传输的请求和回应都没有保证能够到达目的地</p><p><code>The request ID field of the PDU (see Figure 5.21) is used by the managing server to number its requests to an agent;the agent’s response takes its request ID from that of the received request.</code></p><p>PDU中有一个请求ID字段，managing server用来对它向代理发送的请求进行编号，而代理的响应中也带有接收到的请求的ID</p><p><code>Thus, the request ID field can be used by the managing server to detect lost requests or replies.</code></p><p>这样managing server就可以检测丢失的请求或回答</p><p><code>It is up to the managing server to decide whether to retransmit a request if no corresponding response is received after a given amount of time.</code> 至于一段时间后确定了PDU的丢失，是否要重新传输PDU，则是由managing server决定</p><p><code>In particular, the SNMP standard does not mandate any particular procedure for retransmission, or even if retransmission is to be done in the first place.</code></p><p>即便重传是第一时间要做的事情，但是SNMP并没有规定重传的方式</p><p><code>It only requires that the managing server “needs to act responsibly in respect to the frequency and duration of retransmissions.”This, of course, leads one to wonder how a “responsible” protocol should act!</code> 唯一的要求就是managing server 需要根据重传的频率和间隔来保证可靠性 这必然让人疑惑一个可靠的协议应该如何运作</p><h4 id="mib" tabindex="-1"><a class="header-anchor" href="#mib"><span>MIB</span></a></h4><p><code>We learned earlier that a managed device’s operational state data (and to some extent its configuration data) in the SNMP/MIB approach to network management are represented as objects that are gathered together into an MIB for that device.</code></p><p>我们早些时候学过：在网络管理的SNMP/MIB方法中，受控设备的操作状态数据(或者某些配置数据)被描述为对象，并储存在该设备的MIB中</p><p><code>An MIB object might be a counter, such as the number of IP datagrams discarded at a router due to errors in an IP datagram header;or the number of carrier sense errors in an Ethernet interface card;descriptive information such as the version of the software running on a DNS server;status information such as whether a particular device is functioning correctly;or protocol-specific information such as a routing path to a destination.</code></p><p>一个MIB对象可以是一个计数器，比如由于IP数据报头部受损而在路由器中被丢弃的IP数据报数量，以太网接口卡中的载波侦听错误数(链路层，没学)，像DNS服务器中运行的软件的版本这种 描述性信息，一个设备是否运行正常 这样的状态信息，或者路由选择目标 这样的基于协议的信息</p><p><code>Related MIB objects are gathered into MIB modules.There are over 400 MIB modules defined in various IETC RFC’s;there are many more device-andvendor-specific MIBs.[RFC 4293] specifies the MIB module that defines managed objects (including ipSystemStatsInDelivers) for managing implementations of the Internet Protocol (IP) and its associated Internet Control Message Protocol (ICMP).[RFC 4022] specifies the MIB module for TCP, and [RFC 4113] specifies the MIB module for UDP.</code></p><p>关联的MIB对象被储存在MIB模块中，RFC定义了超过400种MIB模块，同时还有更多的基于厂商和设备特有的MIB RFC 4293 制定的MIB模块 为IP协议和ICMP协议的实现 定义了受控对象 RFC 4022 为TCP制定，而RFC 4113为UDP制定</p><p><code>While MIB-related RFCs make for rather tedious and dry reading, it is nonetheless instructive (i.e., like eating vegetables, it is “good for you”) to consider an example of a MIB object, The ipSystem-StatsInDelivers object-type definition from [RFC 4293] defines a 32-bit read-only counter that keeps track of the number of IP datagrams that were received at the managed device and were successfully delivered to an upper-layer protocol.In the example below, Counter32 is one of the basic data types defined in the SMI.</code> 尽管MIB相关的RCF读起来相当枯燥，它仍然具有指导性 考虑一个MIB对象的例子，一个ipSystem-StatsInDelivers对象类型的定义，来自RFC 4239，定义了一个32位只读计数器，用来维护成功接收并向上层协议分发的IP数据报的数量的track Counter32是SMI中定义的基本数据类型之一</p><h3 id="netconf-and-yang" tabindex="-1"><a class="header-anchor" href="#netconf-and-yang"><span>NETCONF and YANG</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>The NETCONF protocol operates between the managing server and the managed 
network devices, providing messaging to 

(i) retrieve, set, and modify con-
figuration data at managed devices; 

(ii) to query operational data and statistics
at managed devices;

(iii) to subscribe to notifications generated by managed
devices. 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>NETCONF协议运行于managing server 和 受控网络设备之间，用于发送：</p><ul><li>检索、设置、设定managed device的配置数据</li><li>查询managed device的操作数据</li><li>订阅以监听managed device生成的通知（习惯了订阅这个说法）</li></ul><p>NETCONF使用xml来传输，通过RPC的方式</p><p>NETCONF操作表： <img src="`+o+'" alt="" loading="lazy"></p><p>使用这种方式可以很容易的配置复杂庞大的网络业务逻辑，使厂商把注意力放到整个网络的配置上，而不是单个的设备</p><h4 id="yang" tabindex="-1"><a class="header-anchor" href="#yang"><span>YANG</span></a></h4><p>类比于SMI，超过本书范围</p><hr><p>以上我们讨论的SNMP/MIB和NETCONF/YANG都是应用层协议，是SDN软件</p>',55),c=[d];function p(l,m){return t(),a("div",null,c)}const u=e(s,[["render",p],["__file","2022-10-30.html.vue"]]),v=JSON.parse(`{"path":"/posts/network/self-studying-notes/2022-10-30.html","title":"SNMP与网络管理","lang":"zh-CN","frontmatter":{"date":"2021-01-01T00:00:00.000Z","title":"SNMP与网络管理","tag":["Computer-Network"],"categories":["反思","笔记","翻译"],"mathjax":true,"description":"关于SNMP这一节的内容在第七版上的内容已经过时了，第八版采用的英文版原书，所以在此对原文进行中文的思路整理 5.7.1 network management framework 网络管理框架中包含以下要素： managing server 是一个应用，由网络管理员参与对整个网络的信息和指令进行收集、运行、分析、调度 managed device 被管...","head":[["meta",{"property":"og:url","content":"https://Dnullp.github.io/posts/network/self-studying-notes/2022-10-30.html"}],["meta",{"property":"og:site_name","content":"Dnull's Blog"}],["meta",{"property":"og:title","content":"SNMP与网络管理"}],["meta",{"property":"og:description","content":"关于SNMP这一节的内容在第七版上的内容已经过时了，第八版采用的英文版原书，所以在此对原文进行中文的思路整理 5.7.1 network management framework 网络管理框架中包含以下要素： managing server 是一个应用，由网络管理员参与对整个网络的信息和指令进行收集、运行、分析、调度 managed device 被管..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-14T13:35:40.000Z"}],["meta",{"property":"article:author","content":"Dnull"}],["meta",{"property":"article:tag","content":"Computer-Network"}],["meta",{"property":"article:published_time","content":"2021-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-14T13:35:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SNMP与网络管理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-14T13:35:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dnull\\",\\"url\\":\\"https://Dnullp.github.io\\"}]}"]]},"headers":[{"level":3,"title":"5.7.1 network management framework","slug":"_5-7-1-network-management-framework","link":"#_5-7-1-network-management-framework","children":[]},{"level":3,"title":"5.7.2 SNMP/MIB","slug":"_5-7-2-snmp-mib","link":"#_5-7-2-snmp-mib","children":[]},{"level":3,"title":"NETCONF and YANG","slug":"netconf-and-yang","link":"#netconf-and-yang","children":[]}],"git":{"createdTime":1712936892000,"updatedTime":1713101740000,"contributors":[{"name":"DnullP","email":"dnull123p@gmail.com","commits":2}]},"readingTime":{"minutes":8.14,"words":2442},"filePathRelative":"posts/network/self-studying-notes/2022-10-30.md","localizedDate":"2021年1月1日","excerpt":"<p>关于SNMP这一节的内容在第七版上的内容已经过时了，第八版采用的英文版原书，所以在此对原文进行中文的思路整理</p>\\n<h3>5.7.1 network management framework</h3>\\n<p>网络管理框架中包含以下要素：</p>\\n<ul>\\n<li>\\n<p>managing server\\n是一个应用，由网络管理员参与对整个网络的信息和指令进行收集、运行、分析、调度</p>\\n</li>\\n<li>\\n<p>managed device\\n被管理网络中的设备，包括host,router,middlebox,modern,switch</p>\\n</li>\\n<li>\\n<p>Date\\n包括configuration data and operational data\\n前者是人为配置的managed device的状态(state)，后者是其操作运行时才能获得的信息，比如运行OSPF时获得的邻居的信息等\\ndevice statistic\\n随着运行而更新的数据，比如设备接收的包的数量，丢弃的包的数量\\nmanaged device中的数据在manage server中也会有备份</p>\\n</li>\\n<li>\\n<p>network management agent\\n网络管理代理是运行在managed device中的应用，manage server通过与代理连接交流来控制managed device的本地行为</p>\\n</li>\\n<li>\\n<p>network management protocol\\n网络管理协议用于在managing server和managed device之间进行通信，中间通过agent代理</p>\\n</li>\\n</ul>","autoDesc":true}`);export{u as comp,v as data};
