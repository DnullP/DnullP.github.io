import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-DCTCPPGQ.js";const e={},p=t(`<h3 id="command" tabindex="-1"><a class="header-anchor" href="#command"><span>Command</span></a></h3><p>命令模式的思想很好理解，而且也非常有用：</p><p>现在假设我们有一个GUI程序和它的底层业务逻辑，如果我们要让GUI界面中的按钮能够运行一些底层业务逻辑，简单的解决方式是建立一个基本的按钮基类，然后派生出一系列解决不同功能的按钮子类</p><p>但是这样的方式会产生大量的子类，而且如果我们想要在其他组件上实现相同的功能的话，就不得不复制按钮类的实现代码</p><p>解决这个问题的方式是使用<strong>命令模式</strong>，我们把底层的业务逻辑实现为一系列方法，然后建立一个接口，名为Command，实现该接口的类包含了我们调用底层方法需要的参数、逻辑等</p><p>然后我们的按钮、选择栏等GUI组件需要调用底层逻辑时只需要通过Command调用即可，相当于是将前端和后端分离，中间层通过Command类来交互</p><p>下面是来自refactoring.guru的类结构图：</p><figure><img src="https://refactoring.guru/images/patterns/diagrams/command/structure.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里包含了六个要素：</p><ul><li><p>Client</p></li><li><p>Invoker Invoker就是之前举例说的按钮一类的调用底层的对象，其中包含了对Command的引用，可以通过 <code>setCommand()</code>方法进行行为的设定</p></li><li><p>Receiver 这就是底层逻辑的相关类了，其中的 <code>operation()</code>方法是由Command的具体实现来调用的</p></li><li><p>ConcreteCommand 具体Command类包含了预设好的参数和底层逻辑需要的对象，可直接执行底层逻辑的代码</p></li></ul><p>下面是来自noob note的代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>
   <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>建立Command接口</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stock</span> <span class="token punctuation">{</span>
   
   <span class="token keyword">private</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;ABC&quot;</span><span class="token punctuation">;</span>
   <span class="token keyword">private</span> <span class="token keyword">int</span> quantity <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
 
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Stock [ Name: &quot;</span><span class="token operator">+</span>name<span class="token operator">+</span>&quot;<span class="token punctuation">,</span> 
         <span class="token class-name">Quantity</span><span class="token operator">:</span> <span class="token string">&quot; + quantity +&quot;</span> <span class="token punctuation">]</span> bought&quot;<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Stock [ Name: &quot;</span><span class="token operator">+</span>name<span class="token operator">+</span>&quot;<span class="token punctuation">,</span> 
         <span class="token class-name">Quantity</span><span class="token operator">:</span> <span class="token string">&quot; + quantity +&quot;</span> <span class="token punctuation">]</span> sold&quot;<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是底层的逻辑代码，接收Command类的参数和调用</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BuyStock</span> <span class="token keyword">implements</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>
   <span class="token keyword">private</span> <span class="token class-name">Stock</span> abcStock<span class="token punctuation">;</span>
 
   <span class="token keyword">public</span> <span class="token class-name">BuyStock</span><span class="token punctuation">(</span><span class="token class-name">Stock</span> abcStock<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>abcStock <span class="token operator">=</span> abcStock<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
 
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      abcStock<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SellStock</span> <span class="token keyword">implements</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>
   <span class="token keyword">private</span> <span class="token class-name">Stock</span> abcStock<span class="token punctuation">;</span>
 
   <span class="token keyword">public</span> <span class="token class-name">SellStock</span><span class="token punctuation">(</span><span class="token class-name">Stock</span> abcStock<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>abcStock <span class="token operator">=</span> abcStock<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
 
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      abcStock<span class="token punctuation">.</span><span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这两个是具体的Command类</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Broker</span> <span class="token punctuation">{</span>
   <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">&gt;</span></span> orderList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">takeOrder</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span><span class="token punctuation">{</span>
      orderList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>      
   <span class="token punctuation">}</span>
 
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">placeOrders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Order</span> order <span class="token operator">:</span> orderList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         order<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      orderList<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是调用命令的类，也就是上面说的Invoker，这里是建立了一个命令列表，用户可以向列表中逐条添加命令，然后一次性将其全部按顺序执行</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommandPatternDemo</span> <span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">Stock</span> abcStock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
      <span class="token class-name">BuyStock</span> buyStockOrder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BuyStock</span><span class="token punctuation">(</span>abcStock<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">SellStock</span> sellStockOrder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SellStock</span><span class="token punctuation">(</span>abcStock<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
      <span class="token class-name">Broker</span> broker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Broker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      broker<span class="token punctuation">.</span><span class="token function">takeOrder</span><span class="token punctuation">(</span>buyStockOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>
      broker<span class="token punctuation">.</span><span class="token function">takeOrder</span><span class="token punctuation">(</span>sellStockOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
      broker<span class="token punctuation">.</span><span class="token function">placeOrders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由上面的例子可以看出，命令模式还有一个作用，就是可以延迟、排序、撤回各种命令操作</p>`,22),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","command.html.vue"]]),k=JSON.parse(`{"path":"/posts/SE/design-pattern/command.html","title":"command pattern","lang":"zh-CN","frontmatter":{"date":"2021-01-01T00:00:00.000Z","title":"command pattern","tag":["design-pattern","面向对象"],"categories":["设计模式"],"mathjax":true,"description":"Command 命令模式的思想很好理解，而且也非常有用： 现在假设我们有一个GUI程序和它的底层业务逻辑，如果我们要让GUI界面中的按钮能够运行一些底层业务逻辑，简单的解决方式是建立一个基本的按钮基类，然后派生出一系列解决不同功能的按钮子类 但是这样的方式会产生大量的子类，而且如果我们想要在其他组件上实现相同的功能的话，就不得不复制按钮类的实现代码 解...","head":[["meta",{"property":"og:url","content":"https://Dnullp.github.io/posts/SE/design-pattern/command.html"}],["meta",{"property":"og:site_name","content":"Dnull's Blog"}],["meta",{"property":"og:title","content":"command pattern"}],["meta",{"property":"og:description","content":"Command 命令模式的思想很好理解，而且也非常有用： 现在假设我们有一个GUI程序和它的底层业务逻辑，如果我们要让GUI界面中的按钮能够运行一些底层业务逻辑，简单的解决方式是建立一个基本的按钮基类，然后派生出一系列解决不同功能的按钮子类 但是这样的方式会产生大量的子类，而且如果我们想要在其他组件上实现相同的功能的话，就不得不复制按钮类的实现代码 解..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://refactoring.guru/images/patterns/diagrams/command/structure.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"command pattern"}],["meta",{"property":"article:author","content":"Dnull"}],["meta",{"property":"article:tag","content":"design-pattern"}],["meta",{"property":"article:tag","content":"面向对象"}],["meta",{"property":"article:published_time","content":"2021-01-01T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"command pattern\\",\\"image\\":[\\"https://refactoring.guru/images/patterns/diagrams/command/structure.png\\"],\\"datePublished\\":\\"2021-01-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dnull\\",\\"url\\":\\"https://Dnullp.github.io\\"}]}"]]},"headers":[{"level":3,"title":"Command","slug":"command","link":"#command","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.38,"words":713},"filePathRelative":"posts/SE/design-pattern/command.md","localizedDate":"2021年1月1日","excerpt":"<h3>Command</h3>\\n<p>命令模式的思想很好理解，而且也非常有用：</p>\\n<p>现在假设我们有一个GUI程序和它的底层业务逻辑，如果我们要让GUI界面中的按钮能够运行一些底层业务逻辑，简单的解决方式是建立一个基本的按钮基类，然后派生出一系列解决不同功能的按钮子类</p>\\n<p>但是这样的方式会产生大量的子类，而且如果我们想要在其他组件上实现相同的功能的话，就不得不复制按钮类的实现代码</p>\\n<p>解决这个问题的方式是使用<strong>命令模式</strong>，我们把底层的业务逻辑实现为一系列方法，然后建立一个接口，名为Command，实现该接口的类包含了我们调用底层方法需要的参数、逻辑等</p>","autoDesc":true}`);export{d as comp,k as data};
